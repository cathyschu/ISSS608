{
  "hash": "35cb6b884c6db1901e6e5571f14b44c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex04-4\"\nauthor: \"Cathy C.\"\ndate-modified: \"last-modified\" \nexecute:\n  echo: true \n  eval: true \n  warning: false \n  freeze: true \n---\n\n\n\n# **Funnel Plots for Fair Comparisons**\n\n## [4-4.1]{style=\"color:skyblue\"} Overview\n\nFunnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. We will learn the following in this chapter:\n\n-   Plot funnel plots using `funnelPlotR` package\n-   Plot static funnel plot with `ggplot2` package\n-   plot interactive funnel plot by using both **`plotly R`** and **`ggplot2`** packages\n\n## [4-4.2]{style=\"color:skyblue\"} Install and Launch R Packages\n\nFour R packages will be used in this exercise:\n\n1.  **readr**: import *csv* to R\n2.  **FunnerPlotR**: create funnel plot\n3.  **ggplot2**: create funner plot **manually**\n4.  **knitr**: build static html table\n5.  **plotly**: create interactive funner plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n```\n:::\n\n\n\n## [4-4.3]{style=\"color:skyblue\"} Import Data\n\nWe use a new set of data for this exercise - COVID-19_DKI_Jakarta as of 31st July 2021 from [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/). In this exercise, we will compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan).\n\nFirst, we import the data into R and save it into a tibble data frame object called *covid19*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid19 <- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %>%\n  mutate_if(is.character, as.factor)\n```\n:::\n\n\n\n|  |  |  |  |  |  |  |\n|-----------|-----------|-----------|-----------|-----------|-----------|-----------|\n| **Sub-district ID** | **City** | **District** | **Sub-district** | **Positive** | **Recovered** | **Death** |\n| 3172051003 | JAKARTA UTARA | PADEMANGAN | ANCOL | 1776 | 1691 | 26 |\n| 3173041007 | JAKARTA BARAT | TAMBORA | ANGKE | 1783 | 1720 | 29 |\n| 3175041005 | JAKARTA TIMUR | KRAMAT JATI | BALE KAMBANG | 2049 | 1964 | 31 |\n| 3175031003 | JAKARTA TIMUR | JATINEGARA | BALI MESTER | 827 | 797 | 13 |\n| 3175101006 | JAKARTA TIMR | CIPAYUNG | BAMBU APUS | 2866 | 2792 | 27 |\n| 3174031002 | JAKARTA SELATAN | MAMPANG PRAPATAN | BANGKA | 1828 | 1757 | 26 |\n\n: {.striped .hover}\n\n## [4-4.4]{style=\"color:skyblue\"} `FunnelPlotR` Methods\n\n[**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses `ggplot` to generate funner plots. It requires `numerator` (events of interest), `denominator` (population considered) and `group`. The key arguments selected for customisation are:\n\n::: column-margin\n**FunnelPlotR Installation**\n\n``` r\ninstall.packages(\"FunnelPlotR\")\n```\n:::\n\n-   `limit`: plot limits (95 or 99)\n-   `label_outliers`: to label outliers (true or false)\n-   `Poisson_limits`: to add Poisson limits to the plot\n-   `OD_adjust`: to add overdispersed limits to the plot\n-   `xrange` and `yrange`: to specify the range to display for axes, acts like a zoom function\n-   Other aesthetic components, such as `graph title`, `axis labels` etc.\n\n### [4-4.4.1]{style=\"color:skyblue\"} `FunnelPlotR` methods: Basic plot\n\nThe code below plots a funnel plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_4_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\n## Things to learn\n\n-   `group` in this function is different from the scatterplot. Here is defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\n-   By default, `data_type` argument is \"SR\".\n-   `limit`: Plot limits, accepted values are 95 or 99, corresponding to 95% or 99% quantiles of the distribution.\n:::\n\n### [4-4.4.2]{style=\"color:skyblue\"} `FunnelPlotR` methods: Makeover 1\n\nAdjust code to make over the previous plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_4_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n## Things to learn from the code\n\n-   \\+`data_type` argument is used to change from default \"SR\" to \"PR\" (i.e., proportions).\n\n-   \\+`xrange` and `yrange` are used to set the range of x-axis and y-axis.\n:::\n\n### [4-4.4.3]{style=\"color:skyblue\"} `FunnelPlotR` methods: Makeover 2\n\n## [4-4.5]{style=\"color:skyblue\"} Funnel Plot for Fair Visual Comparison: `ggplot2` methods\n\n### [4-4.5.1]{style=\"color:skyblue\"} Computing the basic derived fields\n\n### [4-4.5.2]{style=\"color:skyblue\"} Calculate lower and upper limits for 95% and 99.9% CI\n\n### [4-4.5.3]{style=\"color:skyblue\"} Plot a static funnel plot\n\n### [4-4.5.4]{style=\"color:skyblue\"} Interactive funnel plot: `plotly` + `ggplot2`\n\n## [4-4.6]{style=\"color:skyblue\"} References\n",
    "supporting": [
      "Hands-on_Ex04_4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}