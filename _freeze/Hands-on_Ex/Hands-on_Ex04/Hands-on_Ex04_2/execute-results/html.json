{
  "hash": "38fb14d35b6459f0d5863c00ca49018e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Ex04-2\"\nauthor: \"Cathy C\"\ndate-modified: \"last-modified\" \nexecute:\n  echo: true \n  eval: true \n  warning: false \n  freeze: true  \n---\n\n\n\n# Visual Statistical Analysis\n\n## [4-2.1]{style=\"color:skyblue\"} Learning Outcome\n\nIn this hands-on exercise, we will gain hands-on experience on using:\n\n-   **ggstatsplot** package to create visual graphics with rich statistical information.\n-   **performance** package to visualise model diagnostics.\n-   **parameters** package to visualise model parameters.\n\n## [4-2.2]{style=\"color:skyblue\"} Visual Statistical Analysis with **ggstatsplot**\n\n[**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) ![](images/ggstatsplot.png){width=\"40\"}is an extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n``` r\n- to provide alternative statistical inference methods by default.\n- to follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. \nFor example, here are results from a robust t-test:\n```\n\n![](images/stats_reporting_format.png)\n\n## [4-2.3]{style=\"color:skyblue\"} Getting started\n\n### [4-2.3.1]{style=\"color:skyblue\"} Installing and launching R packages\n\nIn this exercise, g**gstatsplot** and **tidyverse** will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n\n\n### [4-2.3.2]{style=\"color:skyblue\"} Importing data\n\n::: callout-note\n## DIY\n\nImport Exam-csv data by using appropriate tidyverse package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n:::\n\n### [4-2.3.3]{style=\"color:skyblue\"} One-sample test: *`gghistostats()`* method\n\nIn the code chunk below, [*`gghistostats()`*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to build an visual of one-sample test on English scores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nDefault information:\n\nstatistical details / Bayes Factor / sample sizes / distribution summary\n\n### [4-2.3.4]{style=\"color:skyblue\"} Unpacking the Bayes Factor\n\n-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.\n\n-   That's because the Bayes factor gives us a way to evaluate the data in favour of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.\n\n-   When we are comparing two hypotheses, ***H1*** (the alternate hypothesis) and ***H0*** (the null hypothesis), the Bayes factor is often written as **B10**. It can be defined mathematically as:\n\n    $$\n    \\frac{likelihood-of-data-given-H_1}{likelihood-of-data-given-H_0} = \\frac{P(D|H_1)}{P(D/H_0)}\n    $$\n\n-   The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough estimation of the Bayes factor.\n\n### [4-2.3.5]{style=\"color:skyblue\"} How to interpret Bayes Factor\n\nA Bayes Factor can be any positive number.\n\nOne of the most common interpretation is this one - first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagemakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013.\n\n| IF B10 IS... | THEN YOU HAVE               |\n|--------------|-----------------------------|\n| \\>100        | Extreme evidence for H1     |\n| 30 - 100     | Very strong evidence for H1 |\n| 10 - 30      | Strong evidence for H1      |\n| 3 - 10       | Moderate evidence for H1    |\n| 1 - 3        | Anecdotal evidence for H1   |\n| 1            | No evidence                 |\n| 1/3 - 1      | Anecdotal evidence for H1   |\n| 1/3 - 1/10   | Moderate evidence for H1    |\n| 1/10 - 1/30  | Strong evidence for H1      |\n| 1/30 - 1/100 | Very Strong evidence for H1 |\n| \\<1/100      | Extreme evidence for H1     |\n\n: Bayes Factor {.striped .hover}\n\n### [4-2.3.6]{style=\"color:skyblue\"} Two-sample mean test: *`ggbetweenstats()`*\n\nIn the code chunk below, [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  message = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nDefault information: statistical details / Bayes factor / samples sizes / distribution summary\n\n### [4-2.3.7]{style=\"color:skyblue\"} Oneway ANOVA Test: *`ggbetweentats()`* method\n\nIn the code chunk below, [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English scores by race.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = exam,\n  x = RACE,\n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n-   \"na\" -\\> only non-significant\n-   \"s\" -\\> only significant\n-   \"all\" -\\> everything\n\n#### [4-2.3.7.1]{style=\"color:skyblue\"} *`ggbetweentats()`* - Summary of tests\n\n::: panel-tabset\n## Test\n\nFollowing (between-subjects) tests are carried out for each type of analyses.\n\n| TYPE | NO. OF GROUPS | TEST |\n|----|----|----|\n| Parametric | \\>2 | Fisher's or Welch's one-way ANOVA |\n| Non-Parametric | \\>2 | Kruskal-Wallis one-way ANOVA |\n| Robust | \\>2 | Heteroscedastic one-way ANOVA for trimmed means |\n| Bayes Factor | \\>2 | Fisher's ANOVA |\n| Parametric | 2 | Student's or Welch's *t*-test |\n| Non-Parametric | 2 | Mann-Whitney *U* test |\n| Robust | 2 | Yuen's test for trimmed means |\n| Bayes Factor | 2 | Student's *t*-test |\n\n## CI\n\nThe following effect sizes (and confidence intervals) are available for each type of test\n\n![](images/effect_sizes.jpg)\n\n## Summary\n\nSummary of multiple pairwise comparison tests supported in `ggbetweenstats()`\n\n![](images/summary.jpg)\n:::\n\n### [4-2.3.8]{style=\"color:skyblue\"} Significant test of correlation: *`ggscatterstats()`*\n\nIn the code chunk below, [`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores. Practice using various subjects from the data and labeling functions.\n\n::: panel-tabset\n## 🦖 Practice I\n\nMaths x Science; use labels to indicate races scoring 90 for both subjects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = SCIENCE,\n  label.var = RACE,\n  label.expression = MATHS >= 90 & SCIENCE >= 90,\n  marginal = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## 🦖 Practice II\n\nEnglish x Science; use labels to indicate genders scoring 90 for both subjects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = exam,\n  x = ENGLISH,\n  y = SCIENCE,\n  label.var = GENDER,\n  label.expression = ENGLISH >= 90 & SCIENCE >= 90,\n  marginal = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### [4-2.3.9]{style=\"color:skyblue\"} Significant test of association (dependence): *`ggbarstats()`*\n\nCode chunk below, the Maths scores are binned into a 4-class variable with [`cut()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#load library\nlibrary(dplyr)\n\nexam1 <- exam |>\n  mutate(MATHS_bins = \n           cut(MATHS,\n               breaks = c(0,60,75,85,100)))\n```\n:::\n\n\n\n[`ggbarstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association in the code below.\n\n::: column-margin\nUsage\n\n``` r\nggbarstats(\n  data,\n  x,\n  y,\n  counts = NULL,\n  type = \"parametric\",\n  paired = FALSE,\n  results.subtitle = TRUE,\n  label = \"percentage\",\n  label.args = list(alpha = 1, fill = \"white\"),\n  sample.size.label.args = list(size = 4),\n  digits = 2L,\n  proportion.test = results.subtitle,\n  digits.perc = 0L,\n  bf.message = TRUE,\n  ratio = NULL,\n  conf.level = 0.95,\n  sampling.plan = \"indepMulti\",\n  fixed.margin = \"rows\",\n  prior.concentration = 1,\n  title = NULL,\n  subtitle = NULL,\n  caption = NULL,\n  legend.title = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ggtheme = ggstatsplot::theme_ggstatsplot(),\n  package = \"RColorBrewer\",\n  palette = \"Dark2\",\n  ggplot.component = NULL,\n  ...\n)\n```\n:::\n\n::: panel-tabset\n## 🦖 Practice I\n\nTo see English scores by genders.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_E <- exam |>\n  mutate(ENGLISH_bins = \n           cut(ENGLISH,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_E,\n           x = ENGLISH_bins,\n           y = GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## 🦖 Practice II\n\nTo see Science scores by races.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_S <- exam |>\n  mutate(SCIENCE_bins = \n           cut(SCIENCE,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_S,\n           x = SCIENCE_bins,\n           y = RACE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbarstats(exam1,\n           x = MATHS_bins,\n           y = GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## [4-2.4]{style=\"color:skyblue\"} Visualsing Models\n\nLearn how to visualise model diagnostic and model parameters by using parameters package.\n\n🚙 🚙 🚙 🚙 🚙 Toyota Corolla case study will be used to build a model to discover factor affecting practices of used-cars by taking into consideration of a set of explanatory variables.\n\n## [4-2.5]{style=\"color:skyblue\"} Getting started\n\n## [4-2.6]{style=\"color:skyblue\"} Installing and loading the required libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n:::\n\n\n\n### [4-2.6.1]{style=\"color:skyblue\"} Importing Excel file: readxl methods\n\n[`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of [`readxl`](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` worksbook into R.\n\n::: column-margin\n`read_xls()` Usage\n\n``` r\nread_excel(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\nread_xls(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\nread_xlsx(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\",\n                       \"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\nThe output object `car_resale` is a tibble data frame.\n\n*Tibble is a modern data frame that is similar to data frames in R Programming Language but with some enhancements to make them easier to use and more consistent. Tibble is a part of the tidyverse package in R. Using tibbles we can **view and understand the data very easily especially when working with large datasets***\n:::\n\n### [4-2.6.2]{style=\"color:skyblue\"} Multiple regression model using `lm()`\n\nCode chunk below is used to calibrate a multiple linear regression model by using `lm()` of Base Stats of R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Price~Age_08_04 + Mfg_Year + KM +\n              Weight + Guarantee_Period, data = car_resale)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n\n\n:::\n:::\n\n\n\n🦄 Can see how the variables affecting price positively or negatively.\n\n### [4-2.6.3]{style=\"color:skyblue\"} Model diagnostic: checking for multicolinearity\n\nCode below checks for Multicollinearity using [`check_collinearity()`](https://easystats.github.io/performance/reference/check_collinearity.html) of `performance` package.\n\n::: column-margin\n`check_collinearity()` Usage\n\n``` r\ncheck_collinearity(x, ...)\n\nmulticollinearity(x, ...)\n\n# Default S3 method\ncheck_collinearity(x, ci = 0.95, verbose = TRUE, ...)\n\n# S3 method for class 'glmmTMB'\ncheck_collinearity(\n  x,\n  component = c(\"all\", \"conditional\", \"count\", \"zi\", \"zero_inflated\"),\n  ci = 0.95,\n  verbose = TRUE,\n  ...\n)\n\ncheck_concurvity(x, ...)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_collinearity(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n```\n\n\n:::\n:::\n\n\n\nNext to plot the result:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"bayestestR\", repos = \"https://easystats.r-universe.dev\")\n#remotes::install_github(\"easystats/see\")\n#install.packages(\"performance\")\nlibrary(performance)\nlibrary(\"bayestestR\")\nlibrary(\"see\")\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### [4-2.6.4]{style=\"color:skyblue\"} Model diagnostic: checking normality assumption\n\nChecking normality using [`check_normality()`](https://easystats.github.io/performance/reference/check_normality.html) from the [`performance`](https://easystats.github.io/performance/index.html) package.\n\n::: column-margin\n`check_normality()`usage\n\n``` r\ncheck_normality(x, ...)\n\n# S3 method for class 'merMod'\ncheck_normality(x, effects = \n                  c(\"fixed\", \"random\"), ...)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(Price ~ Age_08_04 + KM +\n               Weight + Guarantee_Period, \n             data = car_resale)\n\n#check normality\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n::: column-margin\n🐠 [**The Performance workflow**]{style=\"color:pink\"}\n\n![](images/figure_workflow.png){fig-align=\"center\"}\n:::\n\n### [4-2.6.5]{style=\"color:skyblue\"} Model diagnostic: check model for homogeneity of variances\n\nCheck model for constant error variance using [`check_heteroscedasticity()`](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) from the `performance` package.\n\n::: column-margin\n`check_heteroscedasticity()` usage\n\n```{.r}\ncheck_heteroscedasticity(x, ...)\n\ncheck_heteroskedasticity(x, ...)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n### [4-2.6.6]{style=\"color:skyblue\"} Model diagnostic: complete check\n\nUse [`check_model()`](https://easystats.github.io/performance/reference/check_model.html) to perform a complete model check.\n\nVisual check of various model assumptions (normality of residuals, normality of random effects, linear relationship, homogeneity of variance, multicollinearity).\n\nIf `check_model()` doesn't work as expected, try setting `verbose = TRUE` to get hints about possible problems.\n\n::: column-margin\n```{.r}\ncheck_model(x, ...)\n\n# Default S3 method\ncheck_model(\n  x,\n  panel = TRUE,\n  check = \"all\",\n  detrend = TRUE,\n  bandwidth = \"nrd\",\n  type = \"density\",\n  residual_type = NULL,\n  show_dots = NULL,\n  size_dot = 2,\n  size_line = 0.8,\n  size_title = 12,\n  size_axis_title = base_size,\n  base_size = 10,\n  alpha = 0.2,\n  alpha_dot = 0.8,\n  colors = c(\"#3aaf85\", \"#1b6ca8\", \"#cd201f\"),\n  theme = \"see::theme_lucid\",\n  verbose = FALSE,\n  ...\n)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-20-1.png){width=1152}\n:::\n:::\n\n\n\n### [4-2.6.7]{style=\"color:skyblue\"} Visualising regression parameters: see methods\n\nUse `plot()` from the `see` package and `parameters()` from the `parameters` package to visualise the parameters of a regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(parameters(model1))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n### [4-2.6.8]{style=\"color:skyblue\"} Visualising regression parameters: *`ggcoefstats()`* methods\n\nUse [`ggcoefstats()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcoefstats.html) from `ggstatsplot` package to visualise the parameters of a regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoefstats(model1,\n            output = \"plot\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex04_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}