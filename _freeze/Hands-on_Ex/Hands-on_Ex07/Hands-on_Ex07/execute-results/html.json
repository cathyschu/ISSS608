{
  "hash": "c9d2e12045aa2f004cf2b3a3ed519577",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex07\"\nauthor: \"Cathy Chu\"\ndate-modified: \"last-modified\" \nexecute:\n  echo: true \n  eval: true \n  warning: false \n  freeze: true  \n---\n\n\n\n# **Visualising and Analysing Time-oriented Data**\n\n## 1 Learning Objectives\n\nIn this chapter, we will learn to plot the following visualisations:\n\n-   a calender heatmap (ggplot2 functions)\n-   a cycle plot (ggplot2 functions)\n-   a slopegraph\n-   a horizon chart\n\n## 2 Getting Started\n\nTo install and launch the following R packages:\n\n**scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, \n               data.table, tidyverse, CGPfunctions, ggHoriPlot)\n```\n:::\n\n\n\n## 3 Plotting Calendar Heatmap\n\nWithin this section, we will do the following:\n\n-   plot a calendar heatmap by using ggplot2 functions and extension\n-   write function using R programming\n-   derive specific date and time related field by using base **R** and **libridate** packages\n-   perform data preparation task by using tidyr and dplyr packages\n\n### 3.1 Data\n\n*eventlog.csv* file will be used for this exercise. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n::::::::: panel-tabset\n## **1-Import data**\n\nTo import *eventlog.csv* into R environment and call this data frame as ***attacks.***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n\n## **2-Exam data structure**\n\nWe will use `kable()` to review the structure of the imported data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n\nWe see 3 columns: *timestamp, source_country,* and *tz.*\n\n-   *timestamp:* stores data-time values in POSIXct format.\n-   *source_country:* stores the source of attack. It is in ISO3166-1 alpha-2 country code.\n-   *tz:* stores timezone of source IP address.\n\n## **3-Data prep**\n\n**Step 1.** Deriving *weekday* and *hour of day* fields\n\nTwo new fields need to be derived: ***wkday*** and ***hour*** before we plot the calendar heatmap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts,\n                        tz = tz[1],\n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n```\n:::\n\n\n\n::::: goals\n::: goals-header\nLearning from the code\n:::\n\n::: goals-container\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package.\n\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n:::\n:::::\n\n**Step 2.** Deriving the attacks tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nwkday_levels <- c('Saturday', 'Friday', 'Thursday',\n                  'Wednesday', 'Tuesday', 'Monday',\n                  'Sunday')\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp,\n                   .$source_country,\n                   .$tz)) %>%\n  ungroup() %>%\n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour = factor(\n      hour, levels = 0:23\n    )\n  )\n```\n:::\n\n\n\n::::: goals\n::: goals-header\nLearning from the code\n:::\n\n::: goals-container\n`mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they will be ordered when plotting.\n:::\n:::::\n\n**Step 3.** Check the tibble table:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n:::::::::\n\n### 3.2 Build the calendar heatmaps\n\nWe can simply group the count by hour and wkday and plot it, since we know that we have values for every combination. Use the code below to build the calendar heatmaps:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngrouped <- attacks %>%\n  count(wkday, hour) %>%\n  ungroup() %>%\n  na.omit()\n\nggplot(grouped,\n       aes(hour,\n           wkday,\n           fill = n)) +\n  geom_tile(color = \"#f1f4f5\",\n            size = 0.1) +\n  theme_tufte(base_family = \"Helvetica\") +\n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                      low = \"#faf1f0\",\n                      high = \"dark red\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Attacks by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n::::: goals\n::: goals-header\nLearning from the code\n:::\n\n::: goals-container\n-   a tibble data table called grouped is derived by aggregating the attack by *wkday* and *hour* fields.\n-   a new field called *n* is derived by using group_by() and count() functions.\n-   `na.omit()` is used to exclude missing value.\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. *\\[there is a dashed line around the plot removed by this theme\\]*\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n-   `scale_fill_gradient()` function is used to create a **two colour gradient** (low-high).\n:::\n:::::\n\n### 3.3 Build multiple calendar heatmaps\n\n**Challenge:** Build multiple heatmaps for the top four countries with the highest number of attacks.\n\n**Step 1.** Derive attack numbers by country object\n\nTo identify the top 4 countries with the highest attack numbers, we need to do the following:\n\n-   count the number of attacks by country\n-   calculate the percentage of attacks by country\n-   save the result in a tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\n**Step 2.** Prepare the tidy data frame\n\nNow, we will extract the top 4 countries from ***attacks*** data frame, and save the data in a new tibble data frame *top4_attacks.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4\n  )) %>%\n  na.omit()\n```\n:::\n\n\n\n**Step 3.** Plot the multiple calendar heatmap with ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(top4_attacks,\n       aes(hour,\n           wkday,\n           fill = n)) +\n  geom_tile(color = \"#f1f4f5\", size = 0.1) +\n  theme_tufte(base_family = \"Helvetica\") +\n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                      low = \"#faf1f0\",\n                      high = \"dark red\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL,\n       title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 4),\n        axis.text.y = element_text(size = 4),\n        plot.title = element_text(size = 10, hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## 4 Plotting Cycle Plot\n\nTo show time-series patterns and trend of visitor arrivals from Vietnam, we will use Cycle plot to visualise it with **ggplot2**.\n\n### 4.1 Data import\n\n### 4.2 Deriving month and year fields\n\n### 4.3 Extract the target country\n\n### 4.4 Computing year average arrivals by month\n\n### 4.5 Plotting the cycle plot\n\n## 5 Plotting Slopegraph\n\n### 5.1 Data import\n\n### 5.2 Plotting the slopegraph\n",
    "supporting": [
      "Hands-on_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}