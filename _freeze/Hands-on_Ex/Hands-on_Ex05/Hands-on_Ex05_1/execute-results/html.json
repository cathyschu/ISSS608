{
  "hash": "e98da3d25f599e77fa6cd0f78655a287",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex05-1\"\nauthor: \"Cathy C.\"\ndate-modified: \"last-modified\" \nexecute:\n  echo: true \n  eval: true \n  warning: false \n  freeze: true \n---\n\n\n\n# **Creating Ternary Plot with R**\n\n## 1 Overview\n\nTernary plots are a way of displaying the **distribution** and **variability** of **three-part compositional data**. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.)\n\nThe display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\n\nIn this hands-on, I will build ternary plot programmatically using R for visualising and analysing population structure of Singapore. Here are the 4 steps:\n\n1.  Install and launch **tidyverse** and **ggtern** packages.\n2.  Derive three new measures using *`mutate()`* function of **dplyr** package.\n3.  Build a static ternary plot using *`ggtern()`* function of **ggtern** package.\n4.  Build an interactive ternary plot using *`plot-ly()`* function of **Plotly R** package.\n\n## 2 Install and Launch R Packages\n\n2 main R packages will be used.\n\n+--------------------------------------+-------------------------------------------------------------------------------------------------------------------------+\n| **R Package**                        | **Overview**                                                                                                            |\n+======================================+=========================================================================================================================+\n| [**ggtern**](http://www.ggtern.com/) | a ggplot extension that plots ternary diagrams. The package will be used to plot static ternary plots.                  |\n+--------------------------------------+-------------------------------------------------------------------------------------------------------------------------+\n| [**Plotply R**](https://plot.ly/r/)  | an R package for creating interactive web-based graphs via plotly's JavaScript graphing library, plotly.js.             |\n|                                      |                                                                                                                         |\n|                                      | The **plotly R** library contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object. |\n+--------------------------------------+-------------------------------------------------------------------------------------------------------------------------+\n| **tidyverse**                        | selected tidyverse family packages: **readr**, **dplyr** and **tidyr** are installed and loaded.                        |\n+--------------------------------------+-------------------------------------------------------------------------------------------------------------------------+\n\n: {.striped .hover}\n\nVersion 3.2.1 of **ggplot2** will be installed instead of the latest version of **ggplot2**, because the current version of **ggtern** package is not compatible to the latest version of **ggplot2**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(plotly, ggtern, tidyverse)\n```\n:::\n\n\n\n## 3 Data Preparation\n\n### 3.1 Data\n\nThe [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data will be used.\n\nFile name: *respopagsex2000to2018_tidy.csv*\n\n::: panel-tabset\n## Import data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\nhead(pop_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n  PA         SZ                     AG      Year Population\n  <chr>      <chr>                  <chr>  <dbl>      <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2011        290\n2 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2012        270\n3 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2013        260\n4 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2014        250\n5 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2015        260\n6 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2016        250\n```\n\n\n:::\n:::\n\n\n\n## Prepare data\n\nUse `mutate()` function of **dplyr** package to derive 3 new measures, namely: young, active and old.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Deriving the young, economy active and old measures\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year)) %>%\n  spread(AG, Population) %>% #turn the values in Population col into AG cols.\n  mutate(YOUNG = rowSums(.[4:8])) %>% #Age 0-24\n  mutate(ACTIVE = rowSums(.[9:16])) %>% #Age 25-64\n  mutate(OLD = rowSums(.[17:21])) %>% #Age >65\n  mutate(TOTAL = rowSums(.[22:24])) %>% #Age \n  filter(Year == 2018) %>%\n  filter(TOTAL >0)\n```\n:::\n\n\n:::\n\n::: column-margin\n#### ðŸŽ¯ **Useful mutate functions**\n\n-   [`+`](https://rdrr.io/r/base/Arithmetic.html), [`-`](https://rdrr.io/r/base/Arithmetic.html), [`log()`](https://rdrr.io/r/base/Log.html), etc., for their usual mathematical meanings\n\n-   [`lead()`](https://dplyr.tidyverse.org/reference/lead-lag.html), [`lag()`](https://dplyr.tidyverse.org/reference/lead-lag.html)\n\n-   [`dense_rank()`](https://dplyr.tidyverse.org/reference/row_number.html), [`min_rank()`](https://dplyr.tidyverse.org/reference/row_number.html), [`percent_rank()`](https://dplyr.tidyverse.org/reference/percent_rank.html), [`row_number()`](https://dplyr.tidyverse.org/reference/row_number.html), [`cume_dist()`](https://dplyr.tidyverse.org/reference/percent_rank.html), [`ntile()`](https://dplyr.tidyverse.org/reference/ntile.html)\n\n-   [`cumsum()`](https://rdrr.io/r/base/cumsum.html), [`cummean()`](https://dplyr.tidyverse.org/reference/cumall.html), [`cummin()`](https://rdrr.io/r/base/cumsum.html), [`cummax()`](https://rdrr.io/r/base/cumsum.html), [`cumany()`](https://dplyr.tidyverse.org/reference/cumall.html), [`cumall()`](https://dplyr.tidyverse.org/reference/cumall.html)\n\n-   [`na_if()`](https://dplyr.tidyverse.org/reference/na_if.html), [`coalesce()`](https://dplyr.tidyverse.org/reference/coalesce.html)\n\n-   [`if_else()`](https://dplyr.tidyverse.org/reference/if_else.html), [`recode()`](https://dplyr.tidyverse.org/reference/recode.html), [`case_when()`](https://dplyr.tidyverse.org/reference/case_when.html)\n\n#### **Grouped tibbles**\n\nBecause mutating expressions are computed within groups, they may yield different results on grouped tibbles. This will be the case as soon as an aggregating, lagging, or ranking function is involved. Compare this ungrouped mutate:\n\n```         \nstarwars %>%\n  select(name, mass, species) %>%\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\n```\n\n#### With the grouped equivalent:\n\n```         \nstarwars %>%\n  select(name, mass, species) %>%\n  group_by(species) %>%\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\n```\n\nThe former normalises `mass` by the global average whereas the latter normalises by the averages within species levels.\n:::\n\n### 3.3 Prepare data\n\n## 4 Plot Ternary Diagram with R\n\n### 4.1 Plot a static ternary diagram\n\nUse ***ggtern()*** function of **ggtern** package to create a simple ternary plot:\n\n::: panel-tabset\n## Classic\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## theme_rgbw()\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggtern(data = agpop_mutated, aes(\n  x = YOUNG, y = ACTIVE, z = OLD\n)) +\n  geom_point() +\n  labs(title = \"Popultation structure, 2015\") +\n  theme_rgbw()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## plot_ly()\n\n\n\n::: {.cell}\n\n:::\n\n\n\n:::\n\n### 4.2 Plot an interactive ternary diagram\n\n### \n",
    "supporting": [
      "Hands-on_Ex05_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}