{
  "hash": "9fb0f0d9aa999a67df6415c487db9edb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1\"\nauthor: \"Cathy C.\"\ndate: \"February 1, 2025\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true \n  eval: true #no more rendering if no further changes\n  warning: false \n  freeze: true \n---\n\n\n\n\n## 1 Overview\n\n### 1.1 Abstract\n\n\\[placeholder\\]\n\n### 1.2 Task\n\nAn international media company that publishes weekly content on digital platforms is planning to release articles on \"Ship Performance in the Gulf of Guinea\". As a graphical editor of the media company, I am going to prepare data visualisation for the article focusing on ship performance assessment.\n\nThis report will use Exploratory Data Analysis (EDA) methods and ggplot2 functions to visualise insights on:\n\n-   Ships' energy efficiency\n-   Ships' profitability\n-   Operational factors affecting voyage performance\n\n## 2 Install and Load Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, ggplot2, haven, knitr, patchwork, ggthemes, ggridges, gganimate,\n               ggdist, ggtext, colorspace, magrittr, patchwork, RColorBrewer,\n               ggstatsplot, egg, geomtextpath)\n```\n:::\n\n\n\n\n## 3 Data Preparation\n\nThe dataset [Ship Performance Clustering Dataset](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset) downloaded from Kaggle. This file contains a detailed dataset focusing on the operational performance of various ship types across different routes. Each row represents the performance metrics and attributes for a specific voyage or ship over a given timeframe.\n\n### 3.1 Import file and check\n\nImport the csv file using `read_csv()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ship <- read_csv(\"data/Ship_Pfm_Dataset.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data_ship)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n\n\n:::\n:::\n\n\n\n\nNext I would like to observe the variables and their data type and understand the dataset.\n\nThe dataset consists of 18 columns and 2,736 rows (observations). Each observation contains an entry recording a voyage for which the ship's profile and operational information. As the result of code shows, there are 5 categorical variables, 1 date variable and 12 numerical variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(data_ship)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 18\n$ Date                    <date> 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               <chr> \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              <chr> \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             <chr> \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      <chr> \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            <dbl> 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       <chr> \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   <dbl> 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     <dbl> 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n```\n\n\n:::\n:::\n\n\n\n\n### 3.2 Data Wrangling\n\nThe diagram below shows the variables selected for this study:\n\n\\[placeholder\\]\n\n#### 3.2.1 Add a variable\n\nTo assess the ships' performance in profit, I will add a variable **Profit**, to be derived from Revenue_per_Voyage_USD subtracing Operational_Cost_USD.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndata_ship <- data_ship %>%\n  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)\n```\n:::\n\n\n\n\nNow, I will use `head()` to have a look and confirm **Profit** is added to the data frame and the data type is numeric.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data_ship)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n  Date       Ship_Type      Route_Type   Engine_Type          Maintenance_Status\n  <date>     <chr>          <chr>        <chr>                <chr>             \n1 2023-06-04 Container Ship None         Heavy Fuel Oil (HFO) Critical          \n2 2023-06-11 Fish Carrier   Short-haul   Steam Turbine        Good              \n3 2023-06-18 Container Ship Long-haul    Diesel               Fair              \n4 2023-06-25 Bulk Carrier   Transoceanic Steam Turbine        Fair              \n5 2023-07-02 Fish Carrier   Transoceanic Diesel               Fair              \n6 2023-07-09 Fish Carrier   Long-haul    Heavy Fuel Oil (HFO) Fair              \n# ℹ 14 more variables: Speed_Over_Ground_knots <dbl>, Engine_Power_kW <dbl>,\n#   Distance_Traveled_nm <dbl>, Draft_meters <dbl>, Weather_Condition <chr>,\n#   Cargo_Weight_tons <dbl>, Operational_Cost_USD <dbl>,\n#   Revenue_per_Voyage_USD <dbl>, Turnaround_Time_hours <dbl>,\n#   Efficiency_nm_per_kWh <dbl>, Seasonal_Impact_Score <dbl>,\n#   Weekly_Voyage_Count <dbl>, Average_Load_Percentage <dbl>, Profit <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n#### 3.2.2 Variable selection\n\nTo perform an analysis to achieve the objectives in 1.2, I will keep the following variables.\n\n| Category | Variable                | Recoded | Description | Type | Encoding |\n|----------|-------------------------|---------|-------------|------|----------|\n| apple    | Date                    | bbb     | bbb         | bbb  | bbb      |\n| pear     | Ship_Type               | bbb     | bbb         | bbb  | bbb      |\n| orange   | Route_Type              | bbb     | bbb         | bbb  | bbb      |\n| orange   | Engine_Type             | bbb     | bbb         | bbb  | bbb      |\n| orange   | Maintenance_Status      | bbb     | bbb         | bbb  | bbb      |\n| orange   | Speed_Over_Ground_knots | bbb     | bbb         | bbb  | bbb      |\n| orange   | Engine_Power_kW         | bbb     | bbb         | bbb  | bbb      |\n| orange   | Distance_Traveled_nm    | bbb     | bbb         | bbb  | bbb      |\n| orange   | Draft_meters            | bbb     | bbb         | bbb  | bbb      |\n| orange   | Weather_Condition       | bbb     | bbb         | bbb  | bbb      |\n| orange   | Cargo_Weight_tons       | bbb     | bbb         | bbb  | bbb      |\n| orange   | Operational_Cost_USD    | bbb     | bbb         | bbb  | bbb      |\n| orange   | Revenue_per_Voyage_USD  | bbb     | bbb         | bbb  | bbb      |\n| orange   | Efficiency_nm_per_kWh   | bbb     | bbb         | bbb  | bbb      |\n| orange   | Weekly_Voyage_Count     | bbb     | bbb         | bbb  | bbb      |\n| orange   | Average_Load_Percentage | bbb     | bbb         | bbb  | bbb      |\n| orange   | Revenue_per_Voyage_USD  | bbb     | bbb         | bbb  | bbb      |\n| orange   | Revenue_per_Voyage_USD  | bbb     | bbb         | bbb  | bbb      |\n| orange   | Revenue_per_Voyage_USD  | bbb     | bbb         | bbb  | bbb      |\n\n: Variable Selection\\\n: {.striped .hover tbl-colwidths=\"\\[10,20,10,30,10,20\\]\"}\n\nThe code below is used to select and reorder columns of wanted variables using `select()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nship <- data_ship %>%\n  \n  select(Date, Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Speed_Over_Ground_knots,\n        Engine_Power_kW, Distance_Traveled_nm, Efficiency_nm_per_kWh,\n        Weather_Condition, Profit, Operational_Cost_USD,Revenue_per_Voyage_USD,  \n        Average_Load_Percentage, Cargo_Weight_tons, Turnaround_Time_hours) \n```\n:::\n\n\n\n\nUse `glimese()` to check and confirm the new data frame **ship** is created, and now has 14 columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ship)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 16\n$ Date                    <date> 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               <chr> \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              <chr> \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             <chr> \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      <chr> \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Weather_Condition       <chr> \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Profit                  <dbl> -191649.081, 400377.787, -54524.657, -173798.2…\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n```\n\n\n:::\n:::\n\n\n\n\n#### 3.2.3 Missing values\n\nBefore I use the new data to perform analysis, I want to check if there are missing values to remove. If an entry has a missing value, it may affect the analysis result.\n\n`is.na()` can be used to check this. Before I dive into each variable, I would like to have an overall check if there indeed are missing values. After this check, there is no missing value found.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(is.na(ship))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ninteger(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(ship))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\nNext, I will use `summary()` to run a summary of the dataset to understand the overall statistics of the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ship)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Date             Ship_Type          Route_Type        Engine_Type       \n Min.   :2023-06-04   Length:2736        Length:2736        Length:2736       \n 1st Qu.:2023-09-10   Class :character   Class :character   Class :character  \n Median :2023-12-17   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-12-17                                                           \n 3rd Qu.:2024-03-24                                                           \n Max.   :2024-06-30                                                           \n Maintenance_Status Speed_Over_Ground_knots Engine_Power_kW\n Length:2736        Min.   :10.01           Min.   : 501   \n Class :character   1st Qu.:13.93           1st Qu.:1148   \n Mode  :character   Median :17.71           Median :1757   \n                    Mean   :17.60           Mean   :1758   \n                    3rd Qu.:21.28           3rd Qu.:2383   \n                    Max.   :25.00           Max.   :2999   \n Distance_Traveled_nm Efficiency_nm_per_kWh Weather_Condition \n Min.   :  50.43      Min.   :0.1002        Length:2736       \n 1st Qu.: 548.51      1st Qu.:0.4636        Class :character  \n Median :1037.82      Median :0.7899        Mode  :character  \n Mean   :1036.41      Mean   :0.7987                          \n 3rd Qu.:1540.93      3rd Qu.:1.1474                          \n Max.   :1998.34      Max.   :1.4993                          \n     Profit        Operational_Cost_USD Revenue_per_Voyage_USD\n Min.   :-444584   Min.   : 10092       Min.   : 50352        \n 1st Qu.:  40885   1st Qu.:131293       1st Qu.:290346        \n Median : 262716   Median :257158       Median :520177        \n Mean   : 266219   Mean   :255143       Mean   :521362        \n 3rd Qu.: 492216   3rd Qu.:381797       3rd Qu.:750073        \n Max.   : 977168   Max.   :499735       Max.   :999917        \n Average_Load_Percentage Cargo_Weight_tons Turnaround_Time_hours\n Min.   : 50.01          Min.   :  50.23   Min.   :12.02        \n 1st Qu.: 62.70          1st Qu.: 553.98   1st Qu.:26.17        \n Median : 75.50          Median :1043.21   Median :41.59        \n Mean   : 75.22          Mean   :1032.57   Mean   :41.75        \n 3rd Qu.: 87.72          3rd Qu.:1527.72   3rd Qu.:57.36        \n Max.   :100.00          Max.   :1999.13   Max.   :71.97        \n```\n\n\n:::\n:::\n\n\n\n\nAs shown above, it is observed that for Ship_Type, Route_Type, Engine_Type, and Weather_Condition, there are \"None\" string that I will not be able to incorporate into my analysis. Therefore, I will remove entries containing \"None\" using the code below. As a result, a tibble frame of 2,234 entries is derived.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n#check row numbers before filter\nnrow(ship)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2736\n```\n\n\n:::\n\n```{.r .cell-code}\nship_filter <- ship %>%\n  filter(!if_any(c(Ship_Type, Route_Type, Engine_Type, Weather_Condition, Maintenance_Status), ~ .x == \"None\"))\n\n#check row numbers after filter\nnrow(ship_filter) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2127\n```\n\n\n:::\n:::\n\n\n\n\nLet's run a summary of this dataset again.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ship_filter)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Date             Ship_Type          Route_Type        Engine_Type       \n Min.   :2023-06-04   Length:2127        Length:2127        Length:2127       \n 1st Qu.:2023-09-10   Class :character   Class :character   Class :character  \n Median :2023-12-17   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-12-18                                                           \n 3rd Qu.:2024-03-27                                                           \n Max.   :2024-06-30                                                           \n Maintenance_Status Speed_Over_Ground_knots Engine_Power_kW \n Length:2127        Min.   :10.01           Min.   : 501.7  \n Class :character   1st Qu.:13.90           1st Qu.:1140.3  \n Mode  :character   Median :17.71           Median :1755.4  \n                    Mean   :17.61           Mean   :1750.9  \n                    3rd Qu.:21.32           3rd Qu.:2365.0  \n                    Max.   :24.99           Max.   :2998.7  \n Distance_Traveled_nm Efficiency_nm_per_kWh Weather_Condition \n Min.   :  50.43      Min.   :0.1002        Length:2127       \n 1st Qu.: 559.50      1st Qu.:0.4553        Class :character  \n Median :1037.65      Median :0.7750        Mode  :character  \n Mean   :1038.98      Mean   :0.7899                          \n 3rd Qu.:1541.19      3rd Qu.:1.1363                          \n Max.   :1998.34      Max.   :1.4982                          \n     Profit        Operational_Cost_USD Revenue_per_Voyage_USD\n Min.   :-428282   Min.   : 10097       Min.   : 50352        \n 1st Qu.:  47543   1st Qu.:133864       1st Qu.:292184        \n Median : 259071   Median :259125       Median :524083        \n Mean   : 266385   Mean   :257042       Mean   :523428        \n 3rd Qu.: 492047   3rd Qu.:384452       3rd Qu.:752934        \n Max.   : 977168   Max.   :499735       Max.   :999812        \n Average_Load_Percentage Cargo_Weight_tons Turnaround_Time_hours\n Min.   :50.01           Min.   :  50.23   Min.   :12.02        \n 1st Qu.:62.51           1st Qu.: 557.07   1st Qu.:26.31        \n Median :75.16           Median :1045.37   Median :41.53        \n Mean   :75.13           Mean   :1033.47   Mean   :41.77        \n 3rd Qu.:87.69           3rd Qu.:1526.15   3rd Qu.:57.56        \n Max.   :99.95           Max.   :1999.13   Max.   :71.97        \n```\n\n\n:::\n:::\n\n\n\n\n#### 3.2.4 Convert data type\n\nFrom 4.1, I observed that Maintenance_Status, Weather_Condition, Ship_Type, Route_Type, Engine_Type are all character data type. In fact, Maintenance_Status, Weather_Condition can be converted to ordinal data type, and Ship_Type, Route_Type, Engine_Type to factor data type to derive better result.\n\nUse the code below to perform data type conversion:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_f <- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\", \"Weather_Condition\")\n#Column names should be in quotation marks (\" \")\n\nship_filter <- ship_filter %>%\n  mutate(across(col_f, as.factor)) %>%\n  mutate(Maintenance_Status = factor(Maintenance_Status,\n                                     levels = c(\"Good\", \"Fair\", \"Critical\"),\n                                     ordered = TRUE)) \n```\n:::\n\n\n\n\nI also want to convert the uni for the monetary values into thousand dollars as the unit for Operational_Cost_USD, Revenue_per_Voyage_USD and Profit.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nship_filter <- ship_filter %>%\n  mutate(Operational_Cost_USD = round(Operational_Cost_USD / 1000, 0), #convert to thousand dollars, leaving on decimal places.\n         Revenue_per_Voyage_USD = round(Revenue_per_Voyage_USD / 1000, 0),\n         Profit = round(Profit / 1000, 0))\n```\n:::\n\n\n\n\nI use `kable()` to check the conversion result, and confirm the desired variables have been converted accordingly.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(ship_filter, n=8), caption = \"Ship Performance Dataset\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Ship Performance Dataset\n\n|Date       |Ship_Type      |Route_Type   |Engine_Type          |Maintenance_Status | Speed_Over_Ground_knots| Engine_Power_kW| Distance_Traveled_nm| Efficiency_nm_per_kWh|Weather_Condition | Profit| Operational_Cost_USD| Revenue_per_Voyage_USD| Average_Load_Percentage| Cargo_Weight_tons| Turnaround_Time_hours|\n|:----------|:--------------|:------------|:--------------------|:------------------|-----------------------:|---------------:|--------------------:|---------------------:|:-----------------|------:|--------------------:|----------------------:|-----------------------:|-----------------:|---------------------:|\n|2023-06-11 |Fish Carrier   |Short-haul   |Steam Turbine        |Good               |                10.38758|       1796.0574|            1060.4864|             0.2903614|Rough             |    400|                  483|                    884|                93.89537|          162.3947|              63.24820|\n|2023-06-18 |Container Ship |Long-haul    |Diesel               |Fair               |                20.74975|       1648.5567|             658.8741|             0.4995945|Moderate          |    -55|                  449|                    394|                96.21824|          178.0409|              49.41815|\n|2023-06-25 |Bulk Carrier   |Transoceanic |Steam Turbine        |Fair               |                21.05510|        915.2618|            1126.8225|             0.7029057|Moderate          |   -174|                  261|                     88|                66.19370|         1737.3853|              22.40911|\n|2023-07-02 |Fish Carrier   |Transoceanic |Diesel               |Fair               |                13.74278|       1089.7218|            1445.2812|             1.3313431|Moderate          |    388|                  288|                    676|                80.00858|          260.5951|              64.15823|\n|2023-07-09 |Fish Carrier   |Long-haul    |Heavy Fuel Oil (HFO) |Fair               |                18.61620|       2171.6466|             723.3042|             1.3702060|Rough             |    592|                  185|                    777|                53.17490|         1912.5098|              47.47615|\n|2023-07-16 |Fish Carrier   |Transoceanic |Heavy Fuel Oil (HFO) |Critical           |                20.43312|       2505.0435|             270.1186|             1.1203894|Rough             |    305|                  434|                    739|                58.50864|         1191.4364|              29.04042|\n|2023-07-23 |Container Ship |Short-haul   |Diesel               |Critical           |                23.49805|        814.8065|            1717.3284|             0.6959746|Moderate          |    114|                  348|                    462|                94.59197|          318.4493|              52.47860|\n|2023-08-06 |Container Ship |Long-haul    |Diesel               |Fair               |                23.22710|       2685.4017|            1588.7923|             0.4406762|Calm              |    465|                  150|                    615|                79.45133|         1843.4383|              63.74276|\n\n\n:::\n:::\n\n\n\n\n## 4 Voyage Pprofile\n\n### 4.1 Ship conditions & routes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Code bar chart for Ship type\n\np_st <- ggplot(data = ship_filter,\n               aes(x = Ship_Type)) +\n  geom_bar(fill = \"grey\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Ship types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n# Code bar chart for Engine type\n\np_et <- ggplot(data = ship_filter,\n               aes(x = Engine_Type)) +\n  geom_bar(fill = \"grey\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Engine types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n\n# Code bar chart for Route type\n\np_rt <- ggplot(data = ship_filter,\n               aes(x = Route_Type)) +\n  geom_bar(fill = \"grey\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Route types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n#Code bar chart for Maintenance status\n\np_ms <- ggplot(data = ship_filter,\n               aes(x = Maintenance_Status)) +\n  geom_bar(fill = \"grey80\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Maintenance status\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n#Combine all charts\n\npatchwork <- (p_st | p_et) / (p_rt | p_ms)\npatchwork\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=1440}\n:::\n:::\n\n\n\n\n### 4.2 Weather conditions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Plot1\np_wthr_1 <- ggplot(data = ship_filter,\n               aes(x = Weather_Condition, fill = Weather_Condition)) +\n  geom_bar() +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 2) +\n  scale_fill_manual(values = c(\"Calm\" = \"#86A788\",\n                               \"Moderate\" = \"#FFFDEC\",\n                               \"Rough\" = \"#FFE2E2\")) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Weather Condition \\n Overview\") +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 10, face = \"bold\"),\n        text = element_text(size = 8),\n#        legend.text = element_text(size = 6),  # Change legend text size\n#        legend.title = element_text(size = 6, face = \"bold\"),  # Change legend title size\n#        legend.key.size = unit(0.5, \"cm\"),  # Adjust legend key size (box size)\n#        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"none\")  # Adjust vertical spacing between legend items))\n\n# Plot2\n# Extract month and year from the Date\nship_filter_month <- ship_filter %>%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by Month and Weather type, then count occurrences\nweather_by_month_bar <- ship_filter_month %>%\n  group_by(Month, Weather_Condition) %>%\n  summarise(Count = n(), .groups = \"drop\")\n\n# Calculate total occurrences per month\ntotal_per_month_bar <- weather_by_month_bar %>%\n  group_by(Month) %>%\n  summarise(Total = sum(Count))\n\n# Join total occurrences per month and compute percentage\nweather_percentage_bar <- weather_by_month_bar %>%\n  left_join(total_per_month_bar, by = \"Month\") %>%\n  mutate(Percentage = (Count / Total) * 100)  # Convert to percentage\n\n# Plot stacked bar chart with percentage\np_wthr_2 <- ggplot(weather_percentage_bar, \n       aes(x = Month, y = Percentage, fill = factor(Weather_Condition, levels = c(\"Calm\", \"Moderate\", \"Rough\")))) +\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Use identity because we computed percentages\n  geom_text(aes(label = paste0(round(Percentage, 0), \"%\")), \n            position = position_stack(vjust = 0.5),  # Center the text in each segment\n            size = 2.5, color = \"black\") +  # Adjust text size and color\n  scale_fill_manual(values = c(\"Calm\" = \"#86A788\",\n                               \"Moderate\" = \"#FFFDEC\",\n                               \"Rough\" = \"#FFE2E2\")) +  # Choose a colour palette\n  labs(title = \"Weather Distribution by Month (%)\",\n       x = \"Month\",\n       y = \"Percentage (%)\",\n       fill = \"Weather\") +\n  theme_light() +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") + \n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        text = element_text(size = 8),\n        legend.text = element_text(size = 6),  # Change legend text size\n        legend.title = element_text(size = 6, face = \"bold\"),  # Change legend title size\n        legend.key.size = unit(0.5, \"cm\"),  # Adjust legend key size (box size)\n        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"top\")  # Adjust vertical spacing between legend items)))  #hide legend\n\n#Combine plots\np_wthr_2 + p_wthr_1 + plot_layout(widths = c(2.5,1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n\n\n### 4.3 Operational effects\n\n::: {.panel-tabset}\n\n## **Average load**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Plot1\np_heye_al <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Average_Load_Percentage,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6), \n                               name = NULL)) +\n  labs(title = \"Halfeye Plots by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Average_Load_Percentage)\n\np_heye_al_st <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Average_Load_Percentage)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"mako\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"purple\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"purple\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots with Median Line\")\n\n#Combine plots\np_heye_al_st / p_heye_al + plot_layout(height = c(1, 1.5))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=864}\n:::\n:::\n\n\n\n\n## **Engine power**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Plot1\np_heye_ep <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Engine_Power_kW,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Engine Power by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Engine_Power_kW)\n\np_heye_ep_st <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Engine_Power_kW)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"cividis\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"blue\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"blue\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Engine Power with Median Line\")\n\n#Combine plots\np_heye_ep_st / p_heye_ep + plot_layout(height = c(1, 1.5))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=864}\n:::\n:::\n\n\n\n\n## **Cargo weight**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Plot1\np_heye_cw <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Cargo_Weight_tons,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Cargo Weight by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Cargo_Weight_tons)\n\np_heye_cw_st <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Cargo_Weight_tons)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"plasma\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"red\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"red\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Cargo Weight with Median Line\")\n\n#Combine plots\np_heye_cw_st / p_heye_cw + plot_layout(height = c(1, 1.5))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=864}\n:::\n:::\n\n\n\n\n## **Turnaround time**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Plot1\np_heye_tt <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Turnaround_Time_hours,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Turnaround Time by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Turnaround_Time_hours)\n\np_heye_tt_st <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Turnaround_Time_hours)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"rocket\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"green\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"green\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Turnaround Time with Median Line\")\n\n#Combine plots\np_heye_tt_st / p_heye_tt + plot_layout(height = c(1, 1.5))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=864}\n:::\n:::\n\n\n\n\n## **Distance travelled**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Plot1\np_heye_dt <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Distance_Traveled_nm,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Distance by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Distance_Traveled_nm)\n\np_heye_dt_st <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Distance_Traveled_nm)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"inferno\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"grey20\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"grey20\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Distance with Median Line\")\n\n#Combine plots\np_heye_dt_st / p_heye_dt + plot_layout(height = c(1, 1.5))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=864}\n:::\n:::\n\n\n\n\n## **Energy efficiency**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Plot1\np_heye_ee_et <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Engine_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Heavy Fuel Oil (HFO)\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.8),\n                               \"Steam Turbine\" = adjustcolor(\"#DA498D\", alpha.f = 0.6), \n                               \"Diesel\" = adjustcolor(\"#96CEB4\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Engine Type\")\n\n\n# Plot2\n\nmedian_load = median(ship_filter$Efficiency_nm_per_kWh)\n\np_heye_ee <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"magma\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"brown\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"brown\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Energy Efficiency with Median Line\")\n\n# Plot3\np_heye_ee_wc <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Weather_Condition)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 3) +\n  scale_fill_manual(values = c(\"Moderate\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.8),\n                               \"Rough\" = adjustcolor(\"#DA498D\", alpha.f = 0.6), \n                               \"Calm\" = adjustcolor(\"#5B99C2\", alpha.f = 0.8),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Weather\")\n\n# Plot4\np_heye_ee_ms <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Maintenance_Status)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Fair\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.8),\n                               \"Critical\" = adjustcolor(\"#8B5DFF\", alpha.f = 0.6), \n                               \"Good\" = adjustcolor(\"#41B3A2\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Maintenance\")\n\n\n# Combine plots\n(p_heye_ee | p_heye_ee_et) / (p_heye_ee_wc | p_heye_ee_ms)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=1344}\n:::\n:::\n\n\n\n\n:::\n\n## 5 Profit Performance\n\n### 5.1 Finance performance overview\n\nTo have an overview of the finance performance from all ship types, I use boxplot to check the operational cost, revenue per trip and the profit in thousand dollars. There are no outliers observed. The operational cost does not expand beyond \\$500K\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Plot operational cost distribution\np1 <- ggplot(ship_filter,\n       aes(y = Operational_Cost_USD, x = \"All ship types\")) +\n  geom_violin(outlier.colour = \"purple\",\n              color = \"#A3B23B\",\n              fill = \"#F4F8D3\",\n              alpha = 0.4) + \n  geom_boxplot(width = .2,\n               color = \"grey60\") +\n  geom_point(position = \"jitter\",\n             size = 0.01,\n             color = \"#F4F8D3\",\n             alpha = 0.3) +\n  coord_cartesian(ylim = c(-500, 1000)) +\n  theme_light()\n\n#Plot revenue distribution\np2<- ggplot(ship_filter,\n       aes(y = Revenue_per_Voyage_USD, x = \"All ship types\")) +\n  geom_violin(outlier.colour = \"blue\",\n               color = \"#5FB0B0\",\n               fill = \"#73C7C7\",\n               alpha = 0.4) +\n  geom_boxplot(width = .2,\n               color = \"grey60\") +\n  geom_point(position = \"jitter\",\n             size = 0.05,\n             color = \"#73C7C7\",\n             alpha = 0.3) +\n  coord_cartesian(ylim = c(-500, 1000)) +\n  theme_light()\n\n#Plot profit distribution\np3 <- ggplot(ship_filter,\n       aes(y = Profit, x = \"All ship types\")) +\n  geom_violin(outlier.colour = \"green\",\n               color = \"#E6A5B1\",\n               fill = \"#F7CFD8\",\n               alpha = 0.4) +\n  geom_boxplot(width = .2,\n               color = \"grey60\") +\n  geom_point(position = \"jitter\",\n             size = 0.05,\n             color = \"#F7CFD8\",\n             alpha = 0.3) +\n  coord_cartesian(ylim = c(-500, 1000)) +\n  theme_light()\n\npatchwork <- p1 + p2 + p3\npatchwork + plot_annotation(\n  title = \"Finance Distribution Overview\",\n  theme = theme(plot.title = element_text(size = 12, face = \"bold\")\n))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#  plot_annotation(title = \"Operational Cost by Ship Type\")\n```\n:::\n\n\n\n\nNext, we use scatterplot to see if Revenue_per_Voyage_USD and Operational_Cost_USD have any relations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np4 <- ggplot(data=ship_filter,\n             aes(x = Revenue_per_Voyage_USD,\n                 y = Operational_Cost_USD)) +\n  geom_point(colour = \"grey\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,1000),\n                 ylim=c(0,600)) +\n  labs(title = \"Cost vs Revenue for All Ship Types\") +\n  theme_economist_white() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"))\n```\n:::\n\n\n\n\nBelow I combined the 3 plots together to have a clearer view of the relations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npatchwork <- p4 | (p1 / p2)\npatchwork & theme_economist_white() +\n    theme(axis.title = element_text(size = rel(1)),\n          axis.text = element_text(size = 8),\n          plot.title = element_text(size = 12))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\nNow I want to see the Profit performance by different factors, including ship conditions and external factors, namely, Ship type, Engine type, Weather condition, Route type and Maintenance status.\n\n#### **5.1.1 Ship type**\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n\\[placeholder - insights\\] p = 0.84 suggests none of the differences are statistically significant, meaning that Tanker is not earning significantly different profit from other ship types, although we can see slight difference.\n\n--\n\nCompare central density\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Plot ship type\np_dens_st <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Ship_Type)) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    calc_ecdf = TRUE,  # Ensures ECDF is calculated for fill\n    aes(fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +  # Use ECDF for fill\n  scale_fill_gradientn(colors = c(\"#F3F7EC\", \"#006989\")) +  # Custom colors\n  scale_x_continuous(name = \"Profit\",\n                     expand = c(0, 0)) +\n  labs(title = \"Profit Distribution and Central Tendency\") +\n  theme_light() +\n  theme(legend.title = element_blank())\n\n# Plot Engine type\np_dens_et <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Engine_Type)) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    calc_ecdf = TRUE,  # Ensures ECDF is calculated for fill\n    aes(fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +  # Use ECDF for fill\n  scale_fill_gradientn(colors = c(\"#F3F7EC\", \"#006989\")) +  # Custom colors\n  scale_x_continuous(name = \"Profit\",\n                     expand = c(0, 0)) +\n  labs(title = \"Profit Distribution and Central Tendency\") +\n  theme_light() +\n  theme(legend.title = element_blank())\n\n# Plot Route type\np_dens_rt <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Route_Type)) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    calc_ecdf = TRUE,  # Ensures ECDF is calculated for fill\n    aes(fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +  # Use ECDF for fill\n  scale_fill_gradientn(colors = c(\"#F3F7EC\", \"#006989\")) +  # Custom colors\n  scale_x_continuous(name = \"Profit\",\n                     expand = c(0, 0)) +\n  labs(title = \"Profit Distribution and Central Tendency\") +\n  theme_light() +\n  theme(legend.title = element_blank())\n\n# Plot Weather\np_dens_wc <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Weather_Condition)) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    calc_ecdf = TRUE,  # Ensures ECDF is calculated for fill\n    aes(fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +  # Use ECDF for fill\n  scale_fill_gradientn(colors = c(\"#F3F7EC\", \"#006989\")) +  # Custom colors\n  scale_x_continuous(name = \"Profit\",\n                     expand = c(0, 0)) +\n  labs(title = \"Profit Distribution and Central Tendency\") +\n  theme_light() +\n  theme(legend.title = element_blank())\n\n# Plot maintenance\np_dens_ms <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Maintenance_Status)) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    calc_ecdf = TRUE,  # Ensures ECDF is calculated for fill\n    aes(fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +  # Use ECDF for fill\n  scale_fill_gradientn(colors = c(\"#F3F7EC\", \"#006989\")) +  # Custom colors\n  scale_x_continuous(name = \"Profit\",\n                     expand = c(0, 0)) +\n  labs(title = \"Profit Distribution and Central Tendency\") +\n  theme_light() +\n  theme(legend.title = element_blank())\n\n(p_dens_st|p_dens_st | p_dens_ms) / (p_dens_wc | p_dens_rt | p_dens_et)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=1344}\n:::\n:::\n\n\n\n\n--\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Plot1\n# Plot statboxplot by ship types\np_statbox_st <- ggbetweenstats(\n  data = ship_filter,\n  x = Ship_Type,\n  y = Profit,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n) \n  \n# Plot 2\np_dens_st <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Ship_Type)) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    calc_ecdf = TRUE,  # Ensures ECDF is calculated for fill\n    aes(fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +  # Use ECDF for fill\n  scale_fill_gradientn(colors = c(\"#F3F7EC\", \"#006989\")) +  # Custom colors\n  scale_x_continuous(name = \"Profit\",\n                     expand = c(0, 0)) +\n  labs(title = \"Profit Distribution and Central Tendency\") +\n  theme_light() +\n  theme(legend.title = element_blank())\n\n# Plot 3\np_rid_st <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Ship_Type,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = alpha(c(\"#E6A5B1\", \"#F8F4EC\", \"#5FB0B0\"), 0.5),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")) +\n  labs(title = (\"Probability of Profit Distribution by Ship Type\")) +\n  theme_light()\n\np_statbox_st / (p_dens_st | p_rid_st)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=1344}\n:::\n:::\n\n\n\n\n#### **5.1.2 Engine type**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Plot1\n# Plot statboxplot by ship types\np_statbox_st <- ggbetweenstats(\n  data = ship_filter,\n  x = Engine_Type,\n  y = Profit,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n) \n  \n# Plot 2\np_dens_st <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Engine_Type)) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01,\n    calc_ecdf = TRUE,  # Ensures ECDF is calculated for fill\n    aes(fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +  # Use ECDF for fill\n  scale_fill_gradientn(colors = c(\"#F3F7EC\", \"#006989\")) +  # Custom colors\n  scale_x_continuous(name = \"Profit\",\n                     expand = c(0, 0)) +\n  labs(title = \"Profit Distribution and Central Tendency\") +\n  theme_light() +\n  theme(legend.title = element_blank())\n\n# Plot 3\np_rid_st <- ggplot(ship_filter,\n       aes(x = Profit,\n           y = Engine_Type,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = alpha(c(\"#E6A5B1\", \"#F8F4EC\", \"#5FB0B0\"), 0.5),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")) +\n  labs(title = (\"Probability of Profit Distribution by Ship Type\")) +\n  theme_light()\n\np_statbox_st / (p_dens_st | p_rid_st)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=1344}\n:::\n:::\n\n\n\n\n#### **5.1.3 Weather condition**\n\n#### **5.1.4 Route type**\n\n#### **5.1.5 maintenance status**\n\n### 5.2 Profit performance with different factors by ship type\n\n#### 5.2.1 Engine type\n\n\\[placeholder - explain how to plot\\]\n\nIn this section, I will explore some variables by Ship types before going deeper into comparison studies to assess ships performance in different aspects.\n\nFrom the raincloud plot, can see Tanker stands out as its median looks more different than the rest. Plot statboxplot to check on the significance.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Plot1\n# Plot statboxplot by ship types\np_statbox_st <- ggbetweenstats(\n  data = ship_filter,\n  x = Ship_Type,\n  y = Profit,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n) +\n    coord_flip() \n\n#Plot raincloud plot by ship types\nmedian_Profit <- median(ship_filter$Profit)\nmean_Profit <- round(mean(ship_filter$Profit), 2)\n\np_rcloud_st <- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Profit,\n           fill = Ship_Type)) +\n  stat_halfeye(adjust = 0.3,\n               justification = -0.2,\n               scale = 0.6,\n               width = 0.6,\n               slab_color = \"grey\",\n               slab_fill = \"#D6DED5\",\n               slab_linetype = \"solid\",\n               slab_linewidth = 0.4,\n               slab_alpha = 0.5,\n               .width = 0,\n               point_colour = NA,\n               position = position_nudge(y = -0.2)) +\n  geom_boxplot(width = 0.1,\n               color = \"#FFC0CB\",\n               position = position_nudge(y = 0.8)) +\n  scale_fill_brewer(palette=\"Pasterl1\") +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            bandwidth = .5,\n            dotsize = 0.1,\n            alpha = 0.4,\n            aes(color = Engine_Type)) +\n  #indicate median score position\n  geom_hline(aes(yintercept = median_Profit),\n             color = \"blue\", \n             linewidth = 0.4,\n             linetype = \"dashed\") +\n  #indicate mean score position\n  geom_hline(aes(yintercept = mean_Profit),\n             color = \"red\", \n             linewidth = 0.4,\n             linetype = \"dashed\") +\n  theme_minimal() +\n  annotate(\"text\",\n           x = 0.1,\n           y = median_Profit + 270,\n           label = paste(\"Median Score = \", median_Profit),\n           color = \"blue\",\n           size = 3) +\n  \n  annotate(\"text\",\n           x = 0.3,\n           y = mean_Profit + 270,\n           label = paste(\"Mean Score = \", mean_Profit),\n           color = \"red\",\n           size = 3) +\n  coord_flip() +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank())\n\n#Combine two plots\npatchwork <- (p_rcloud_st | p_statbox_st)\npatchwork\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=1440}\n:::\n:::\n\n\n\n\n#### 5.2.2 Average load\n\nload vs profit\n\n\\[combine 2 figures, one for all, one by ship type\\]\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np5 <- ggplot(data=ship_filter,\n             aes(x = Average_Load_Percentage,\n                 y = Profit)) +\n  geom_point(colour = \"grey\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(40,100),\n                 ylim=c(0,1000)) +\n  labs(title = \"Average Load vs Profit\") +\n  theme_economist_white() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"))\n\np5_1 <- ggplot(data=ship_filter,\n             aes(x = Average_Load_Percentage,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(40,100),\n                 ylim=c(0,1000)) +\n  labs(title = \"Average Load vs Profit by All Ship Types\",\n       color = \"Ship Type\") +\n  theme_economist_white() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"),\n          legend.text = element_text(size=10),\n          legend.position = \"right\")\n\np5 | p5_1\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=1152}\n:::\n:::\n\n\n\n\nload vs revenue\n\n\\[combine 2 figures, one for all, one by ship type\\]\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np6 <- ggplot(data=ship_filter,\n             aes(x = Average_Load_Percentage,\n                 y = Revenue_per_Voyage_USD,\n                 color = Ship_Type)) +\n  geom_point(\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(40,100),\n                 ylim=c(0,1000)) +\n  labs(title = \"load vs revenue for All Ship Types\") +\n  theme_economist_white() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"))\n\np6\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5.3 Performance over time\n\n#### **5.3.1 Overview**\n\nMar, July, Oct, Dec are peak months in the data in a one year time frame. The cost, revenue and profit shows the same pattern in the line graph. It would be good to look into the reasons why these months are peak time and what causes the cost increase.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Extract month and year from the Date\nship_filter_month <- ship_filter %>%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by month and calculate total profit, cost, and revenue\nmonthly_totals <- ship_filter_month %>%\n  group_by(Month) %>%\n  summarise(\n    Profit = sum(Profit, na.rm = TRUE),\n    Op_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE)\n  )\n\n# Sort the data by Total_Profit in descending order and select the top 5 months\ntop_5_months <- monthly_totals %>%\n  arrange(desc(Profit)) %>%\n  slice_head(n = 5) %>%\n  mutate(\n    #Month_label = format(Month, \"%m/%y\"),  # Format date as mm/yy\n         Profit_label = paste0(\"$\", round(Profit, 2)))  # Create the label\n\n# Reshape the data from wide to long format\nmonthly_long <- monthly_totals %>%\n  pivot_longer(cols = c(Profit, Op_Cost, Revenue),\n               names_to = \"Type\",\n               values_to = \"Value\")\n\n# Plot total profit, total cost, and total revenue over time\nggplot(monthly_long, aes(x = Month, y = Value, color = Type, group = Type)) +\n  \n  geom_line(size = 0.6) +  # Line plot for each variable\n  geom_point(data = top_5_months, \n             aes(x = Month, y = Profit), \n             color = \"red\", size = 3.5, shape = 21, fill = \"red\",\n             inherit.aes = FALSE) + # Prevent from inheriting \"Type\"\n  geom_text(data = top_5_months, \n            aes(x = Month, y = Profit, label = Profit_label),\n            color = \"black\", size = 3.5, vjust = -2, hjust = 0.5,\n            inherit.aes = FALSE) +\n  labs(title = \"Profit, Cost, and Revenue Over Time\",\n       x = \"Month\",\n       y = \"Amount (1K USD)\",\n       color = \"Type\") +\n    \n  theme_light() +\n  scale_color_manual(values = c(\"Profit\" = \"pink\", \"Op_Cost\" = \"grey70\", \n                                \"Revenue\" = \"skyblue\"),\n                     guide = \"none\") +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  geomtextpath::geom_textline(\n    aes(label = Type),\n    linewidth = 1,\n    fontface = \"bold\",\n    size = 3,\n    vjust = -.4,\n    hjust = .5) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=768}\n:::\n:::\n\n\n\n\n#### **5.3.2 Comparing Profit, Revenue, and Cost Across Ship Types**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n### Plot profit ###\n# Aggregate total monthly profit for each ship type\nmonthly_profit <- ship_filter %>%\n  mutate(Month = floor_date(Date, \"month\")) %>%\n  group_by(Month, Ship_Type) %>%\n  summarise(Total_profit = sum(Profit, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months <- monthly_profit %>%\n  group_by(Ship_Type) %>%\n  slice_max(order_by = Total_profit, n = 3)\n\n# Define colors\nship_type_colors <- c(\"pink\", \"grey80\", \"grey40\", \"#C4E4FF\")\n\n# Plot profit over time for each ship type\np_line_pf <- ggplot(monthly_profit, \n      aes(x = Month, \n          y = Total_profit, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8) + \n  geom_point(data = top_3_months, \n             aes(x = Month,\n                 y = Total_profit,\n                 inherit.aes = FALSE),\n             size = 4, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly Profit Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Profit (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        legend.title = element_blank(),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\")\n\n### Plot cost ###\n# Aggregate total monthly cost for each ship type\nmonthly_cost <- ship_filter %>%\n  mutate(Month = floor_date(Date, \"month\")) %>%\n  group_by(Month, Ship_Type) %>%\n  summarise(Total_cost = sum(Operational_Cost_USD, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months_cost <- monthly_cost %>%\n  group_by(Ship_Type) %>%\n  slice_max(order_by = Total_cost, n = 3)\n\n# Define colors\nship_type_colors <- c(\"pink\", \"grey80\", \"grey40\", \"#C4E4FF\")\n\n# Plot cost over time for each ship type\np_line_cost <- ggplot(monthly_cost, \n      aes(x = Month, \n          y = Total_cost, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8, linetype = \"twodash\") + \n  geom_point(data = top_3_months_cost, \n             aes(x = Month,\n                 y = Total_cost,\n                 inherit.aes = FALSE),\n             size = 4, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months_cost$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly Cost Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Cost (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        legend.title = element_blank(),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\")\n\n### Plot revenue ###\n# Aggregate total monthly revenue for each ship type\nmonthly_rvn <- ship_filter %>%\n  mutate(Month = floor_date(Date, \"month\")) %>%\n  group_by(Month, Ship_Type) %>%\n  summarise(Total_rvn = sum(Revenue_per_Voyage_USD, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months_rvn <- monthly_rvn %>%\n  group_by(Ship_Type) %>%\n  slice_max(order_by = Total_rvn, n = 3)\n\n# Define colors\nship_type_colors <- c(\"pink\", \"grey80\", \"grey40\", \"#C4E4FF\")\n\n# Plot revenue over time for each ship type\np_line_rvn <- ggplot(monthly_rvn, \n      aes(x = Month, \n          y = Total_rvn, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8, linetype = \"dotted\") + \n  geom_point(data = top_3_months_rvn, \n             aes(x = Month,\n                 y = Total_rvn,\n                 inherit.aes = FALSE),\n             size = 4, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months_rvn$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly Revenue Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Revenue (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        legend.title = element_blank(),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\") \n\np_line_pf / p_line_cost / p_line_rvn \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=768}\n:::\n:::\n\n\n\n\n#### 5.3.3 **Monthly Profit, Revenue, and Cost Trends by Ship Type**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Extract month and year from the Date\nship_filter_month <- ship_filter %>%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by month and calculate total profit, cost, and revenue\nmonthly_totals_st <- ship_filter_month %>%\n  group_by(Month, Ship_Type) %>%\n  summarise(\n    Profit = sum(Profit, na.rm = TRUE),\n    Op_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    .groups = \"drop\"\n  ) \n\n# Sort the data by Total_Profit in descending order and select the top 5 months\ntop_5_months <- monthly_totals_st %>%\n  arrange(desc(Profit)) %>%\n  slice_head(n = 5) %>%\n  mutate(\n    #Month_label = format(Month, \"%m/%y\"),  # Format date as mm/yy\n         Profit_label = paste0(\"$\", round(Profit, 2)))  # Create the label\n\n# Reshape the data from wide to long format\nmonthly_long_st <- monthly_totals_st %>%\n  pivot_longer(cols = c(Profit, Op_Cost, Revenue),\n               names_to = \"Type\",\n               values_to = \"Value\")\n\n# Plot total profit, total cost, and total revenue over time\nggplot(monthly_long_st, aes(x = Month, y = Value, color = Type, group = interaction(Ship_Type, Type))) +\n  geom_line(size = 0.3) +  # Line plot for each variable\n  geom_point(data = top_5_months, \n             aes(x = Month, y = Profit), \n             color = \"red\", size = 3, shape = 21, fill = \"red\",\n             inherit.aes = FALSE) + # Prevent from inheriting \"Type\"\n  geom_text(data = top_5_months, \n            aes(x = Month, y = Profit, label = Profit_label),\n            color = \"black\", size = 3.5, vjust = -2, hjust = 0.5,\n            inherit.aes = FALSE) +\n  labs(title = \"Profit, Cost, and Revenue Over Time by Ship Type\",\n       x = \"Month\",\n       y = \"Amount (1K USD)\",\n       color = \"Type\") +\n    \n  theme_light() +\n  scale_color_manual(values = c(\"Profit\" = \"pink\", \"Op_Cost\" = \"grey70\", \n                                \"Revenue\" = \"skyblue\"),\n                     guide = \"none\") +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\"\n        ) +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geomtextpath::geom_textline(\n    aes(label = Type),\n    linewidth = 1,\n    fontface = \"bold\",\n    size = 2,\n    vjust = -.4,\n    hjust = .5) +\n  facet_wrap(~ Ship_Type, scales = \"free_y\") #facet by ship type\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=768}\n:::\n:::\n\n\n\n\nMaintenance status\n\nEfficiency\n\nSpeed\n\nCargo weight\n\nAverage load\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n```\n:::\n\n\n\n\n## 6 Multi-Facets Comparison by Ship Type\n\n### 6.1 Comparing profit ship conditions\n\n#### 6.1.1 engine power \n\n#### 6.1.2 engine efficiency\n\n#### 6.1.3 engine type\n\n#### 6.1.4 maintenance status\n\nspeed\n\n### 6.3 Comparing profit with external factors\n\n#### weather \n\n#### route type\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(ship_filter, \n       aes(y = Profit, \n           x = Ship_Type,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width = c(0, 1), adjust = .5, slab_alpha = .5, \n                       shape = 21, point_size = 2) +\n  scale_fill_manual(values = c(\"#EFAC00\", \"#5FB0B0\", \"#E6A5B1\", \"grey\"), name = NULL) +\n  labs(title = \"Comparing Profit Performance Against Route Type\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n#### average load\n\nCompare profit using facets.\n\nUse facet for ship types vs weather for profit & efficiency, color in engine type.(see ggtheme)\n\nhistogram\n\n## 7 Summary\n\n## 8 References\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot1\np_viol_prof <- ggplot(ship_filter,\n       aes(y = Profit, \n           x = Ship_Type)) +\n  geom_violin(aes(color = Ship_Type),\n              alpha = 0.3) +\n  geom_boxplot(width = .15,\n               alpha = 0.4,\n               color = \"grey50\") +\n  geom_point(position = \"jitter\",\n             size = 1.2,\n             aes(color = Ship_Type),\n             alpha = 0.1) +\n  # Add mean points to each boxplot\n  stat_summary(fun = \"mean\", \n               geom = \"point\", \n               aes(color = Ship_Type),  # Mean point color based on Ship_Type\n               size = 2,                 \n               shape = 16,              \n               position = position_dodge(width = 0.75)) + \n  # Add overall median scores\n  geom_hline(yintercept = median(ship_filter$Profit, na.rm = TRUE), \n             linetype = \"dotted\", color = \"blue\", size = 0.5) +\n  # Add median score text on the median line\n  annotate(\"text\", \n           x = 1.5,  \n           y = median(ship_filter$Profit, na.rm = TRUE) + 70, \n           label = paste(\"Overall median: \\n\", round(mean(ship_filter$Profit, na.rm = TRUE), 2)),\n           color = \"blue\", size = 3, fontface = \"bold\") + \n  coord_cartesian(ylim = c(-500, 1000)) +\n  labs(title = \"Profit Performance by Ship Types\") +\n  theme_light() +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#E6A5B1\",  \n                               \"Container Ship\" = \"#5FB0B0\", \n                               \"Fish Carrier\" = \"#A3B23B\",\n                               \"Tanker\" = \"#FFB200\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Profit ~ Speed_Over_Ground_knots + Engine_Power_kW +\n              Distance_Traveled_nm + Efficiency_nm_per_kWh +\n              Operational_Cost_USD + Revenue_per_Voyage_USD +\n              Average_Load_Percentage + Cargo_Weight_tons +\n              Turnaround_Time_hours,\n            data = ship_filter)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Profit ~ Speed_Over_Ground_knots + Engine_Power_kW + \n    Distance_Traveled_nm + Efficiency_nm_per_kWh + Operational_Cost_USD + \n    Revenue_per_Voyage_USD + Average_Load_Percentage + Cargo_Weight_tons + \n    Turnaround_Time_hours, data = ship_filter)\n\nCoefficients:\n            (Intercept)  Speed_Over_Ground_knots          Engine_Power_kW  \n              1.061e-01                6.194e-05               -1.477e-05  \n   Distance_Traveled_nm    Efficiency_nm_per_kWh     Operational_Cost_USD  \n             -2.067e-05               -3.136e-02               -1.000e+00  \n Revenue_per_Voyage_USD  Average_Load_Percentage        Cargo_Weight_tons  \n              1.000e+00               -1.065e-04               -9.505e-06  \n  Turnaround_Time_hours  \n             -9.220e-04  \n```\n\n\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}