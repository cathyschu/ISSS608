{
  "hash": "0f8c14f8fabca29d69c3faeadff4b6c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home_Ex01_working\"\nauthor: \"Cathy C.\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\nlibrary(readr)\ndata_heart <- read_csv(\"data/jp_heart_attack_dataset.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30000 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Gender, Region, Smoking_History, Diabetes_History, Hypertension_Hi...\ndbl (22): Age, Cholesterol_Level, Stress_Levels, BMI, Heart_Rate, Systolic_B...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_ship <- read_csv(\"data/Ship_Pfm_Dataset.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 2736 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Weather_C...\ndbl  (12): Speed_Over_Ground_knots, Engine_Power_kW, Distance_Traveled_nm, D...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(data_ship)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 18\n$ Date                    <date> 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               <chr> \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              <chr> \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             <chr> \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      <chr> \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            <dbl> 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       <chr> \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   <dbl> 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     <dbl> 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n```\n\n\n:::\n:::\n\n\n\n**Numerical Features**\n\n-   Speed_Over_Ground_knots: Average speed of the ship over water (in knots).\n-   Engine_Power_kW: Engine power output (in kilowatts).\n-   Distance_Traveled_nm: Total distance traveled by the ship (in nautical miles).\n-   Operational_Cost_USD: Total operational cost per voyage (in USD).\n-   Revenue_per_Voyage_USD: Revenue generated per voyage (in USD).\n-   Efficiency_nm_per_kWh: Energy efficiency calculated in nautical miles per kilowatt-hour.\n\n**Categorical Features**\n\n-   Ship_Type: Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).\n-   Route_Type: Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).\n-   Engine_Type: Type of engine (e.g., Diesel, Heavy Fuel Oil).\n-   Maintenance_Status: Maintenance condition of the ship (e.g., Fair, Critical, Good).\n-   Weather_Condition: Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough).\n\n::::: spgoals\n::: spgoals-header\nLearning from the code\n:::\n\n::: spgoals-container\n-   We use `axis.text.x` as argument to `theme()` function. And we specify `element_text(angle = 30)` to rotate the x-axis text by an angle **30 degrees**.\n:::\n:::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}