---
title: "Take-home Exercise 1"
author: "Cathy C."
date: "February 1, 2025"
date-modified: "last-modified"
execute:
  echo: true 
  eval: true #no more rendering if no further changes
  warning: false 
  freeze: true 
---

![](images/banner-ship2.png){fig-align="center"}

## 1 Overview

### 1.1 Abstract

This study presents an in-depth analysis of ship performance and profitability, focusing on various operational metrics, ship types, and environmental factors. Using a dataset spanning one year, the study identifies seasonal trends in voyage frequencies, revealing fluctuations in ship activity during specific months, particularly among bulk carriers. Visualisation plots was used to explore profitability across ship types, with key performance drivers such as engine type, maintenance status, route type, and operational efficiency playing significant roles in financial outcomes. Findings suggest that while rough weather conditions and longer turnaround times tend to reduce profitability, specific ship-engine combinations exhibit resilience under varying conditions. Time-based profit trends indicate an overall upward trajectory, with several months showing notable profitability increases.

### 1.2 Task

An international media company that publishes weekly content on digital platforms is planning to release articles on "Ship Performance in the Gulf of Guinea". As a graphical editor of the media company, I am going to prepare data visualisation for the article focusing on ship performance assessment.

This report will use Exploratory Data Analysis (EDA) methods and ggplot2 functions to visualise insights on 1. Ships' profitability 2. Operational factors affecting voyage performance.

## 2 Install and Load Packages

```{r}
pacman::p_load(tidyverse, ggplot2, haven, knitr, patchwork, ggthemes, 
               ggridges, gganimate,ggdist, ggtext, colorspace, magrittr, 
               patchwork, RColorBrewer, ggstatsplot, egg, geomtextpath, 
               readxl, performance, parameters, see, ggiraph, plotlyr,
               treemap, treemapify)
```

## 3 Data Preparation

The dataset [Ship Performance Clustering Dataset](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset) is downloaded from Kagglel.com. This file contains a detailed dataset focusing on the operational performance of various ship types across different routes. Each row represents the performance metrics and attributes for a specific voyage or ship over a given timeframe.

### 3.1 Import file and check

Import the csv file using `read_csv()`.

```{r}
data_ship <- read_csv("data/Ship_Pfm_Dataset.csv")
```

Next I would like to observe the variables and their data type and understand the dataset.

The dataset consists of 18 columns and 2,736 rows (observations). Each observation contains an entry recording a voyage for which the ship's profile and operational information. As the result of code shows, there are 5 categorical variables, 1 date variable and 12 numerical variables.

```{r}
glimpse(data_ship)
```

### 3.2 Data Wrangling

The diagram below shows the variables selected for this study:

![](images/Welcome%20to%20FigJam.png){fig-align="center"}

#### **3.2.1 Add a variable**

To assess the ships' finance performance, I will add a variable **Profit**, deriving from Revenue_per_Voyage_USD subtracting Operational_Cost_USD.

***Profit = (Revenue_per_Voyage_USD - Operational_Cost_USD)***

```{r}
library(dplyr)
data_ship <- data_ship %>%
  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)

```

Now, I will use `str()` to have a look and confirm **Profit** is added to the data frame and the data type is numeric.

```{r}
str(data_ship)
```

Next, let's use `summary()` to run a summary of the dataset to understand the overall statistics of the data.

```{r}
summary(data_ship)
```

#### **3.2.2 Variable selection**

To perform an analysis to achieve the objectives aforementioned, the following variables will be selected.

| Category | Variable | Description | Type | Value |
|----|----|----|----|----|
| Operation | Date | Date | date | YYYY-MM-DD |
| Ship | Ship_Type | Type of ship | char | Tanker, Container Ship, Fish Carrier, Bulk Carrier |
| Operations | Route_Type | Shipping route type | char | Short-haul, Long-haul, Transoceanic |
| Ship | Engine_Type | Type of engine | char | Diesel, Heavy Fuel Oil |
| Ship | Maintenance_Status | Maintenance condition of the ship | char | Fair, Critical, Good |
| Ship | Speed_Over_Ground_knots | Average speed of the ship over water (in knots). | num |  |
| Ship | Engine_Power_kW | Engine power output (in kilowatts). | num |  |
| Ship | Distance_Traveled_nm | Total distance traveled by the ship (in nautical miles). | num |  |
| Operations | Weather_Condition | Prevailing weather conditions during voyages | char | Calm, Moderate, Rough |
| Operations | Cargo_Weight_tons | bbb | num |  |
| Business | Operational_Cost_USD | Total operational cost per voyage (in thousand USD). | num |  |
| Business | Revenue_per_Voyage_USD | Revenue generated per voyage (in thousand USD). | num |  |
| Ship | Turnaround_Time_hours | Turnaround time of the voyage | num |  |
| Ship | Efficiency_nm_per_kWh | Energy efficiency calculated in nautical miles per kilowatt-hour. | num |  |
| Operations | Average_Load_Percentage | Average of the load capacity (%) | num |  |
| Business | Profit | Earning from a voyage (in thousand USD) | num |  |

: Variable Selection\
: {.striped .hover tbl-colwidths="\[10,20,35,10,25\]"}

The code below is used to select and reorder columns of wanted variables using `select()`

```{r}
ship <- data_ship %>%
  
  select(Date, Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Speed_Over_Ground_knots,
        Engine_Power_kW, Distance_Traveled_nm, Efficiency_nm_per_kWh,
        Weather_Condition, Profit, Operational_Cost_USD, Revenue_per_Voyage_USD,  
        Average_Load_Percentage, Cargo_Weight_tons, Turnaround_Time_hours) 
```

Use `glimese()` to check and confirm the new data frame **ship** is created, and now has 16 columns.

```{r}
glimpse(ship)
```

#### **3.2.3 Missing values**

Before I use the selected data to perform analysis, I want to check if there are missing values to remove. If an entry has a missing value, it may affect the analysis result.

`is.na()` can be used to check this. Before I dive into each variable, I would like to have an overall check if there indeed are missing values. After this check, there is no missing value found.

```{r}
which(is.na(ship))
sum(is.na(ship))
```

We see no missing values in numeric data. However, we observed some "None" values in the character data types: Ship_Type, Route_Type, Engine_Type, and Weather_Condition. Therefore, I will remove entries containing "None" using the code below. As a result, a tibble frame of 2,127 entries is derived.

```{r}
library(dplyr)

#check row numbers before filter
nrow(ship)
ship_filter <- ship %>%
  filter(!if_any(c(Ship_Type, Route_Type, Engine_Type, Weather_Condition, Maintenance_Status), ~ .x == "None"))

#check row numbers after filter
nrow(ship_filter) 
```

#### **3.2.4 Convert data type**

From 3.2.2, I observed that Maintenance_Status, Weather_Condition, Ship_Type, Route_Type, Engine_Type are all character data type. In fact, Maintenance_Status, Weather_Condition can be converted to ordinal data type, and Ship_Type, Route_Type, Engine_Type to factor data type to derive better result.

Use the code below to perform data type conversion:

```{r}
col_f <- c("Ship_Type", "Route_Type", "Engine_Type", "Weather_Condition")
#Column names should be in quotation marks (" ")

ship_filter <- ship_filter %>%
  mutate(across(col_f, as.factor)) %>%
  mutate(Maintenance_Status = factor(Maintenance_Status,
                                     levels = c("Good", "Fair", "Critical"),
                                     ordered = TRUE)) 
```

I also want to convert the unit for the monetary values into thousand dollars as the unit for *Operational_Cost_USD, Revenue_per_Voyage_USD* and *Profit*.

```{r}
ship_filter <- ship_filter %>%
  mutate(Operational_Cost_USD = round(Operational_Cost_USD / 1000, 0), #convert to thousand dollars, leaving on decimal places.
         Revenue_per_Voyage_USD = round(Revenue_per_Voyage_USD / 1000, 0),
         Profit = round(Profit / 1000, 0))
         
```

I use `kable()` to check the conversion result, and confirm the desired variables have been converted accordingly.

```{r}
kable(head(ship_filter, n=3), caption = "Ship Performance Dataset")
```

## 4 Voyage Profile

To perform profit performance analysis in the next section, we shall understand the profile of the data and variables to determine the direction for the performance analysis. Below I will utilise variables to visualise ship conditions, weather conditions and operational factors by the different ship types to obtain preliminary understanding of patterns or trends.

### 4.1 Ship conditions & routes

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"

# Code bar chart for Ship type
p_st <- ggplot(data = ship_filter,
               aes(x = Ship_Type)) +
  geom_bar(fill = "grey20") +
  ylim(0, 1000) +
  geom_text(stat="count",
            aes(label = paste0(after_stat(count),", ",
                               round(after_stat(count)/sum(after_stat(count))*100, 0), "%")),
            vjust = -0.5,
            size = 3) +
  labs(x = "",
       y = "",
       title = "Ship types") +
  theme_classic() +
  theme(plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        plot.title = element_text(size = 10, face = "bold"),
        text = element_text(size = 10))

# Code bar chart for Engine type

p_et <- ggplot(data = ship_filter,
               aes(x = Engine_Type)) +
  geom_bar(fill = "grey20") +
  ylim(0, 1000) +
  geom_text(stat="count",
            aes(label = paste0(after_stat(count),", ",
                               round(after_stat(count)/sum(after_stat(count))*100, 0), "%")),
            vjust = -0.5,
            size = 3) +
  labs(x = "",
       y = "",
       title = "Engine types") +
  theme_classic() +
  theme(plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        plot.title = element_text(size = 10, face = "bold"),
        text = element_text(size = 10))


# Code bar chart for Route type

p_rt <- ggplot(data = ship_filter,
               aes(x = Route_Type)) +
  geom_bar(fill = "grey20") +
  ylim(0, 1000) +
  geom_text(stat="count",
            aes(label = paste0(after_stat(count),", ",
                               round(after_stat(count)/sum(after_stat(count))*100, 0), "%")),
            vjust = -0.5,
            size = 3) +
  labs(x = "",
       y = "",
       title = "Route types") +
  theme_classic() +
  theme(plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        plot.title = element_text(size = 10, face = "bold"),
        text = element_text(size = 10))

#Code bar chart for Maintenance status

p_ms <- ggplot(data = ship_filter,
               aes(x = Maintenance_Status)) +
  geom_bar(fill = "grey20") +
  ylim(0, 1000) +
  geom_text(stat="count",
            aes(label = paste0(after_stat(count),", ",
                               round(after_stat(count)/sum(after_stat(count))*100, 0), "%")),
            vjust = -0.5,
            size = 3) +
  labs(x = "",
       y = "",
       title = "Maintenance status") +
  theme_classic() +
  theme(plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        plot.title = element_text(size = 10, face = "bold"),
        text = element_text(size = 10))

#Combine all charts

patchwork <- (p_st | p_et) / (p_rt | p_ms)
patchwork
```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   The dataset is fairly evenly distributed across different ship types, engine types, route types, and maintenance statuses, with each category varying by 0 \~ 3%.
-   The largest different is between Long-haul trips and Short haul, Transoceanic, which is **3%**.\
:::
:::::

### 4.2 Weather conditions

I aimed to analyse the overall voyage distribution of weather conditions as well as their trends over time with `geom_bar()`. Bar charts is used to represent the distribution, while a stacked bar chart visualises the percentage occurrence of the three different weather conditions within each month.

```{r}
#| fig-width: 9
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"

#Plot1
p_wthr_1 <- ggplot(data = ship_filter,
               aes(x = Weather_Condition, fill = Weather_Condition)) +
  geom_bar() +
  ylim(0, 1000) +
  geom_text(stat="count",
            aes(label = paste0(after_stat(count),", ",
                               round(after_stat(count)/sum(after_stat(count))*100, 0), "%")),
            vjust = -0.5,
            size = 3) +
  scale_fill_manual(values = c("Calm" = "#bcd6be",
                               "Moderate" = "#f5e8ce",
                               "Rough" = "#e0bcc0")) +
  labs(x = "",
       y = "",
       title = "Weather Condition \n Overview") +
  theme_light() +
  theme(plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        plot.title = element_text(size = 12, face = "bold"),
        text = element_text(size = 8),
        legend.text = element_text(size = 8),  
        legend.title = element_text(size = 8, face = "bold"),  
#        legend.key.size = unit(0.5, "cm"),  
#        legend.spacing.y = unit(0.3, "cm"),
        legend.position = "none")  

# Plot2
# Extract month and year from the Date
ship_filter_month <- ship_filter %>%
  mutate(Month = floor_date(Date, "month"))

# Group by Month and Weather type, then count occurrences
weather_by_month_bar <- ship_filter_month %>%
  group_by(Month, Weather_Condition) %>%
  summarise(Count = n(), .groups = "drop")

# Calculate total occurrences per month
total_per_month_bar <- weather_by_month_bar %>%
  group_by(Month) %>%
  summarise(Total = sum(Count))

# Join total occurrences per month and compute percentage
weather_percentage_bar <- weather_by_month_bar %>%
  left_join(total_per_month_bar, by = "Month") %>%
  mutate(Percentage = (Count / Total) * 100) 

# Plot stacked bar chart with percentage
p_wthr_2 <- ggplot(weather_percentage_bar, 
       aes(x = Month, y = Percentage, fill = factor(Weather_Condition, levels = c("Calm", "Moderate", "Rough")))) +
  geom_bar(stat = "identity", position = "stack") +  # Use identity because we computed percentages
  geom_text(aes(label = paste0(round(Percentage, 0), "%")), 
            position = position_stack(vjust = 0.5),  
            size = 3, color = "black") +  
  scale_fill_manual(values = c("Calm" = "#bcd6be",
                               "Moderate" = "#f5e8ce",
                               "Rough" = "#e0bcc0")) + 
  labs(title = "Weather Distribution by Month (%)",
       x = "Month",
       y = "Percentage (%)",
       fill = "Weather") +
  theme_article() +
  scale_x_date(labels = scales::date_format("%m/%y"), breaks = "1 month") + 
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        text = element_text(size = 8),
        legend.text = element_text(size = 8),  
        legend.title = element_text(size = 8, face = "bold"), 
        legend.key.size = unit(0.5, "cm"),  
        legend.spacing.y = unit(0.3, "cm"),
        legend.position = "top")  

#Combine plots
p_wthr_2 + p_wthr_1 + plot_layout(widths = c(2.5,1))
```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   The Weather Condition Overview chart on the right shows that voyages in rough weather occur less frequently than those in other weather conditions, yet they still make up over 30% of the year. While ships primarily operate in fine weather, nearly one-third of the journeys experience rough conditions for both the ships and personnel.
-   January recorded the fewest rough journeys compared to other months, while April had the highest count of rough journeys.
-   Ships are capable of operating under any weather condition throughout the year. There is no specific month when the journeys were consistently exceptional or consistently poor.
:::
:::::

### 4.3 Operational effects by ship type and route type

This section delves into the operational performance of various ships, examining key factors such as average load, engine power, cargo weight, turnaround time, distance traveled, and energy efficiency. To visualize the distribution of these factors across different ship and route types, `stat_halfeye()` is used to generate half-eye plots. This method offers a clear view of the distributions, revealing trends and the spread of each operational effect. By comparing these distributions, I aim to identify how different ship types and routes may influence these operational effects.

:::::::::::::::::::: panel-tabset
## **Average load**

```{r}
#| fig-width: 8
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"

#Plot1
p_heye_al <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Average_Load_Percentage,
           fill = Route_Type)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 1,
                       interval_color = "grey70") +
  scale_fill_manual(values = c("Coastal" = adjustcolor("#FF9EAA", alpha.f = 0.5),
                               "Long-haul" = adjustcolor("#3AA6B9", alpha.f = 0.5), 
                               "Short-haul" = adjustcolor("#e0c080", alpha.f = 0.5),
                               "Transoceanic" = adjustcolor("grey70", alpha.f = 0.5)),
                               name = NULL) +
  labs(title = "Halfeye Plots by Route Type") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )


#Plot2

median_load = median(ship_filter$Average_Load_Percentage)

p_heye_al_st <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Average_Load_Percentage)) +
  ggdist::stat_interval(.width = 1:4*.25) +
  ggdist::stat_halfeye(.width = 0, fill = "grey80", color = "white", position = position_nudge(x = .024)) +
  scale_color_viridis_d(option = "mako", direction = -1, end = .9) +
  geom_hline(yintercept = median_load, linetype = "dashed", color = "#3AA6B9") +  # Add median line
  annotate("text", x = 1.2, y = median_load, label = paste("Median:", round(median_load, 2)),
            color = "#3AA6B9", vjust = -1, hjust = 0, size = 3) +  # Add text label
  labs(title = "Halfeye Plots with Median Line") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

#Combine plots
p_heye_al_st / p_heye_al + plot_layout(height = c(1, 1.5))
```

::::: spgoals
::: spgoals-header
Obervations
:::

::: spgoals-container
Across various operational effects, none of the distributions follow a normal distribution. Instead, multimodal distributions are observed across the four route types for each ship type. Although the median scores vary among different ship types and route types for these operational effects, they all converge towards similar median values in the end, regardless of the ship type.

**Average load** <br>Fish carriers and tankers generally have lower median of Average load percentages for long-haul trips, but higher median values for coastal trips. <br>Bulk carrier has the lowest median of the average load percentage in transoceanic journey and highest for short-haul journey. <br>Container ship have closer median scores among coastal, long-haul and short-haul. It has higher median score for average load in transoceanic trips.
:::
:::::

## **Engine power**

```{r}
#| fig-width: 8
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"

#Plot1
p_heye_ep <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Engine_Power_kW,
           fill = Route_Type)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 2) +
  scale_fill_manual(values = c("Coastal" = adjustcolor("#FF9EAA", alpha.f = 0.5),
                               "Long-haul" = adjustcolor("#3AA6B9", alpha.f = 0.5), 
                               "Short-haul" = adjustcolor("#e0c080", alpha.f = 0.5),
                               "Transoceanic" = adjustcolor("grey70", alpha.f = 0.5)), 
                                 name = NULL) +
  labs(title = "Halfeye Plots of Engine Power by Route Type") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )


#Plot2

median_load = median(ship_filter$Engine_Power_kW)

p_heye_ep_st <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Engine_Power_kW)) +
  ggdist::stat_interval(.width = 1:4*.25) +
  ggdist::stat_halfeye(.width = 0, fill = "grey80", 
                       color = "white", position = position_nudge(x = .024)) +
  scale_color_viridis_d(option = "cividis", direction = -1, end = .9) +
  geom_hline(yintercept = median_load, linetype = "dashed", color = "blue") +  # Add median line
  annotate("text", x = 1.2, y = median_load, label = paste("Median:", round(median_load, 2)),
            color = "blue", vjust = -1, hjust = 0, size = 3) +  # Add text label
  labs(title = "Halfeye Plots of Engine Power with Median Line") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

#Combine plots
p_heye_ep_st / p_heye_ep + plot_layout(height = c(1, 1.5))
```

::::: spgoals
::: spgoals-header
Engine power
:::

::: spgoals-container
-   Among the four ship types, the Fish Carrier shows the widest range of median engine power across the different route types. It has the lowest median engine power for long-haul trips and the highest for transoceanic trips.
-   Overall, the Tanker has a higher median engine power compared to the Container ship.
:::
:::::

## **Cargo weight**

```{r}
#| fig-width: 8
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"

#Plot1
p_heye_cw <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Cargo_Weight_tons,
           fill = Route_Type)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 2) +
  scale_fill_manual(values = c("Coastal" = adjustcolor("#FF9EAA", alpha.f = 0.5),
                               "Long-haul" = adjustcolor("#3AA6B9", alpha.f = 0.5), 
                               "Short-haul" = adjustcolor("#e0c080", alpha.f = 0.5),
                               "Transoceanic" = adjustcolor("grey70", alpha.f = 0.5)), 
                               name = NULL) +
  labs(title = "Halfeye Plots of Cargo Weight by Route Type") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )


#Plot2

median_load = median(ship_filter$Cargo_Weight_tons)

p_heye_cw_st <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Cargo_Weight_tons)) +
  ggdist::stat_interval(.width = 1:4*.25) +
  ggdist::stat_halfeye(.width = 0, fill = "grey80", color = "white", position = position_nudge(x = .024)) +
  scale_color_viridis_d(option = "plasma", direction = -1, end = .9) +
  geom_hline(yintercept = median_load, linetype = "dashed", color = "red") +  # Add median line
  annotate("text", x = 1.2, y = median_load, label = paste("Median:", round(median_load, 2)),
            color = "red", vjust = -1, hjust = 0, size = 3) +  # Add text label
  labs(title = "Halfeye Plots of Cargo Weight with Median Line") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

#Combine plots
p_heye_cw_st / p_heye_cw + plot_layout(height = c(1, 1.5))
```

::::: spgoals
::: spgoals-header
Cargo weight
:::

::: spgoals-container
-   Bulk carriers tend to have a higher concentration of lower cargo weights on Transoceanic trips. The density ridge line shows an obvious hump on the lower end of weight.
-   Fish carriers and Tankers show a greater concentration of higher cargo weights on Long-haul trips, while the concentration is lower on Short-haul trips.
-   Container ships show a higher concentration of cargo weights on Coastal and Transoceanic trips, with less concentration on Long-haul trips.
:::
:::::

## **Turnaround time**

```{r}
#| fig-width: 8
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"

#Plot1
p_heye_tt <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Turnaround_Time_hours,
           fill = Route_Type)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 2) +
  scale_fill_manual(values = c("Coastal" = adjustcolor("#FF9EAA", alpha.f = 0.5),
                               "Long-haul" = adjustcolor("#3AA6B9", alpha.f = 0.5), 
                               "Short-haul" = adjustcolor("#e0c080", alpha.f = 0.5),
                               "Transoceanic" = adjustcolor("grey70", alpha.f = 0.5)), 
                               name = NULL) +
  labs(title = "Halfeye Plots of Turnaround Time by Route Type") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )


#Plot2

median_load = median(ship_filter$Turnaround_Time_hours)

p_heye_tt_st <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Turnaround_Time_hours)) +
  ggdist::stat_interval(.width = 1:4*.25) +
  ggdist::stat_halfeye(.width = 0, fill = "grey80", color = "white", position = position_nudge(x = .024)) +
  scale_color_viridis_d(option = "rocket", direction = -1, end = .9) +
  geom_hline(yintercept = median_load, linetype = "dashed", color = "green") +  # Add median line
  annotate("text", x = 1.2, y = median_load, label = paste("Median:", round(median_load, 2)),
            color = "green", vjust = -1, hjust = 0, size = 3) +  # Add text label
  labs(title = "Halfeye Plots of Turnaround Time with Median Line") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

#Combine plots
p_heye_tt_st / p_heye_tt + plot_layout(height = c(1, 1.5))
```

::::: spgoals
::: spgoals-header
Turnaround time
:::

::: spgoals-container
-   Bulk carriers exhibit longer turnaround times on coastal, long-haul, and transoceanic routes, which aligns with the extended distances they cover. In contrast, Fish carriers show an inverse trend—short-haul routes have higher turnaround times, while long-haul routes see quicker turnarounds.
-   This suggests that Fish carriers on short-haul routes may frequently stop at sea to receive fish from fishing vessels before returning, whereas long-haul voyages likely involve fewer interruptions. Further data could clarify this operational pattern.
:::
:::::

## **Distance travelled**

```{r}
#| fig-width: 8
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"

#Plot1
p_heye_dt <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Distance_Traveled_nm,
           fill = Route_Type)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 2) +
  scale_fill_manual(values = c("Coastal" = adjustcolor("#FF9EAA", alpha.f = 0.5),
                               "Long-haul" = adjustcolor("#3AA6B9", alpha.f = 0.5), 
                               "Short-haul" = adjustcolor("#e0c080", alpha.f = 0.5),
                               "Transoceanic" = adjustcolor("grey70", alpha.f = 0.5)), 
                               name = NULL) +
  labs(title = "Halfeye Plots of Distance by Route Type") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

#Plot2

median_load = median(ship_filter$Distance_Traveled_nm)

p_heye_dt_st <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Distance_Traveled_nm)) +
  ggdist::stat_interval(.width = 1:4*.25) +
  ggdist::stat_halfeye(.width = 0, fill = "grey80", color = "white", position = position_nudge(x = .024)) +
  scale_color_viridis_d(option = "inferno", direction = -1, end = .9) +
  geom_hline(yintercept = median_load, linetype = "dashed", color = "grey20") +  # Add median line
  annotate("text", x = 1.2, y = median_load, label = paste("Median:", round(median_load, 2)),
            color = "grey20", vjust = -1, hjust = 0, size = 3) +  # Add text label
  labs(title = "Halfeye Plots of Distance with Median Line") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

#Combine plots
p_heye_dt_st / p_heye_dt + plot_layout(height = c(1, 1.5))
```

::::: spgoals
::: spgoals-header
Distance travelled\*
:::

::: spgoals-container
-   Both Bulk carriers and Fish carriers exhibit strong bimodal distributions in the distances traveled on long-haul routes. However, they differ significantly in their average travel distances compared to other routes. Bulk carriers show the shortest average distance for long-haul trips, while Fish carriers record the longest. This disparity suggests that despite similar route classifications, the **operational characteristics or requirements** for these ship types influence their journey lengths.
:::
:::::

## **Energy efficiency**

```{r}
#| fig-width: 12
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"

# Plot1
p_heye_ee_et <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Efficiency_nm_per_kWh,
           fill = Engine_Type)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 2) +
  scale_fill_manual(values = c("Heavy Fuel Oil (HFO)" = adjustcolor("#F9DBBA", alpha.f = 0.6),
                               "Steam Turbine" = adjustcolor("#DA498D", alpha.f = 0.6), 
                               "Diesel" = adjustcolor("#96CEB4", alpha.f = 0.6),
                               name = NULL)) +
  labs(title = "Halfeye Plots of Energy Efficiency by Engine Type") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )


# Plot2

median_load = median(ship_filter$Efficiency_nm_per_kWh)

p_heye_ee <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Efficiency_nm_per_kWh)) +
  ggdist::stat_interval(.width = 1:4*.25) +
  ggdist::stat_halfeye(.width = 0, fill = "grey80", color = "white", position = position_nudge(x = .024)) +
  scale_color_viridis_d(option = "magma", direction = -1, end = .9) +
  geom_hline(yintercept = median_load, linetype = "dashed", color = "brown") +  # Add median line
  annotate("text", x = 1.2, y = median_load, label = paste("Median:", round(median_load, 2)),
            color = "brown", vjust = -1, hjust = 0, size = 3) +  # Add text label
  labs(title = "Halfeye Plots of Energy Efficiency with Median Line") 


# Plot3
p_heye_ee_wc <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Efficiency_nm_per_kWh,
           fill = Weather_Condition)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 3) +
  scale_fill_manual(values = c("Moderate" = adjustcolor("#F9DBBA", alpha.f = 0.6),
                               "Rough" = adjustcolor("#DA498D", alpha.f = 0.6), 
                               "Calm" = adjustcolor("#5B99C2", alpha.f = 0.6),
                               name = NULL)) +
  labs(title = "Halfeye Plots of Energy Efficiency by Weather") +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

# Plot4
p_heye_ee_ms <- ggplot(ship_filter,
       aes(x = Ship_Type,
           y = Efficiency_nm_per_kWh,
           fill = Maintenance_Status)) +
  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,
                       shape = 21,
                       point_size = 2) +
  scale_fill_manual(values = c("Fair" = adjustcolor("#F9DBBA", alpha.f = 0.6),
                               "Critical" = adjustcolor("#8B5DFF", alpha.f = 0.6), 
                               "Good" = adjustcolor("#41B3A2", alpha.f = 0.6),
                               name = NULL)) +
  labs(title = "Halfeye Plots of Energy Efficiency by Maintenance") 


# Combine plots
(p_heye_ee | p_heye_ee_et) / (p_heye_ee_wc | p_heye_ee_ms)
```

:::: spgoals
::: spgoals-header
Energy efficiency
:::

-   The energy efficiency distribution appears relatively uniform across all ship types, suggesting that there is no significant disparity in energy performance across different vessels.
-   An interesting observation is that Container ships demonstrate a remarkbly higher average energy efficiency during calm weather conditions. In contrast, Fish carriers show a slight negative skew in energy efficiency during calm weather, indicating that **Fish containers may face unique operational constaints in such conditions**.
-   While most ship types exhibit a positive correlation between energy efficiency and maintenance status, Fish carriers deviate from this trend. They show a lower average energy efficiency when in good maintenance status. This anomaly could potentially be attributed to the specific logistics requirements of Fish carriers, which might necessitate operational adjustments that affect their energy performance. Further investigation is needed to understand the factors influencing this discrepancy.
::::
::::::::::::::::::::

### 4.4 Voyage frequency

#### **4.4.1 Overall voyage frequency over time**

To analyse voyage frequency trends over time, a bar chart was plotted to illustrate the monthly distribution of voyages in the dataset.

```{r}
#| fig-width: 8
#| fig-height: 4
#| code-fold: true
#| code-summary: "Show the code"
voyage_count <- ship_filter %>%
  mutate(Month = format(as.Date(Date), "%Y-%m")) %>% #to extract Year-Month
  group_by(Month) %>%
  summarise(Count = n()) #count rows
voyage_count_scaled <- voyage_count %>%
  mutate(Count_scaled = Count / 10)

#calculate average
mean_voyage <- mean(voyage_count$Count)

ggplot(voyage_count_scaled,
       aes(x = Month,
           y = Count_scaled)) +
  geom_bar(stat = "identity", 
           fill = "grey30") +
  labs(x = "Date", y = "Voyage Count (scaled by 10) ",
       title = "Voyage Frequency Over Time") +
  theme_light() +
  geom_hline(yintercept = mean_voyage/10, color = "#3AA6B9", linetype = "dashed", size = 1) + 
  annotate("text", x = 3.2, y = mean_voyage/10 + 1, 
           label = paste("Mean: ", round(mean_voyage/10, 2)), color = "#3AA6B9")+
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = NA),  
        legend.key = element_rect(fill = "#f1f4f5", color = NA)
        )

```

::::: spgoals
::: spgoals-header
Insights
:::

::: spgoals-container
-   Voyage frequencies exhibit seasonal fluctuations, with notable peaks in July, October, and December 2023, as well as March and June 2024.
-   March 2024 recorded the highest voyage count, nearing 200 voyages.
-   Most other months maintained a steady frequency around 150 voyages, with September recording the lowest.
:::
:::::

#### **4.4.2 Voyage frequency by ship type**

To gain deeper insights into voyage frequencies by ship type and their distribution over time, the combined bar charts plot below presents voyage frequencies by ship type on the right and their monthly percentages over time.

```{r}
#| fig-width: 9
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
# Extract month and year from the Date
ship_filter_month <- ship_filter %>%
  mutate(Month = floor_date(Date, "month"))

# Group by Month and Ship type, then count occurrences
trip_by_month_bar <- ship_filter_month %>%
  group_by(Month, Ship_Type) %>%
  summarise(Count = n(), .groups = "drop")

# Calculate total occurrences per month
total_trip_per_month_bar <- trip_by_month_bar %>%
  group_by(Month) %>%
  summarise(Total = sum(Count))

# Join total occurrences per month and compute percentage
trip_percentage_bar <- trip_by_month_bar %>%
  left_join(total_trip_per_month_bar, by = "Month") %>%
  mutate(Percentage = (Count / Total) * 100)  # Convert to percentage

# Plot stacked bar chart with percentage
p_trip_ct_1 <- ggplot(trip_percentage_bar, 
       aes(x = Month, y = Percentage, fill = factor(Ship_Type, levels = c("Bulk Carrier", "Container Ship", "Fish Carrier", "Tanker")))) +
  geom_bar(stat = "identity", position = "stack") +  # Use identity because we computed percentages
  geom_text(aes(label = paste0(round(Percentage, 0), "%")), 
            position = position_stack(vjust = 0.5),  # Center the text in each segment
            size = 2.5, color = "black") +  # Adjust text size and color
  scale_fill_manual(values = c("Bulk Carrier" = "#bcd6be",
                               "Container Ship" = "#f5e8ce",
                               "Fish Carrier" = "#e0bcc0",
                               "Tanker" = "#9bc5cc")) + 
  labs(title = "Number of Trips Over Time (%)",
       x = "Month",
       y = "Percentage (%)",
       fill = "Ship_Type") +
  theme_light() +
  scale_x_date(labels = scales::date_format("%m/%y"), breaks = "1 month") + 
  theme(plot.title = element_text(size = 8, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        text = element_text(size = 8),
        legend.text = element_text(size = 6),  # Change legend text size
        legend.title = element_text(size = 6, face = "bold"),  # Change legend title size
        legend.key.size = unit(0.5, "cm"),  # Adjust legend key size (box size)
        legend.spacing.y = unit(0.3, "cm"),
        legend.position = "top") 

###------------ Plot2 ------------
#Count the number of trips by ship
trip_count <- ship_filter %>%
  group_by(Ship_Type) %>%
  summarise(Trip_Count = n(), .group = "drop")

#calculation
total_trips <- sum(trip_count$Trip_Count)
trip_count <- trip_count %>%
  mutate(Percentage = (Trip_Count / total_trips) * 100)

#plot the bar chart
p_trip_ct_2 <- ggplot(trip_count,
       aes(x = Ship_Type,
           y = Trip_Count,
           fill = Ship_Type)) +
  geom_bar(stat = "identity", show.legend = FALSE) + #stat = "identity": use the values in 'Trip_Count'
  labs(title = "Trip Count by Ship Type",
       x = "Ship Type",
       y = "Number of Trips") +
  geom_text(aes(label = paste0(Trip_Count," (", round(Percentage, 1), "%)")),
            vjust = -0.8, size = 2, angle = 45) +
  theme_light() +
  theme(plot.title = element_text(size = 8, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        text = element_text(size = 8),
        legend.text = element_text(size = 6), 
        legend.title = element_text(size = 6, face = "bold"), 
        legend.key.size = unit(0.5, "cm"),
        legend.spacing.y = unit(0.3, "cm"),
        legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = c("Bulk Carrier" = "#bcd6be",
                               "Container Ship" = "#f5e8ce",
                               "Fish Carrier" = "#e0bcc0",
                               "Tanker" = "#9bc5cc")) 
#Combine plots
p_trip_ct_1 + p_trip_ct_2 + plot_layout(widths = c(2.5,1))
```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
**Balanced Distribution with Leading Segments** <br>Voyage frequencies are fairly evenly distributed across ship types. Bulk carriers recorded the highest share at nearly 26%, followed by tankers, container ships, and fish carriers, each contributing approximately 25%.

-   **Bulk Carrier Trends** <br>Bulk carriers’ voyage frequencies range from 20% to 34%, with peak activity in August, November 2023 and April 2024, where they accounted for close to or more than 1/3 of total monthly voyages.
-   **Container Ship Patterns** <br>Container ships showed fluctuations between 19% and 29%. Peak months included December 2023 and March, June 2024, when they made up nearly 30% of total voyages.
-   **Fish Carrier Variability** <br>Fish carriers exhibited the widest range, from 16% to 33%, with the lowest frequency in November 2023 and the highest in January 2024.
-   **Tanker Stability** <br>Tankers maintained steadier voyage frequencies, ranging from 21% to 29%, suggesting that seasonal variations had less impact on their operations compared to other ship types.
:::
:::::

## 5 Profit Performance

### 5.1 Finance performance overview

To assess the financial performance across all ship types, a boxplot analysis was conducted, examining key metrics such as operational cost, revenue per trip, and profit (all in thousand dollars). This provides an overarching view of profitability and cost efficiency across voyages.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#Plot operational cost distribution
p1 <- ggplot(ship_filter,
       aes(y = Operational_Cost_USD, x = "All ship types")) +
  geom_violin(outlier.colour = "purple",
              color = "#A3B23B",
              fill = "#F4F8D3",
              alpha = 0.4) + 
  geom_boxplot(width = .2,
               color = "grey60") +
  geom_point(position = "jitter",
             size = 0.2,
             color = "#F4F8D3",
             alpha = 0.3) +
  coord_cartesian(ylim = c(-500, 1000)) +
  theme_light() +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.border = element_blank())

#Plot revenue distribution
p2<- ggplot(ship_filter,
       aes(y = Revenue_per_Voyage_USD, x = "All ship types")) +
  geom_violin(outlier.colour = "blue",
               color = "#5FB0B0",
               fill = "#73C7C7",
               alpha = 0.4) +
  geom_boxplot(width = .2,
               color = "grey60") +
  geom_point(position = "jitter",
             size = 0.2,
             color = "#73C7C7",
             alpha = 0.3) +
  coord_cartesian(ylim = c(-500, 1000)) +
  theme_light() +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.border = element_blank())

#Plot profit distribution
p3 <- ggplot(ship_filter,
       aes(y = Profit, x = "All ship types")) +
  geom_violin(outlier.colour = "green",
               color = "#E6A5B1",
               fill = "#F7CFD8",
               alpha = 0.4) +
  geom_boxplot(width = .2,
               color = "grey60") +
  geom_point(position = "jitter",
             size = 0.2,
             color = "#F7CFD8",
             alpha = 0.3) +
  coord_cartesian(ylim = c(-500, 1000)) +
  theme_light() +
  theme(plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.border = element_blank())

patchwork <- p1 + p2 + p3
patchwork + plot_annotation(
  title = "Finance Distribution Overview") &
  theme(plot.title = element_text(size = 12, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5", color = NA)
)
  
```

For a deeper analysis of profit variations between ship types, a ggbetweenstats plot was employed. This visualisation not only compares profit distributions but also evaluates the statistical significance of differences, offering insights into which vessel types demonstrate superior financial performance.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Plot statboxplot by ship types
ggbetweenstats(
  data = ship_filter,
  x = Ship_Type,
  y = Profit,
  type = "p",
  mean.ci = TRUE,
  pariwise.comparisons = TRUE,
  pairwise.display = "s",
  p.adjust.methods = "fdr",
  message = FALSE
) +
  labs(title = "Welch’s one-way ANOVA") +
  theme(panel.background = element_rect(fill = "#f1f4f5", color = NA),
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        plot.title = element_text(size = 16, face = "bold") 
        )

```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   The distribution of operational costs and revenue appears relatively uniform, with operational costs ranging from \$0 to \$500K and revenue \$0 to \$1M. In addition, **no significant outliers were detected, suggesting consistent financial performance.**
-   With voyage counts closely clustered between 521 and 550 trips, profit exhibits a normal distribution, suggesting a balanced spread of earnings per trip.
-   Statistical analysis using Welch’s one-way ANOVA produced a p-value of 0.84, far exceeding the 0.05 threshold. This indicates no statistically significant difference in profit performance across ship types. This suggested that factors other than vessel classification may be influencing profitability.
:::
:::::

### 5.2 Profit performance by ship, engine type in different aspects

In this section, we dive deeper into the performance of ships by examining categorical variables through density ridge plots. By analysing ship types and their respective engine types, we assess their performance across various factors such as routes, weather conditions, and maintenance status. Each row of the plot represents a different engine type, while the columns correspond to individual ship types, providing a comprehensive view of how these elements interact.

#### **5.2.1 Operational conditions**

:::::::::::: panel-tabset
## **Route Type**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
###------------1 Plot Bulk Carrier -----------###

# Filter data for only "Bulk Carrier" ships
bulkc_data <- ship_filter %>%
  filter(Ship_Type == "Bulk Carrier")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_bulkc <- bulkc_data %>%
  group_by(Engine_Type, Route_Type) %>%
  summarise(mean_profit_bulkc = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_bulkc
p_ridg_bulkc <- ggplot(bulkc_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Route_Type, 
                        color = Route_Type)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_bulkc, 
             aes(x = mean_profit_bulkc, y = Engine_Type, fill = Route_Type), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1) +
  labs(x = "Bulk Carrier", y = NULL) +  
  scale_fill_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) +  
  scale_color_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines"),
        plot.margin = margin(t = 10, r = 10, b = 30, l = 20)
        ) 


###------------2 Plot Container Ship -----------###
# Filter data for only "Container Ship" ships
cship_data <- ship_filter %>%
  filter(Ship_Type == "Container Ship")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_cship <- cship_data %>%
  group_by(Engine_Type, Route_Type) %>%
  summarise(mean_profit_cship = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_cship
p_ridg_cship <- ggplot(cship_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Route_Type, 
                        color = Route_Type)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_cship, 
             aes(x = mean_profit_cship, y = Engine_Type, fill = Route_Type), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") + 
  labs(x = "Container Ship", y = NULL) +  
  scale_fill_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) +  
  scale_color_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "top",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines")
        )


###-----------3 Plot Fish Carrier -----------###
# Filter data for only "Fish Carrier" ships
fishc_data <- ship_filter %>%
  filter(Ship_Type == "Fish Carrier")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_fishc <- fishc_data %>%
  group_by(Engine_Type, Route_Type) %>%
  summarise(mean_profit_fishc = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_fishc
p_ridg_fishc <- ggplot(fishc_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Route_Type, 
                        color = Route_Type)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_fishc, 
             aes(x = mean_profit_fishc, y = Engine_Type, fill = Route_Type), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") +  # Separate plots for each Route_Type
  labs(x = "Fish Carrier", y = NULL) +  
  scale_fill_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) +  
  scale_color_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines")
        )

###-----------4 Plot Tanker-----------###
# Filter data for only "Tanker" ships
tanker_data <- ship_filter %>%
  filter(Ship_Type == "Tanker")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_tanker <- tanker_data %>%
  group_by(Engine_Type, Route_Type) %>%
  summarise(mean_profit_tanker = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_tanker
p_ridg_tanker <- ggplot(tanker_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Route_Type, 
                        color = Route_Type)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_tanker, 
             aes(x = mean_profit_tanker, y = Engine_Type, fill = Route_Type), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") +  # Separate plots for each Route_Type
  labs(x = "Tanker", y = NULL) +  
  scale_fill_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) +  
  scale_color_manual(values = c("Coastal" = "#FF9EAA",
                               "Long-haul" = "#3AA6B9",
                               "Short-haul" = "#e0c080",
                               "Transoceanic" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120)
        )

patchwork <- (p_ridg_bulkc | p_ridg_cship | p_ridg_fishc | p_ridg_tanker)
patchwork 
  
```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   When comparing route performance across ship types, the findings reveal some interesting trends. Bulk carriers, which are powered by diesel engines, maintain a consistent performance across various routes. However, other ship types show noticeable variations.
-   Among the different ship types, Container ships with HFO engines demonstrate a lower average profit on long-haul trips compared to coastal and transoceanic routes. In contrast, Tankers equipped with HFO engines exhibit a right-skewed profit distribution on coastal routes, leading to a lower average profit compared to other route types.
-   **Fish carriers** <br> Displays varied profit patterns, regardless of the engine type. When operating on HFO engines, Fish carriers tend to exhibit a left-skewed profit distribution on long-haul routes, indicating that **profits are more concentrated at the higher end**. <br>While the average profit doesn’t show a clear advantage, this skew suggests that certain engine and route combinations could potentially enhance profitability for Fish carriers under specific conditions. <br>In transoceanic routes, Fish carriers show similar concentrated density regardless of the engine types.
:::
:::::

## **Weather Condition**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
###------------1 Plot Bulk Carrier -----------###

# Filter data for only "Bulk Carrier" ships
bulkc_data <- ship_filter %>%
  filter(Ship_Type == "Bulk Carrier")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_bulkc <- bulkc_data %>%
  group_by(Engine_Type, Weather_Condition) %>%
  summarise(mean_profit_bulkc = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_bulkc
p_ridg_bulkc_wc <- ggplot(bulkc_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Weather_Condition, 
                        color = Weather_Condition)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_bulkc, 
             aes(x = mean_profit_bulkc, y = Engine_Type, fill = Weather_Condition), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1) +
  labs(x = "Bulk Carrier", y = NULL) +  
  scale_fill_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) +  
  scale_color_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines"),
        plot.margin = margin(t = 10, r = 10, b = 30, l = 20)
        ) 


###------------2 Plot Container Ship -----------###
# Filter data for only "Container Ship" ships
cship_data <- ship_filter %>%
  filter(Ship_Type == "Container Ship")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_cship <- cship_data %>%
  group_by(Engine_Type, Weather_Condition) %>%
  summarise(mean_profit_cship = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_cship
p_ridg_cship_wc <- ggplot(cship_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Weather_Condition, 
                        color = Weather_Condition)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_cship, 
             aes(x = mean_profit_cship, y = Engine_Type, fill = Weather_Condition), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") + 
  labs(x = "Container Ship", y = NULL) +  
  scale_fill_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) +  
  scale_color_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "top",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines")
        )


###-----------3 Plot Fish Carrier -----------###
# Filter data for only "Fish Carrier" ships
fishc_data <- ship_filter %>%
  filter(Ship_Type == "Fish Carrier")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_fishc <- fishc_data %>%
  group_by(Engine_Type, Weather_Condition) %>%
  summarise(mean_profit_fishc = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_fishc
p_ridg_fishc_wc <- ggplot(fishc_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Weather_Condition, 
                        color = Weather_Condition)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_fishc, 
             aes(x = mean_profit_fishc, y = Engine_Type, fill = Weather_Condition), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") +  # Separate plots for each Route_Type
  labs(x = "Fish Carrier", y = NULL) +  
  scale_fill_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) +  
  scale_color_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines")
        )

###-----------4 Plot Tanker-----------###
# Filter data for only "Tanker" ships
tanker_data <- ship_filter %>%
  filter(Ship_Type == "Tanker")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_tanker <- tanker_data %>%
  group_by(Engine_Type, Weather_Condition) %>%
  summarise(mean_profit_tanker = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_tanker
p_ridg_tanker_wc <- ggplot(tanker_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Weather_Condition, 
                        color = Weather_Condition)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_tanker, 
             aes(x = mean_profit_tanker, y = Engine_Type, fill = Weather_Condition), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") +  # Separate plots for each Route_Type
  labs(x = "Tanker", y = NULL) +  
  scale_fill_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) +  
  scale_color_manual(values = c("Rough" = "#FF9EAA",
                               "Calm" = "#3AA6B9",
                               "Moderate" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120)
        )

patchwork <- (p_ridg_bulkc_wc | p_ridg_cship_wc | p_ridg_fishc_wc | p_ridg_tanker_wc)
patchwork 
```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   Voyages in rough weather often display skewed profit performance. <br>Bulk carriers with diesel engines show **opposite skewness** between rough and moderate weather, a trend also observed in Tankers with steam turbine and HFO engines.
-   Every weather condition shows a few bimodal distribution for certain types of ship and engine combination. For example, Container ships running on HFO engine shows a bimodal distribution during rough weather, and so is Fish carrier with diesel & steam turbine engine during calm weather.
-   Certain ship and engine combinations exhibit bimodal distributions under specific weather conditions: <br>- Container ships with HFO engines show bimodal distribution in rough weather. <br>- Fish carriers with diesel or steam turbine engines show bimodal distribution in calm weather.
:::
:::::

## **Maintenance status**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
###------------1 Plot Bulk Carrier -----------###

# Filter data for only "Bulk Carrier" ships
bulkc_data <- ship_filter %>%
  filter(Ship_Type == "Bulk Carrier")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_bulkc <- bulkc_data %>%
  group_by(Engine_Type, Maintenance_Status) %>%
  summarise(mean_profit_bulkc = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_bulkc
p_ridg_bulkc_ms <- ggplot(bulkc_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Maintenance_Status, 
                        color = Maintenance_Status)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_bulkc, 
             aes(x = mean_profit_bulkc, y = Engine_Type, fill = Maintenance_Status), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1) +
  labs(x = "Bulk Carrier", y = NULL) +  
  scale_fill_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) +  
  scale_color_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines"),
        plot.margin = margin(t = 10, r = 10, b = 30, l = 20)
        ) 


###------------2 Plot Container Ship -----------###
# Filter data for only "Container Ship" ships
cship_data <- ship_filter %>%
  filter(Ship_Type == "Container Ship")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_cship <- cship_data %>%
  group_by(Engine_Type, Maintenance_Status) %>%
  summarise(mean_profit_cship = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_cship
p_ridg_cship_ms <- ggplot(cship_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Maintenance_Status, 
                        color = Maintenance_Status)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_cship, 
             aes(x = mean_profit_cship, y = Engine_Type, fill = Maintenance_Status), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") + 
  labs(x = "Container Ship", y = NULL) +  
  scale_fill_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) +  
  scale_color_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "top",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines")
        )


###-----------3 Plot Fish Carrier -----------###
# Filter data for only "Fish Carrier" ships
fishc_data <- ship_filter %>%
  filter(Ship_Type == "Fish Carrier")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_fishc <- fishc_data %>%
  group_by(Engine_Type, Maintenance_Status) %>%
  summarise(mean_profit_fishc = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_fishc
p_ridg_fishc_ms <- ggplot(fishc_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Maintenance_Status, 
                        color = Maintenance_Status)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_fishc, 
             aes(x = mean_profit_fishc, y = Engine_Type, fill = Maintenance_Status), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") +  # Separate plots for each Route_Type
  labs(x = "Fish Carrier", y = NULL) +  
  scale_fill_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) +  
  scale_color_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120),
        panel.spacing = unit(1, "lines")
        )

###-----------4 Plot Tanker-----------###
# Filter data for only "Tanker" ships
tanker_data <- ship_filter %>%
  filter(Ship_Type == "Tanker")

# Calculate mean profit for each Engine Type and Route Type
mean_profit_tanker <- tanker_data %>%
  group_by(Engine_Type, Maintenance_Status) %>%
  summarise(mean_profit_tanker = mean(Profit, na.rm = TRUE), .groups = "drop")

# Create Plot_tanker
p_ridg_tanker_ms <- ggplot(tanker_data, aes(x = Profit, 
                        y = Engine_Type, 
                        fill = Maintenance_Status, 
                        color = Maintenance_Status)) +
  geom_density_ridges(
    alpha = 0.2,           
    scale = 6,            
    rel_min_height = 0.01,
    position = "identity"   # Ensures full overlap
  ) +
  geom_point(data = mean_profit_tanker, 
             aes(x = mean_profit_tanker, y = Engine_Type, fill = Maintenance_Status), 
             shape = 23, size = 3, stroke = 0.5, color = "grey90") +
  facet_wrap(~ Engine_Type, ncol = 1, strip.position = "left") +  # Separate plots for each Route_Type
  labs(x = "Tanker", y = NULL) +  
  scale_fill_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) +  
  scale_color_manual(values = c("Critical" = "#FF9EAA",
                               "Good" = "#3AA6B9",
                               "Fair" = "grey70")) + 
  theme_classic() +
  theme(axis.text.y = element_blank(),  
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank(),
        strip.text.y = element_blank(),
        strip.background = element_blank(), 
        legend.position = "none",
        plot.title = element_text(size = 12, face = "bold",
                                  hjust = 0.5, vjust = -120)
        )

patchwork <- (p_ridg_bulkc_ms | p_ridg_cship_ms | p_ridg_fishc_ms | p_ridg_tanker_ms)
patchwork 
```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   The density plots reveal varying profit patterns across different maintenance statuses, particularly for Fish carriers and Tankers, indicating that **maintenance status may have a differentiated impact on profitability depending on the ship type**.
-   Interestingly, ships with diesel and steam turbine engines in a **Critical** maintenance state tend to show **consistently higher average profit** across various ship types. In contrast, ships using HFO engines lag behind in terms of profitability. This pattern warrants further investigation to determine whether ships in critical maintenance states experience frequent voyages that limit maintenance time, potentially affecting performance. Additional data could help assess the relationship between ship maintenance status and profitability, especially for vessels using HFO engines.
:::
:::::
::::::::::::

#### **5.2.2 Performance Metrics**

To analyse the performance metrics of ship types, I created scatter plots using `geom_point()` and `geom_smooth()` to visualize the data points and trend lines. In the combined plot below, the left panel shows the overall trend line, with points representing individual ship types, each color-coded accordingly. Hovering over a point reveals a tooltip with detailed information about that specific data point. On the right panel, separate trend lines for each ship type are plotted to highlight the differences in performance across ship types.

::: panel-tabset
## **Energy Efficiency**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
library(plotly)
p_pt_ee <- ggplot(data=ship_filter,
             aes(x = Efficiency_nm_per_kWh,
                 y = Profit)) +
  geom_point(size = 0.4,
             aes(color = Ship_Type),
             show.legend = FALSE) +
  geom_smooth(method = lm,
              size = 0.5) +
  coord_cartesian(xlim=c(.1,1.5),
                 ylim=c(-500,1000)) +
  labs(title = "Energy Efficiency with Overall Trend Line",
       x = "Efficiency_nm_per_kWh",
       y = "Profit (1KUSD)") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA,),
        axis.title.x = element_text(size = 12),
        axis.title.y = element_text(size = 12))  +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p_pt_ee_st <- ggplot(data=ship_filter,
             aes(x = Efficiency_nm_per_kWh,
                 y = Profit,
                 color = Ship_Type)) +
  geom_point(colour = "grey80",
             size = 0.4) +
  geom_smooth(method = lm,
              size = 0.5,
              se = FALSE,
              aes(color = Ship_Type)) +
  scale_color_brewer(palette = "Set2") +
  coord_cartesian(xlim=c(.1,1.5),
                 ylim=c(-500,1000)) +
  labs(title = "Energy Efficiency with Trend Lines for All Ship Types",
       color = "Ship Type") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size=10),
        legend.position = "right",
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)
        ) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 

p1_plotly <- ggplotly(p_pt_ee)
p2_plotly <- ggplotly(p_pt_ee_st)

combined_plot <- subplot(p1_plotly,  p2_plotly, nrows = 1)

p_plotly_ee <- combined_plot %>%
  layout(
    title = "Energy Efficiency with Overall Trend Line",
    xaxis = list(title = "Efficiency_nm_per_kWh",
                 titlefont = list(size = 12), tickfont = list(size = 12)),
    yaxis = list(title = "Profit (1KUSD)",
                 titlefont = list(size = 12), tickfont = list(size = 12))
  )
p_plotly_ee
```

## **Engine Power**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
p_pt_ep <- ggplot(data=ship_filter,
             aes(x = Engine_Power_kW,
                 y = Profit)) +
  geom_point(size = 0.6,
             aes(color = Ship_Type),
             show.legend = FALSE) +
  geom_smooth(method = lm,
              size = 0.5) +
  coord_cartesian(xlim=c(500,3000),
                 ylim=c(-500,1000)) +
  labs(title = "Turnaround Time with Overall Trend Line",
       x = "Engine_Power_kW",
       y = "Profit (1KUSD)") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)
        ) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p_pt_ep_st <- ggplot(data=ship_filter,
             aes(x = Engine_Power_kW,
                 y = Profit,
                 color = Ship_Type)) +
  geom_point(size = 0.6,
             colour = "grey80") +
  geom_smooth(method = lm,
              size = 0.5,
              se = FALSE,
              aes(color = Ship_Type)) +
  scale_color_brewer(palette = "Set2") +
  coord_cartesian(xlim=c(500,3000),
                 ylim=c(-500,1000)) +
  labs(title = "Turnaround Time with Trend Lines for All Ship Types",
       color = "Ship Type") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size=10),
        legend.position = "right",
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)
        ) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p3_plotly <- ggplotly(p_pt_ep)
p4_plotly <- ggplotly(p_pt_ep_st)


combined_plot <- subplot(p3_plotly,  p4_plotly, nrows = 1)

p_plotly_ep <- combined_plot %>%
  layout(
    title = "Engine Power with Overall Trend Line",
    xaxis = list(title = "Engine_Power_kW",
                 titlefont = list(size = 12), tickfont = list(size = 12)),
    yaxis = list(title = "Profit (1KUSD)",
                 titlefont = list(size = 12), tickfont = list(size = 12))
  )
p_plotly_ep

```

## **Average load**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
p_pt_al <- ggplot(data=ship_filter,
             aes(x = Average_Load_Percentage,
                 y = Profit)) +
  geom_point(size = 0.6,
             aes(color = Ship_Type),
             show.legend = FALSE) +
  geom_smooth(method = lm,
              size = 0.5) +
  coord_cartesian(xlim=c(40,100),
                 ylim=c(-500,1000)) +
  labs(title = "Average Load vs Profit",
       x = "Average_Load_Percentage",
       y = "Profit (1KUSD)") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p_pt_al_st <- ggplot(data=ship_filter,
             aes(x = Average_Load_Percentage,
                 y = Profit,
                 color = Ship_Type)) +
  geom_point(colour = "grey",
             size = 0.6) +
  geom_smooth(method = lm,
              size = 0.5,
              se = FALSE,
              aes(color = Ship_Type)) +
  scale_color_brewer(palette = "Set2") +
  coord_cartesian(xlim=c(40,100),
                 ylim=c(-500,1000)) +
  labs(title = "Average Load vs Profit by All Ship Types",
       color = "Ship Type") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size=10),
        legend.position = "right",
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)
        ) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p5_plotly <- ggplotly(p_pt_al)
p6_plotly <- ggplotly(p_pt_al_st)

combined_plot <- subplot(p5_plotly,  p6_plotly, nrows = 1)

p_plotly_al <- combined_plot %>%
  layout(
    title = "Average Load with Overall Trend Line",
    xaxis = list(title = "Average_Load_Percentage",
                 titlefont = list(size = 12), tickfont = list(size = 12)),
    yaxis = list(title = "Profit (1KUSD)",
                 titlefont = list(size = 12), tickfont = list(size = 12))
  )
p_plotly_al

```

## **Turnaround time**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
p_pt_turntime <- ggplot(data=ship_filter,
             aes(x = Turnaround_Time_hours,
                 y = Profit)) +
  geom_point(size = 0.6,
             aes(color = Ship_Type),
             show.legend = FALSE) +
  geom_smooth(method = lm,
              size = 0.5) +
  coord_cartesian(xlim=c(0,80),
                 ylim=c(-500,1000)) +
  labs(title = "Turnaround Time with Overall Trend Line",
       x = "Turnaround_Time_hours",
       y = "Profit (1KUSD)") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p_pt_turntime_st <- ggplot(data=ship_filter,
             aes(x = Turnaround_Time_hours,
                 y = Profit,
                 color = Ship_Type)) +
  geom_point(colour = "grey80",
             size = 0.6) +
  geom_smooth(method = lm,
              size = 0.5,
              se = FALSE,
              aes(color = Ship_Type)) +
  scale_color_brewer(palette = "Set2") +
  coord_cartesian(xlim=c(0, 80),
                 ylim=c(-500,1000)) +
  labs(title = "Turnaround Time with Trend Lines for All Ship Types",
       color = "Ship Type") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size=10),
        legend.position = "right",
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 

p7_plotly <- ggplotly(p_pt_turntime)
p8_plotly <- ggplotly(p_pt_turntime_st)

combined_plot <- subplot(p7_plotly,  p8_plotly, nrows = 1)

p_plotly_tt <- combined_plot %>%
  layout(
    title = "Turnaround Time with Overall Trend Line",
    xaxis = list(title = "Turnaround_Time_hours",
                 titlefont = list(size = 12), tickfont = list(size = 12)),
    yaxis = list(title = "Profit (1KUSD)",
                 titlefont = list(size = 12), tickfont = list(size = 12))
  )
p_plotly_tt

```

## **Cargo Weight**

```{r}
#| fig-width: 8
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
p_pt_cargowt <- ggplot(data=ship_filter,
             aes(x = Cargo_Weight_tons,
                 y = Profit)) +
  geom_point(size = 0.6,
             aes(color = Ship_Type),
             show.legend = FALSE) +
  geom_smooth(method = lm,
              size = 0.5) +
  coord_cartesian(xlim=c(50,2000),
                 ylim=c(-500,1000)) +
  labs(title = "Cargo Weight with Overall Trend Line",
       x = "Cargo_Weight_tons",
       y = "Profit (1KUSD)") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p_pt_cargowt_st <- ggplot(data=ship_filter,
             aes(x = Cargo_Weight_tons,
                 y = Profit,
                 color = Ship_Type)) +
  geom_point(colour = "grey80",
             size = 0.6) +
  geom_smooth(method = lm,
              size = 0.5,
              se = FALSE,
              aes(color = Ship_Type)) +
  scale_color_brewer(palette = "Set2") +
  coord_cartesian(xlim=c(50, 2000),
                 ylim=c(-500,1000)) +
  labs(title = "Turnaround Time with Trend Lines for All Ship Types",
       color = "Ship Type") +
  theme_classic() +
  theme(plot.title = element_text(size = 10, face = "bold"),
        legend.text = element_text(size=10),
        legend.position = "right",
        plot.background = element_rect(fill = "#f1f4f5", color = NA),
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5", color = NA)
        ) +
  scale_color_manual(values = c("Bulk Carrier" = "#FF9EAA", 
                                "Container Ship" = "#3AA6B9",
                                "Fish Carrier" = "#e0c080",
                                "Tanker" = "#a5c7a7")) 


p9_plotly <- ggplotly(p_pt_cargowt)
p10_plotly <- ggplotly(p_pt_cargowt_st)

combined_plot <- subplot(p9_plotly,  p10_plotly, nrows = 1)

p_plotly_cw <- combined_plot %>%
  layout(
    title = "Turnaround Time with Overall Trend Line",
    xaxis = list(title = "Cargo_Weight_tons",
                 titlefont = list(size = 12), tickfont = list(size = 12)),
    yaxis = list(title = "Profit (1KUSD)",
                 titlefont = list(size = 12), tickfont = list(size = 12))
  )
p_plotly_cw
```
:::

::::: spgoals
::: spgoals-header
Insights
:::

::: spgoals-container
-   ***Overall trends in performance metrics*** <br>Across the various performance metrics, both Average Load Percentage and Cargo Weight exhibit a slight upward trend, suggesting that higher load and cargo may be linked to improved profit performance. In contrast, Turnaround Time shows a mild downward slope, indicating that quicker turnarounds could positively impact profitability, aligning with industry expectations.
-   ***Energy efficiency and profitability for Tanker*** <br>For Tanker, there is a clear positive correlation between energy efficiency and profit, suggesting that **better fuel or energy management** directly contributes to enhanced financial performance.
-   ***Average load percentage trends across ship types*** <br>All ship types exhibit an overall upward trend in Average Load Percentage, but Container Ships demonstrate the most pronounced increase. This suggests that **maximising load capacity** might be a key driver for profit improvement, particularly for container vessels.
-   ***Turnaround time impact on profitability*** <br>Container Ships and Tankers show the most noticeable negative correlation between Turnaround Time and Profit, implying that longer wait times between voyages detract from profitability. **Reducing turnaround time** for these ship types could lead to more efficient operations and better financial outcomes.
-   ***Cargo weight and profit correlation*** <br>Across all ship types, there is a slight but consistent positive correlation between Cargo Weight and Profit. While the relationship isn’t as strong, it suggests that heavier loads generally contribute to higher profits, emphasising the importance of **maximising cargo capacity**.
:::
:::::

#### **5.2.3 Comparing Profit and Voyage frequency by ship type**

`treemap()` is used to visually compare multiple categorical and numerical aspects of voyage performance. In this plot, total profit is represented by colour intensity, while voyage frequency determines the size of each rectangle. Larger rectangles indicate a higher number of trips, while darker colours represent greater profitability. The hierarchical structure follows a descending order, first grouping by ship type, then engine type, and finally route type. This organisation allows for a layered comparison, making it easier to observe patterns and relationships across these categories.

```{r}
#| fig-width: 10
#| fig-height: 8
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)
ship_treemap <- ship_filter %>%
  group_by(Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition, Route_Type) %>%  
  summarise(
    Total_Profit = sum(Profit, na.rm = TRUE),  
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Cargo = sum(Cargo_Weight_tons, na.rm = TRUE),
    Voyage_Count = n()
  ) %>%
  ungroup()  

treemap(ship_treemap,
        index=c("Ship_Type", "Engine_Type", "Route_Type"),
        vSize="Voyage_Count",
        vColor="Total_Profit",
        type = "value",
        palette="RdYlBu",
        algorithm = "pivotSize", 
        sortID = "Total_Profit",
        title="Profit by Cargo Weight",
        title.legend = "Profit ($1K USD)",
        border.col = c("black", "red", "white"),
        border.lwds = c(5, 2, 0.8)
        )

```

::::: spgoals
::: spgoals-header
Insights
:::

::: spgoals-container
-   **Container ships powered by steam turbine engines on long-haul routes lead the industry in profitability**, outperforming all other combinations of ship type, engine type, and route. Following closely behind are bulk carriers with diesel engines, also operating on long-haul routes.
-   In general, coastal and short-haul routes yield lower profits across all ship types. However, there are two notable exceptions—tankers with steam turbine engines and container ships with diesel engines, both of which achieve relatively strong profitability on coastal routes.
-   While not universal, a clear trend emerges: most short-haul routes tend to generate lower profits, reinforcing the idea that **longer voyages often offer greater financial returns**.
:::
:::::

### 5.3 Performance over time

#### **5.3.1 Financial performance overview**

To provide an overview of financial performance over time, a line chart visualises the trends in profit, revenue, and cost. The top five months with the highest profit are highlighted with red points, along with their respective profit amounts.

```{r}
#| fig-width: 8
#| fig-height: 4
#| code-fold: true
#| code-summary: "Show the code"

# Extract month and year from the Date
ship_filter_month <- ship_filter %>%
  mutate(Month = floor_date(Date, "month"))

# Group by month and calculate total profit, cost, and revenue
monthly_totals <- ship_filter_month %>%
  group_by(Month) %>%
  summarise(
    Profit = sum(Profit, na.rm = TRUE),
    Op_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE)
  )

# Sort the data by Total_Profit in descending order and select the top 5 months
top_5_months <- monthly_totals %>%
  arrange(desc(Profit)) %>%
  slice_head(n = 5) %>%
  mutate(
    #Month_label = format(Month, "%m/%y"),  # Format date as mm/yy
         Profit_label = paste0("$", round(Profit, 2)))  # Create the label

# Reshape the data from wide to long format
monthly_long <- monthly_totals %>%
  pivot_longer(cols = c(Profit, Op_Cost, Revenue),
               names_to = "Type",
               values_to = "Value")

# Plot total profit, total cost, and total revenue over time
ggplot(monthly_long, aes(x = Month, y = Value, color = Type, group = Type)) +
  
  geom_line(size = 0.6) +  # Line plot for each variable
  geom_point(data = top_5_months, 
             aes(x = Month, y = Profit), 
             color = "red", size = 3.5, shape = 21, fill = "red",
             inherit.aes = FALSE) + # Prevent from inheriting "Type"
  geom_text(data = top_5_months, 
            aes(x = Month, y = Profit, label = Profit_label),
            color = "black", size = 3.5, vjust = -2, hjust = 0.5,
            inherit.aes = FALSE) +
  labs(title = "Profit, Cost, and Revenue Over Time",
       x = "Month",
       y = "Amount (1K USD)",
       color = "Type") +
    
  theme_light() +
  scale_color_manual(values = c("Profit" = "#f2cbd0", "Op_Cost" = "grey70", 
                                "Revenue" = "#86b3ba"),
                     guide = "none") +
  scale_x_date(labels = scales::date_format("%m/%y"), breaks = "1 month") +
  theme(plot.title = element_text(size = 14, face = "bold"),
        legend.position = "top",
        plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank()) +
  geomtextpath::geom_textline(
    aes(label = Type),
    linewidth = 1,
    fontface = "bold",
    size = 3,
    vjust = -.4,
    hjust = .5) 

```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   The top five months for profit are June, July, and October 2023, as well as March and June 2024.
-   Total profit fluctuates over time, but June 2024 outperformed June 2023 by 16.23%. This indicates an upward trend.
-   Profit, revenue, and cost follow similar patterns, with profit and revenue showing the closest resemblance.
:::
:::::

#### **5.3.2 Comparing Profit, Revenue, and Cost Across Ship Types**

To compare financial performance across different ship types, I further break down the analysis by plotting profit, cost, and revenue trends for each ship type. This allows for a closer look at whether different ship types follow similar patterns over time. The top three highest amounts for each ship type are highlighted with circular points.

```{r}
#| fig-width: 8
#| fig-height: 10
#| code-fold: true
#| code-summary: "Show the code"

###--------------- Plot profit
# Aggregate total monthly profit for each ship type
monthly_profit <- ship_filter %>%
  mutate(Month = floor_date(Date, "month")) %>%
  group_by(Month, Ship_Type) %>%
  summarise(Total_profit = sum(Profit, na.rm = TRUE), 
            .groups = "drop")

# Identify top 3 months for each type
top_3_months <- monthly_profit %>%
  group_by(Ship_Type) %>%
  slice_max(order_by = Total_profit, n = 3)

# Define colors
ship_type_colors <- c("#f2cbd0", "grey80", "grey40", "#9bc5cc")

# Plot profit over time for each ship type
p_line_pf <- ggplot(monthly_profit, 
      aes(x = Month, 
          y = Total_profit, 
          color = Ship_Type, 
          group = Ship_Type)) +
  geom_line(size = .8) + 
  geom_point(data = top_3_months, 
             aes(x = Month,
                 y = Total_profit,
                 inherit.aes = FALSE),
             size = 3, shape = 21,
             color = ship_type_colors[as.factor(top_3_months$Ship_Type)], 
             stroke = 1.5) +
  labs(title = "Monthly Profit Trends by Ship Type",
       x = "Month",
       y = "Total Profit (1KUSD)",
       color = "Ship Type") +
  scale_color_manual(values = ship_type_colors) +  
  scale_x_date(labels = scales::date_format("%m/%y"), breaks = "1 month") +
  theme_light() +
  theme(plot.title = element_text(size = 14, face = "bold"),
        legend.position = "top",
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        legend.title = element_blank(),
        plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank()) +
  guides(fill = "none")

###--------------- Plot cost 
# Aggregate total monthly cost for each ship type
monthly_cost <- ship_filter %>%
  mutate(Month = floor_date(Date, "month")) %>%
  group_by(Month, Ship_Type) %>%
  summarise(Total_cost = sum(Operational_Cost_USD, na.rm = TRUE), 
            .groups = "drop")

# Identify top 3 months for each type
top_3_months_cost <- monthly_cost %>%
  group_by(Ship_Type) %>%
  slice_max(order_by = Total_cost, n = 3)

# Define colors
ship_type_colors <- c("#f2cbd0", "grey80", "grey40", "#9bc5cc")

# Plot cost over time for each ship type
p_line_cost <- ggplot(monthly_cost, 
      aes(x = Month, 
          y = Total_cost, 
          color = Ship_Type, 
          group = Ship_Type)) +
  geom_line(size = .8, linetype = "twodash") + 
  geom_point(data = top_3_months_cost, 
             aes(x = Month,
                 y = Total_cost,
                 inherit.aes = FALSE),
             size = 3, shape = 21,
             color = ship_type_colors[as.factor(top_3_months_cost$Ship_Type)], 
             stroke = 1.5) +
  labs(title = "Monthly Cost Trends by Ship Type",
       x = "Month",
       y = "Total Cost (1KUSD)",
       color = "Ship Type") +
  scale_color_manual(values = ship_type_colors) +  
  scale_x_date(labels = scales::date_format("%m/%y"), breaks = "1 month") +
  theme_light() +
  theme(plot.title = element_text(size = 14, face = "bold"),
        legend.position = "top",
#        legend.background = element_rect(fill = "#fcf0cc", color = "#fcf0cc"),
        legend.title = element_blank(),
#       plot.background = element_rect(fill = "#fcf0cc"),
#        panel.background = element_rect(fill = "#fcf0cc"),
        panel.border = element_blank()) +
  guides(fill = "none")

###--------------- Plot revenue 
# Aggregate total monthly revenue for each ship type
monthly_rvn <- ship_filter %>%
  mutate(Month = floor_date(Date, "month")) %>%
  group_by(Month, Ship_Type) %>%
  summarise(Total_rvn = sum(Revenue_per_Voyage_USD, na.rm = TRUE), 
            .groups = "drop")

# Identify top 3 months for each type
top_3_months_rvn <- monthly_rvn %>%
  group_by(Ship_Type) %>%
  slice_max(order_by = Total_rvn, n = 3)

# Define colors
ship_type_colors <- c("#e0bcc0", "grey80", "grey40", "#86b3ba")

# Plot revenue over time for each ship type
p_line_rvn <- ggplot(monthly_rvn, 
      aes(x = Month, 
          y = Total_rvn, 
          color = Ship_Type, 
          group = Ship_Type)) +
  geom_line(size = .8, linetype = "dotted") + 
  geom_point(data = top_3_months_rvn, 
             aes(x = Month,
                 y = Total_rvn,
                 inherit.aes = FALSE),
             size = 3, shape = 21,
             color = ship_type_colors[as.factor(top_3_months_rvn$Ship_Type)], 
             stroke = 1.5) +
  labs(title = "Monthly Revenue Trends by Ship Type",
       x = "Month",
       y = "Total Revenue (1KUSD)",
       color = "Ship Type") +
  scale_color_manual(values = ship_type_colors) +  
  scale_x_date(labels = scales::date_format("%m/%y"), breaks = "1 month") +
  theme_light() +
  theme(plot.title = element_text(size = 14, face = "bold"),
        legend.position = "top",
        legend.background = element_rect(fill = "#f1f4f5", color = "#f1f4f5"),
        legend.title = element_blank(),
        plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank()) +
  guides(fill = "none") 

p_line_pf / p_line_cost / p_line_rvn 
 

```

::::: spgoals
::: spgoals-header
Insights
:::

::: spgoals-container
-   The four ship types exhibit distinct profit patterns over time. Bulk Carriers, Container Ships, and Tankers all recorded their highest profit in March 2024, while Fish Carriers peaked in June 2024.
-   Bulk Carriers and Fish Carriers had contrasting profit trends in August 2023 and January 2024. Each ship type hit its lowest profit in one of these months, while the other achieved one of its highest profits.
-   Fish Carriers experienced the most volatile costs over time, which may be linked to voyage frequency, as referenced in section 4.4.2.
:::
:::::

#### **5.3.3 Monthly Profit, Revenue, and Cost Trends by Ship Type**

The top 5 total profit by ship types are highlighted

```{r}
#| fig-width: 9
#| fig-height: 4
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)
# Extract month and year from the Date
ship_filter_month <- ship_filter %>%
  mutate(Month = floor_date(Date, "month"))

# Group by month and calculate total profit, cost, and revenue
monthly_mean_wc <- ship_filter_month %>%
  group_by(Month, Weather_Condition) %>%
  summarise(
    Profit = mean(Profit, na.rm = TRUE),
    Op_Cost = mean(Operational_Cost_USD, na.rm = TRUE),
    Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),
    .groups = "drop"
  ) 

# Sort the data by Total_Profit in descending order and select the top 5 months
top_5_months_wc <- monthly_mean_wc %>%
  arrange(desc(Profit)) %>%
  slice_head(n = 5) %>%
  mutate(
    #Month_label = format(Month, "%m/%y"),  # Format date as mm/yy
         Profit_label = paste0("$", round(Profit, 2)))  # Create the label

# Reshape the data from wide to long format
monthly_long_wc <- monthly_mean_wc %>%
  pivot_longer(cols = c(Profit, Op_Cost, Revenue),
               names_to = "Type",
               values_to = "Value")

# Plot total profit, total cost, and total revenue over time
ggplot(monthly_long_wc, aes(x = Month, y = Value, color = Type, group = interaction(Weather_Condition, Type))) +
  geom_line(size = 0.3) +  # Line plot for each variable
  geom_point(data = top_5_months_wc, 
             aes(x = Month, y = Profit), 
             color = "purple", size = 3, shape = 21, fill = "purple",
             inherit.aes = FALSE) + # Prevent from inheriting "Type"
  geom_text(data = top_5_months_wc, 
            aes(x = Month, y = Profit, label = Profit_label),
            color = "black", size = 3.5, vjust = -2, hjust = 0.5,
            inherit.aes = FALSE) +
  labs(title = "Profit, Cost, and Revenue Over Time by Weather",
       x = "Month",
       y = "Amount (1K USD)",
       color = "Type") +
  coord_cartesian(ylim = c(100, 610)) +
    
  theme_light() +
  scale_color_manual(values = c("Profit" = "#f2cbd0", "Op_Cost" = "grey70", 
                                "Revenue" = "#9bc5cc"),
                     guide = "none") +
  scale_x_date(labels = scales::date_format("%m/%y"), breaks = "1 month") +
  theme(plot.title = element_text(size = 14, face = "bold"),
        legend.position = "top"
        ) +
  theme(plot.background = element_rect(fill = "#f1f4f5"),
        panel.background = element_rect(fill = "#f1f4f5"),
        panel.border = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  geomtextpath::geom_textline(
    aes(label = Type),
    linewidth = 1,
    fontface = "bold",
    size = 2,
    vjust = -.4,
    hjust = .5) +
  facet_wrap(~ Weather_Condition, scales = "free_y") #facet by ship type
  
```

::::: spgoals
::: spgoals-header
Observations
:::

::: spgoals-container
-   The relationship between weather conditions and voyage profitability reveals intriguing patterns. In March 2024, voyages under calm weather saw a significant surge in profit, while moderate weather conditions in May also recorded strong performance. Interestingly, rough weather conditions experienced three distinct profit peaks throughout the year, suggesting that **challenging conditions do not always equate to lower profitability**.
-   On the cost side, monthly operational expenses remained relatively stable across all weather conditions. Notably, costs under moderate weather showed a gradual decline, possibly indicating improved efficiency or adjustments in operations.
-   A strong correlation between revenue and profit is evident, with profit peaking at different times of the year regardless of weather conditions. However, one trend remains consistent—whenever revenue rises, profit follows suit, reinforcing the **impact of demand and pricing on overall voyage performance**.
:::
:::::

## 6 Summary

This study was conducted to understand the financial performance among different ship types using a collection of internal and external variables, as well as to undertand the profit and ship performance may be affected by other factors, such as weather conditions, energy efficiency, engine type, route type, cargo weight, etc. A variety of plots were used to explore the patterns and trends in a close look to the details to derive insights. The key findings are as follows:

-   **Profitability consistency across ship types**

    Statistical analysis (Welch’s ANOVA, p-value = 0.84) indicates no significant difference in profit performance across ship types, suggesting that profitability is influenced by factors beyond vessel classification.

-   **Engine type and maintenance status affect profitability**

    Ships with diesel and steam turbine engines in a critical maintenance state tend to show higher average profits, while those using HFO engines lag behind. This suggests that frequent voyages with limited maintenance time may boost short-term profitability. Fish carriers and tankers also show varying profit patterns based on maintenance status, indicating a differentiated impact.

-   **Weather conditions and profitability patterns**

    Rough weather conditions do not always result in lower profitability. Certain ship and engine combinations show bimodal profit distributions under specific weather conditions. For example, container ships with HFO engines show a bimodal pattern in rough weather, while fish carriers with diesel or steam turbines exhibit a similar trend in calm weather.

-   **Route type and profitability variation**

    Long-haul routes typically yield higher profits than coastal and short-haul routes. However, tankers with steam turbine engines and container ships with diesel engines perform relatively well on coastal routes. Conversely, container ships with HFO engines show lower average profits on long-haul trips, while tankers with HFO engines exhibit a right-skewed profit distribution on coastal routes.

-   **Operational metrics influence financial performance**

    -   *Load Capacity*: Higher load percentages and cargo weights correlate with improved profits across ship types, with container ships showing the sharpest increase in load percentage over time. *Turnaround Time*: Longer turnaround times negatively impact profitability, particularly for container ships and tankers.
    -   *Energy Efficiency*: Tankers show a positive correlation between energy efficiency and profitability, emphasizing the importance of fuel management.

-   **Ship type-specific performance trends**

    -   *Bulk Carriers*: Exhibit longer turnaround times across all routes and lower cargo weight concentration on transoceanic trips.
    -   *Fish Carriers*: Show volatile cost patterns, frequent bimodal distance distributions on long-haul routes, and longer turnaround times on short-haul voyages.
    -   *Container Ships*: Demonstrate the highest energy efficiency in calm weather and the high average cargo weight on coastal and transoceanic routes.
    -   *Tankers*: Maintain steadier voyage frequencies and show positive profitability correlations with energy efficiency.

-   **Time-based PProfit trends and market growth**

    The top five months for profit were June, July, and October 2023, as well as March and June 2024. Profit, revenue, and costs followed similar patterns, with June 2024 outperforming June 2023 by 16.23%, indicating an overall upward trend in profitability.

-   **weather and cost stability**

    Operational costs remained stable across weather conditions, with moderate weather costs gradually declining. This reflected operational efficiency improvements. Despite slight fewer voyages in rough weather (\~30% of total), profit peaks were observed in three distinct periods.

-   **Multimodal distributions in operational factors**

    Various performance metrics exhibit multimodal distributions rather than following a normal pattern, particularly in distance traveled on long-haul routes and engine power across ship types. These variations indicate that operational strategies differ significantly depending on ship type and route.

[**Future work & suggestions**]{style="color:##a5c7a7;"}

-   Work with data of longer duration: The dataset provided data for a year's time frame, which may not be enough to conclude seasonal trends. More data with a longer time series will help navigate this.
-   More variables for exploration: Existing variables helped abstract some insights. More data and information needed to understand the trending behaviours, such as manufacture date, series number of ship, stops, restrictions of ship load, capacity, goods, size, logistics, pricing etc.
-   Perform other analysis analysis: Using statistical analysis, geospatial analysis, exploratory, predictive modeling methods to perform analytics to derive more insights.

## 7 References

Kam, T. S. (2025). *R for visual analytics*. Retrieved from <https://r4va.netlify.app/>

Scherer, C. (2025). *Exciting data visualizations with ggplot2 extensions*. Retrieved from <https://z3tt.github.io/exciting-extensions/slides.html#/course-materials>
