---
title: "Hands-on_Ex01"
author: "Cathy Chu"
date-modified: "last-modified" 
execute:
  echo: true 
  eval: true 
  warning: false 
  freeze: true  
---

## A Layered Grammar of Graphics: ggplot2 methods

### 1.2 Getting started

#### **1.2.1 Installing and loading the required libraries**

🔑 **pacman** package has been installed in the workshop, using the following code.

```{r}
pacman::p_load(tidyverse)
```

#### **1.2.2 Importing data**

*read_csv* is a function of **readr** package, which is from the tidyverse package.

The dataset Exam_data.csv, containing exam grades of P3 students from a Singapore local school is imported into R environment.

🔑 The code chunk below was used to import the dataset.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

|            |           |            |          |           |             |             |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| **ID**     | **CLASS** | **GENDER** | **RACE** | **MATHS** | **ENGLISH** | **SCIENCE** |
| Student321 | 3I        | Male       | Malay    | 21        | 9           | 15          |
| Student305 | 3I        | Female     | Malay    | 24        | 22          | 1           |

: {.striped .hover}

------------------------------------------------------------------------

### **1.3 Introducing ggplot**

**ggplot2** is part of the tidyverse family specially designed for visual exploration and communication. It creates graphics based on The Grammar of Graphics.

::: callout-tip
## Cheatsheet for ggplot2 ([Learn more](https://ggplot2.tidyverse.org/#cheatsheet))

![](images/data-visualization-01.pdf){fig-align="center" width="700" height="350"}
:::

#### **1.3.1 R Graphics vs. ggplot**

🔑 Observe how R Graphics and ggplot are different when plotting a simple histogram. An example below:

::: panel-tabset
## R Grahpics

```{r}
hist(exam_data$MATHS)
```

## ggplot2

```{r}
ggplot(data=exam_data, aes(x = MATHS)) + 
  geom_histogram(bins=10,
                 boundary=100,
                 color="snow4",
                 fill="mistyrose") +
  ggtitle("Distribution of Math Scores")
```
:::

::: callout-tip
## R colors

Color codes for R as a resource.

![](images/Rcolor.pdf){fig-align="center" width="700" height="350"}
:::

------------------------------------------------------------------------

### 1.4 Grammar of Graphics

❓ **`What is a statistical graphic?`**

Understanding the principles of grammar of graphics: a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers.

It was introduced by Leland Wlkinson (1999). It defines the rules of structural mathematical and aesthetic elements into a meaningful graph.

::: callout-note
Two principles in grammar of graphics are:

1.  **`Graphics` = distinct layers of grammatical elements**
2.  **`Meaningful plots` through aesthetic mapping**
:::

::: callout-note
**A good grammar of graphics has the following characters:**

1.  Allows us to gain insights into the composition of complicated graphics.
2.  Reveals unexpected connections between seemingly different graphics (Cox 1978).
3.  Provides a strong foundation for understanding a diverse range of graphics.
4.  May also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.
:::

#### 1.4.1 A Layered Grammar of Graphics

**ggplot2** is an implementation of Leland Wilkinson's Grammar of Graphics. Figure below shows the seven grammars of ggplot2.

![](images/grammar_of_graphics.jpg){fig-align="center" width="1200"}

Reference: Hadley Wickham (2010) ["A layered grammar of graphics."](https://vita.had.co.nz/papers/layered-grammar.html) *Journal of Computational and Graphical Statistics*, vol. 19, no. 1, pp. 3--28.

::: callout-important
A short description of each building blocks:

-   **`Data`**: the dataset being plotted.

-   `Aesthetic`: takes attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   `Geometrics`: the visual elements used for our data, such as point, bar or line.

-   `Facets`: split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).

-   `Statistics`: statistical transformations that summarise data (e.g. mean, confidence intervals).

-   `Coordinate systems`: define the plan on which data are mapped on the graphic.

-   `Themes`: modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background.
:::

------------------------------------------------------------------------

### 1.5 Essential Grammatical Elements in ggplot2: data

🔑 Calling the `ggplot()` function, using the code chunk below:

```{r}
ggplot(data=exam_data)
```

::: callout-note
-   A blank canvas appears.
-   `ggplot` initializes a ggplot object.
-   The data argument defines the dataset to be used for plotting.
-   If the dataset is not aleady a data.frame, it will be converted to one by `fortify()`.
:::

------------------------------------------------------------------------

### 1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings

The aesthetic mappings take attributes of the data and use them to influence visual characteristics, such as *position*, *colour*, *size*, *shape*, or *transparency*. Each visual characteristic can this encode an aspect of the data and be used to convey information.

-   All aesthetic of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) function call.

::: column-margin
🚀 Usage `aes(x,y,…)`

The names for x and y aesthetics are typically omitted because they are so common; all other aesthetics must be named.
:::

-   Each *geom* layer can have its own **aes** specification.

🔑 Code chunk below adds the aesthetic element into the plot.

::: {.column-margin}
🚀 To display [line numbers](::: {.column-margin} to display line numbers alongside the code block, can use the code-line-numbers attribute. For example, {.r code-line-numbers="true"} :::) alongside the code block, can use the `code-line-numbers attribute.`

For example, `{.r code-line-numbers="true"}`
:::

```{.r code-line-numbers="true"}
ggplot(data=exam_data,
       aes(x = MATHS))

```

::: callout-note
-   ggplot includes the x-axis and the axis's label.
:::

::: {.callout-tip title="Aesthetic specifications"}

[Resources](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)

:::

------------------------------------------------------------------------

### 1.7 Essential Grammatical Elements in ggplot2: geom
