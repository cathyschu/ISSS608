---
title: "Hands-on_Ex03_1"
author: "Cathy Chu"
date-modified: "last-modified" 
execute:
  echo: true 
  eval: true 
  warning: false 
  freeze: true
---

## **Programming Interactive Data Visualisation with R**

## [3.1]{style="color:skyblue"} Learning Outcome

In this hands-on exercise, you will learn how to create interactive data cisualisation by using functions provided by **ggiraph** and **plotlyr** packages.

## [3.2]{style="color:skyblue"} Getting Started

First, write a code chunk to check, install and launch t he following R packages:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making 'ggplot' graphics interactive.
-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs
-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.
-   [**tidyverse**](https://www.tidyverse.org/)**,** a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.

🔑 The code chunk below will be used to accomplish the task.

```{r, echo=FALSE}
pacman::p_load(ggiraph, plotly,
               patchwork, DT, tidyverse)
```

## [3.3]{style="color:skyblue"} Importing Data

In this section, E*xam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.

The code chunk below `read_csv()` of **readr** package is used to import Exam_data.csv data file into R and save it as an tibble data frame called `exam_data`.

```{r}
library(readr)
exam_data <- read_csv("data/Exam_data.csv")
```

## [3.4]{style="color:skyblue"} Interactive Data Visualisation - ggiraph methods

[ggiraph](https://davidgohel.github.io/ggiraph/) ![](images/logo.png){width="50"} is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with [ggplot geometries](https://davidgohel.github.io/ggiraph/reference/#section-interactive-geometries) that can understand three arguments:

-   **Tooltip:** a column of data-sets that contain tooltips to be displayed when the mouse is over elements.
-   **Onclick:** a column of data-sets that contain a JavaScript function to be executed when elements are clicked.
-   **Data_id:** a column of data-sets that contain an id to be associated with elements.

::: column-margin
🎯 Onclick, Data_id
:::

If it is used within a shiny application, elements associated with an id(data_id) can be selected and manipulated on client and server sides. Refer to this [article](https://davidgohel.github.io/ggiraph/articles/offcran/shiny.html) for more detail explanation.

::: column-margin
❗[article](https://davidgohel.github.io/ggiraph/articles/offcran/shiny.html) not found.
:::

### [3.4.1]{style="color:skyblue"} Tooltip effect with *tooltip* aesthetic

Below shows a typical code chunk to plot an interactive statistical graph by using **ggiraph** package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) of **ggiraph** will be used to create an interactive svg object.

```{r}
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

Notice that two steps are involved.

First, an interactive vrsion of ggplot2 geom (i.e. [geom_dotplot_interactive()](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will be used to create the basic graph. Then, [girafe()](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.

## [3.5]{style="color:skyblue"} Interactivity

By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.

```{r echo=FALSE}
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot",
    fill = "pink",
    color = "gray") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

### [3.5.1]{style="color:skyblue"} Displaying multiple information on tooltip

🔑 The content of the tooltip can be customised by including a list object as shown in the code chunk below.

```{r}
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID,
  "\n Class =", exam_data$CLASS))

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks=NULL)

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)

```

The first three lines of codes in the code chunk create a new field called *tooltip*. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.

## [3.6]{style="color:skyblue"} Interactivity - customisation

By hovering the mouse pointer on a data point of interest, the student's ID and CLASS are displayed.

```{r, echo = FALSE}
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID,
  "\n Class =", exam_data$CLASS))

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot",
    fill = "skyblue",
    color = "gray") +
  scale_y_continuous(NULL,
                     breaks=NULL)

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)

```

### [3.7.1]{style="color:skyblue"} Customising Tooltip style

Code chunk below uses [`opts_tooltip()`](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of ggiraph to customise tooltip rendering by adding css declarations.

## [3.7]{style="color:skyblue"} Interactive Data Visualisation - plotly methods!

## [3.8]{style="color:skyblue"} Interactive Data Visualisation - crosstalk methods!

## [3.9]{style="color:skyblue"} Reference
