[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. We will learn the following in this chapter:\n\nPlot funnel plots using funnelPlotR package\nPlot static funnel plot with ggplot2 package\nplot interactive funnel plot by using both plotly R and ggplot2 packages\n\n\n\n\nFour R packages will be used in this exercise:\n\nreadr: import csv to R\nFunnerPlotR: create funnel plot\nggplot2: create funner plot manually\nknitr: build static html table\nplotly: create interactive funner plot\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nWe use a new set of data for this exercise - COVID-19_DKI_Jakarta as of 31st July 2021 from Open Data Covid-19 Provinsi DKI Jakarta portal. In this exercise, we will compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan).\nFirst, we import the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26\n\n\n\n\n\n\nFunnelPlotR package uses ggplot to generate funner plots. It requires numerator (events of interest), denominator (population considered) and group. The key arguments selected for customisation are:\n\n\nFunnelPlotR Installation\ninstall.packages(\"FunnelPlotR\")\n\nlimit: plot limits (95 or 99)\nlabel_outliers: to label outliers (true or false)\nPoisson_limits: to add Poisson limits to the plot\nOD_adjust: to add overdispersed limits to the plot\nxrange and yrange: to specify the range to display for axes, acts like a zoom function\nOther aesthetic components, such as graph title, axis labels etc.\n\n\n\nThe code below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\ngroup in this function is different from the scatterplot. Here is defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\nAdjust code to make over the previous plot.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\n+data_type argument is used to change from default “SR” to “PR” (i.e., proportions).\n+xrange and yrange are used to set the range of x-axis and y-axis.\n\n\n\n\n\n\nMakeover 2 is to add titles for x axis and y axis.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\",\n  \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from code\n\n\n\n\nlabel = NA argument is to remove the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\n\n\nIn this exercise, we will build funnel plots step-by-step with ggplot2. This will enhance the skills using ggplot2 to customise specialised data visualisation like Funnel Plot.\n\n\nTo plot the funnel plot from scratch:\n\ndrive cumulative death rate\nstandard error of cumulative death rate\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death/Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean is computed by using the code below:\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nNext, we will compute the lower and upper limits for 95% Confidence Interval.\n\n\nShow the code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\ndfCI &lt;- data.frame(number.ll95, number.ul95, \n                   number.ll999, number.ul999,\n                   number.seq, fit.mean)\n\n\n\n\n\n\n\n\nNote\n\n\n\n95% of the data falls within 1.96 standard deviations of the mean.\n99.9% of the data falls within 3.29 standard deviations of the mean.\n\n\n\n\n\nUse the following code to plot a static funnel plot with ggplot2.\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label = `Sub-district`),\n             alpha = 0.4) +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll999),\n            size = 0.4,\n            colour = \"skyblue\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul999),\n            size = 0.4,\n            colour = 'skyblue') +\n  geom_hline(data = dfCI,\n             aes(yintercept = fit.mean),\n             size = 0.4,\n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") +\n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n\nto make the funnel plot interactive, we can use ggplot2 together with ggplotly() from plotly R package.\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n                        tooltip = c(\"label\",\n                                    \"x\",\n                                    \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex04_4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#overview",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. We will learn the following in this chapter:\n\nPlot funnel plots using funnelPlotR package\nPlot static funnel plot with ggplot2 package\nplot interactive funnel plot by using both plotly R and ggplot2 packages",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex04_4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "Four R packages will be used in this exercise:\n\nreadr: import csv to R\nFunnerPlotR: create funnel plot\nggplot2: create funner plot manually\nknitr: build static html table\nplotly: create interactive funner plot\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex04_4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#import-data",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "We use a new set of data for this exercise - COVID-19_DKI_Jakarta as of 31st July 2021 from Open Data Covid-19 Provinsi DKI Jakarta portal. In this exercise, we will compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan).\nFirst, we import the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex04_4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnelplotr-methods",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funner plots. It requires numerator (events of interest), denominator (population considered) and group. The key arguments selected for customisation are:\n\n\nFunnelPlotR Installation\ninstall.packages(\"FunnelPlotR\")\n\nlimit: plot limits (95 or 99)\nlabel_outliers: to label outliers (true or false)\nPoisson_limits: to add Poisson limits to the plot\nOD_adjust: to add overdispersed limits to the plot\nxrange and yrange: to specify the range to display for axes, acts like a zoom function\nOther aesthetic components, such as graph title, axis labels etc.\n\n\n\nThe code below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\ngroup in this function is different from the scatterplot. Here is defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\nAdjust code to make over the previous plot.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\n+data_type argument is used to change from default “SR” to “PR” (i.e., proportions).\n+xrange and yrange are used to set the range of x-axis and y-axis.\n\n\n\n\n\n\nMakeover 2 is to add titles for x axis and y axis.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\",\n  \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from code\n\n\n\n\nlabel = NA argument is to remove the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex04_4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "In this exercise, we will build funnel plots step-by-step with ggplot2. This will enhance the skills using ggplot2 to customise specialised data visualisation like Funnel Plot.\n\n\nTo plot the funnel plot from scratch:\n\ndrive cumulative death rate\nstandard error of cumulative death rate\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death/Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean is computed by using the code below:\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nNext, we will compute the lower and upper limits for 95% Confidence Interval.\n\n\nShow the code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\ndfCI &lt;- data.frame(number.ll95, number.ul95, \n                   number.ll999, number.ul999,\n                   number.seq, fit.mean)\n\n\n\n\n\n\n\n\nNote\n\n\n\n95% of the data falls within 1.96 standard deviations of the mean.\n99.9% of the data falls within 3.29 standard deviations of the mean.\n\n\n\n\n\nUse the following code to plot a static funnel plot with ggplot2.\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label = `Sub-district`),\n             alpha = 0.4) +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll999),\n            size = 0.4,\n            colour = \"skyblue\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul999),\n            size = 0.4,\n            colour = 'skyblue') +\n  geom_hline(data = dfCI,\n             aes(yintercept = fit.mean),\n             size = 0.4,\n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") +\n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n\nto make the funnel plot interactive, we can use ggplot2 together with ggplotly() from plotly R package.\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n                        tooltip = c(\"label\",\n                                    \"x\",\n                                    \"y\"))\nfp_ggplotly",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex04_4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#references",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex04_4"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01.html",
    "title": "In-class_Ex01",
    "section": "",
    "text": "View my Tableau profile",
    "crumbs": [
      "![](images/home.svg)",
      "In-class Exercise",
      "In-class_Ex1"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#dashboard-2-sync-dashboards",
    "href": "In-class_Ex/In-class_Ex03.html#dashboard-2-sync-dashboards",
    "title": "In-class_Ex03",
    "section": "Dashboard 2: Sync dashboards",
    "text": "Dashboard 2: Sync dashboards\nClick on one state in the dotplot, the corresponding state Sales and Profit will be highlighted in the barcharts.",
    "crumbs": [
      "![](images/home.svg)",
      "In-class Exercise",
      "In-class_Ex3"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#dashboard-3-interactive-visualisation-by-month-and-year",
    "href": "In-class_Ex/In-class_Ex03.html#dashboard-3-interactive-visualisation-by-month-and-year",
    "title": "In-class_Ex03",
    "section": "Dashboard 3: Interactive Visualisation by Month and Year",
    "text": "Dashboard 3: Interactive Visualisation by Month and Year\nLeverage the filters on the right to observe the history using animation. Click on one dot (state), and play the animation button on the right.",
    "crumbs": [
      "![](images/home.svg)",
      "In-class Exercise",
      "In-class_Ex3"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#dashboard-4-story",
    "href": "In-class_Ex/In-class_Ex03.html#dashboard-4-story",
    "title": "In-class_Ex03",
    "section": "Dashboard 4: Story",
    "text": "Dashboard 4: Story\nUse a Story board to compile a worksheet and/or a dashboard to observe a roadmap.",
    "crumbs": [
      "![](images/home.svg)",
      "In-class Exercise",
      "In-class_Ex3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started.",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started.",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "Importing data",
    "text": "Importing data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\") #old way - utility &gt; avoid using this.\n\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n\npopdata_long &lt;- popdata_fat %&gt;% \n  #what is %&gt;%? allows to combine functions together. e.g. call this file and do pivot_longer.\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\") \n\nCreate rds file\n\nwrite_rds(popdata_long, \"data/rds/popdata_long.rds\") #reading rds is faster.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\nselect, filter, arrange, mutate (compute), group_by, summarise, join.\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter(`Property Type` == \"Condominium\" | \n           `Property Type` == \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\nPutting all together",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, I will create animated data visualisation with gganimate and plotly r packages. At the same time, I will learn how to 1/ reshape data by using tidyr package, and 2/ process, wrangle and transform datawith dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames - like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore starting making animated graphs, think of the question first:\nDoes it make sense to go through the effort?\nIf you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly: R library for plotting interactive statistical graphs.\ngganimate: a ggplot extension for creating animated statistical graphs.\ngifski: converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminer: an excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      shee=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() show in the code chunk below.\n\n\n❓ mutate_at() links back to the same page in textbook?\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how to positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, - transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year) - ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n🦖 PracticeOriginal\n\n\n🦖 Different theme and title, ease_aes\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'The animated bubble chart | Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('cubic-in-out') +\n  theme_dark()\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same ID (which helps facilitate object constancy).\n\n\nIn this sub-section, we will learn how to create an animated bubble plot by using ggplotly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_bw()\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme_bw()\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\nNotice that although show.legend=FALSE argument was used, the legend still appears on the plot.\nTo overcome this problem, `theme(legend.position=‘none’) should be used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nIn this sub-section, we will learn how to create an animated bubble plot with plot_ly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Adjusted bubble sizes\n\nbp2 &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,500),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by a senior\n\nBuilding an animation step-by-step with gganimate\n\nCreating a composite gif with multiple gganimate panels\n\n\n\n\n📝 Used Tableau to design a prototype, then implemented with gganimate.\n\n🎯 Try to use the methods to implement an animation.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#overview",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, I will create animated data visualisation with gganimate and plotly r packages. At the same time, I will learn how to 1/ reshape data by using tidyr package, and 2/ process, wrangle and transform datawith dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames - like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore starting making animated graphs, think of the question first:\nDoes it make sense to go through the effort?\nIf you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly: R library for plotting interactive statistical graphs.\ngganimate: a ggplot extension for creating animated statistical graphs.\ngifski: converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminer: an excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      shee=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() show in the code chunk below.\n\n\n❓ mutate_at() links back to the same page in textbook?\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how to positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, - transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year) - ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n🦖 PracticeOriginal\n\n\n🦖 Different theme and title, ease_aes\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'The animated bubble chart | Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('cubic-in-out') +\n  theme_dark()\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same ID (which helps facilitate object constancy).\n\n\nIn this sub-section, we will learn how to create an animated bubble plot by using ggplotly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_bw()\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme_bw()\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\nNotice that although show.legend=FALSE argument was used, the legend still appears on the plot.\nTo overcome this problem, `theme(legend.position=‘none’) should be used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nIn this sub-section, we will learn how to create an animated bubble plot with plot_ly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Adjusted bubble sizes\n\nbp2 &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,500),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#reference",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by a senior\n\nBuilding an animation step-by-step with gganimate\n\nCreating a composite gif with multiple gganimate panels\n\n\n\n\n📝 Used Tableau to design a prototype, then implemented with gganimate.\n\n🎯 Try to use the methods to implement an animation.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#learning-outcome",
    "title": "Hands-on_Ex03_1",
    "section": "3.1 Learning Outcome",
    "text": "3.1 Learning Outcome\nIn this hands-on exercise, you will learn how to create interactive data cisualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "title": "Hands-on_Ex03_1",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch t he following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n🔑 The code chunk below will be used to accomplish the task.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#importing-data",
    "title": "Hands-on_Ex03_1",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nlibrary(readr)\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on_Ex03_1",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\n\n\n🎯 Onclick, Data_id\nIf it is used within a shiny application, elements associated with an id(data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n❗article not found.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved.\nFirst, an interactive vrsion of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "title": "Hands-on_Ex03_1",
    "section": "3.5 Interactivity",
    "text": "3.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\n🔑 The content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class =\", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---customisation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---customisation",
    "title": "Hands-on_Ex03_1",
    "section": "3.6 Interactivity - customisation",
    "text": "3.6 Interactivity - customisation\nBy hovering the mouse pointer on a data point of interest, the student’s ID and CLASS are displayed.\n\n\n\n\n\n\n\n3.7.1 Customising Tooltip style\n🔑 Code chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering by adding css declarations.\ntooltip_css &lt;- \"background-color: pink;  #&lt;&lt;\nfront-style:bold; color: #fff;\" #&lt;&lt;\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\nNotice that the background colour of the tooltip is pink and the font colour is white and bold.\n\n\n\n\n\n\n\n\n❓ How to change tooltip fonts?\n❓ Text to appear between code chunk and charts\nRefer to Customizing girafe objects to learn more about how to customise ggriaph objects. (link is not working as of Jan 16 2025)\n\n\n3.6.2 Displaying statistics on tooltip\n🔑 Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores: \", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                  aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = \"light blue\"\n              ) + \n              stat_summary(aes(y = MATHS),\n                fun.data = mean_se,\n                geom = \"errorbar\", width = 0.2, size = 0.2\n              )\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\n🔑 Code chunk below shows the second interactive feature of ggiraph, namely data_id.\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”\n\n\n\n\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id=CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse hover.\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the css customisation request are encoded directly.\n\n\n\n\n3.6.5 Combining tooltip and hover effect\n🔑 There are time when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS, #tooltip here\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #2020202;\"),\n    opts_hover_inv(css = \"opacity:0.2\")\n  )\n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\n🔑 The code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID)) #onclic link here\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n❓ string column in the dataset\n\n\n3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\n🐳 Note that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n🦄 The goal of patchwork is to make it ridiculously simple to combine separate ggplots into the same graphic. As such it tries to solve the same problem as gridExtra::grid.arrange() and cowplot::plot_grid but using an API that incites exploration and iteration, and scales to arbitrarily complex layouts.\np1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID,),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) + #patchwork here\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       ))\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on_Ex03_1",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\n🔑 The tabset below shows an example of a basic interactive plot created with plot_ly().\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data=exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data=exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplot().\n\nPlotCode chunk🦖 Practice\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\nNotice that the only extra line needed in the code chunk is ggplotly()\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n3.7.4 Coordinated multiple views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatter plots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\n\n🦄 highlight_key(): This function simply creates an object of class crosstalk::SharedData. The reason it exists is to make it easier to teach others how to leverage its functionality in plotly. It also makes it more discoverable if one is already aware of highlight.\n🎯 Read more on subplot()\n\n\nPlotCode chunk🦖 Practice I🦖 Practice II\n\n\n\n\n\n\n\n\n\nHover over on a data point in one of the scatterplots. A tooltip will appear and show its scores.\nClick on a data point in one of the scatterplots, and the corresponding point in the other plot will appear.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = GENDER)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE,\n                color = GENDER)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE,\n                color = RACE)) +\n  geom_point(size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight_key() simply creates object of class crosstalk::SharedData.\nLearn more about crosswalk.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on_Ex03_1",
    "section": "3.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript Library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#reference",
    "title": "Hands-on_Ex03_1",
    "section": "3.9 Reference",
    "text": "3.9 Reference\n\n3.9.1 ggiraph\nThis link provides online version of the reference gude and several useful articles. Use this link to download the PDF version of the reference guide.\n\nHow to plot with ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to create interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting started with Plotly in R\nA collection of plotly R graphs are available via this [link]\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link]\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nA interesting implementation of gganimate by SMU senior: How has Singapore changed since 2011?\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex03_1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, one will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package.\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages; and\nplot composite figure by combing ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nIn this exercise, besides tidyverse, four R packages will be used.\nThey are:\n\nggrepel: a R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: a R package provides some extra themes, geoms, and scales for ggplot.\nhrbrthemes: a R package provides typographu-centric themes and theme components for ggplot2.\npatchwork: a R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto the working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse) #all packages are then installed.\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyversepackage.\n\nlibrary(readr)\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are ID, CLASS, GENDER and RACE.\nThe continuous attributes are MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n🦖 PracticePlotCode\n\n\n🦖 Used colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID,\n                 colour = GENDER), #added colours\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in the examples below.\n\n\n\n\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() with geom_label_repel().\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Applied colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID,\n                       colour = GENDER), #colour for gender\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\nggplot2 comes with eight built-in themes. They are:\ntheme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), theme_void().\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Applied theme_light() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n🦖 Applied theme_dark() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"skyblue\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n🦄 Refer to this link to learn more about ggplot2 Themes\n\n\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_stata()\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\",\n                 linewidth = 0.3) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\nIt also provides some extra geoms and scales fpr ggplot2. Consult this vignette to learn more. *Link is broken as of Jan 19.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n🦖 PracticePlotCode\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"pink\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Display English scores.\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n              \n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18.\nbase_size argument is used to increase the default axis label to 15.\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\nNext -\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\n\n\nLastly, we will draw a scatterplot for English score vs Maths score by the plot below:\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist().\n\np100 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") +\n  theme_economist() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"))\np100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np99 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") \np99\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package . The extension called patchwork is specially designed for combining separate ggplot 2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here is the general syntax that combines:\n\nTwo-column layout using the Plus sign +.\nParenthesis () to create a subplot group.\nTwo-row layout using the Division design /\n\n\n\n\nFigure in the tabset below shows a a composite of two histograms created using patchwork. Code is pretty simple.\n\n🦖 PracticePlotCode\n\n\n\npatchwork &lt;- p1 + p2\npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using: - “/” operator to stack two ggplot2 graphs - “|” operator to place the plots beside each other - “()” operator to define the sequence of the plotting.\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Changed the layout.\n\np3 | ( p2 / p1)\n\n\n\n\n\n\n\n\n\n\n🦖 Used theme_economist()\n\npatchwork &lt;- p3 | (p2 / p1)\npatchwork & theme_economist() +\n  theme(axis.title = element_text(size = rel(1)),\n        axis.text = element_text(size = 8))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n🦄 Learn more with Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n🦖 PracticePlotCode\n\n\n🦖 Changed level tag and used a new theme theme_stata()\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'A') + \n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist() and altered the position of the top layer plot.\n\np3 + theme_economist() +\n  inset_element(p1,\n                   left = 0.5,\n                   bottom = 0,\n                   right = 1,\n                   top = 0.3) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\n🦖 PracticePlotCode\n\n\nUsed theme_stata() and changed layout.\n\npatchwork &lt;- p3 | (p1 / p2) \npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex02"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, one will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package.\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages; and\nplot composite figure by combing ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex02"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this exercise, besides tidyverse, four R packages will be used.\nThey are:\n\nggrepel: a R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: a R package provides some extra themes, geoms, and scales for ggplot.\nhrbrthemes: a R package provides typographu-centric themes and theme components for ggplot2.\npatchwork: a R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto the working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse) #all packages are then installed.\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyversepackage.\n\nlibrary(readr)\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are ID, CLASS, GENDER and RACE.\nThe continuous attributes are MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex02"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n🦖 PracticePlotCode\n\n\n🦖 Used colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID,\n                 colour = GENDER), #added colours\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in the examples below.\n\n\n\n\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() with geom_label_repel().\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Applied colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID,\n                       colour = GENDER), #colour for gender\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex02"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "ggplot2 comes with eight built-in themes. They are:\ntheme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), theme_void().\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Applied theme_light() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n🦖 Applied theme_dark() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"skyblue\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n🦄 Refer to this link to learn more about ggplot2 Themes\n\n\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_stata()\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\",\n                 linewidth = 0.3) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\nIt also provides some extra geoms and scales fpr ggplot2. Consult this vignette to learn more. *Link is broken as of Jan 19.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n🦖 PracticePlotCode\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"pink\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Display English scores.\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n              \n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18.\nbase_size argument is used to increase the default axis label to 15.\ngrid argument is used to remove the x-axis grid lines.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex02"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\nNext -\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\n\n\nLastly, we will draw a scatterplot for English score vs Maths score by the plot below:\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist().\n\np100 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") +\n  theme_economist() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"))\np100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np99 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") \np99\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package . The extension called patchwork is specially designed for combining separate ggplot 2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here is the general syntax that combines:\n\nTwo-column layout using the Plus sign +.\nParenthesis () to create a subplot group.\nTwo-row layout using the Division design /\n\n\n\n\nFigure in the tabset below shows a a composite of two histograms created using patchwork. Code is pretty simple.\n\n🦖 PracticePlotCode\n\n\n\npatchwork &lt;- p1 + p2\npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using: - “/” operator to stack two ggplot2 graphs - “|” operator to place the plots beside each other - “()” operator to define the sequence of the plotting.\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Changed the layout.\n\np3 | ( p2 / p1)\n\n\n\n\n\n\n\n\n\n\n🦖 Used theme_economist()\n\npatchwork &lt;- p3 | (p2 / p1)\npatchwork & theme_economist() +\n  theme(axis.title = element_text(size = rel(1)),\n        axis.text = element_text(size = 8))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n🦄 Learn more with Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n🦖 PracticePlotCode\n\n\n🦖 Changed level tag and used a new theme theme_stata()\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'A') + \n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist() and altered the position of the top layer plot.\n\np3 + theme_economist() +\n  inset_element(p1,\n                   left = 0.5,\n                   bottom = 0,\n                   right = 1,\n                   top = 0.3) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\n🦖 PracticePlotCode\n\n\nUsed theme_stata() and changed layout.\n\npatchwork &lt;- p3 | (p1 / p2) \npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex02"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex02"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on_Ex01",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\n🔑 pacman package has been installed in the workshop, using the following code.\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Importing data\nread_csv is a function of readr package, which is from the tidyverse package.\nThe dataset Exam_data.csv, containing exam grades of P3 students from a Singapore local school is imported into R environment.\n🔑 The code chunk below was used to import the dataset.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nMATHS\nENGLISH\nSCIENCE\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n1",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on_Ex01",
    "section": "1.3 Introducing ggplot",
    "text": "1.3 Introducing ggplot\nggplot2 is part of the tidyverse family specially designed for visual exploration and communication. It creates graphics based on The Grammar of Graphics.\n\n\n\n\n\n\nCheatsheet for ggplot2 (Learn more)\n\n\n\n\n\n\n\n\n\n\n\n1.3.1 R Graphics vs. ggplot\n🔑 Observe how R Graphics and ggplot are different when plotting a simple histogram. An example below:\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) + \n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"snow4\",\n                 fill=\"mistyrose\") +\n  ggtitle(\"Distribution of Math Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🦖 PRACTICE\nPractice plotting the different charts for English.\n\nG graphicshistogramboxplot\n\n\n\nhist(exam_data$ENGLISH)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"skyblue\") +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = GENDER,\n           y = ENGLISH)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on_Ex01",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\n❓ What is a statistical graphic?\nUnderstanding the principles of grammar of graphics: a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers.\nIt was introduced by Leland Wlkinson (1999). It defines the rules of structural mathematical and aesthetic elements into a meaningful graph.\n\n\n\n\n\n\nNote\n\n\n\nTwo principles in grammar of graphics are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nA good grammar of graphics has the following characters:\n\nAllows us to gain insights into the composition of complicated graphics.\nReveals unexpected connections between seemingly different graphics (Cox 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nMay also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\n\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\n\n\n\n\n\nImportant\n\n\n\nA short description of each building blocks:\n\nData: the dataset being plotted.\nAesthetic: takes attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: the visual elements used for our data, such as point, bar or line.\nFacets: split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics: statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems: define the plan on which data are mapped on the graphic.\nThemes: modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background.",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on_Ex01",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\n🔑 Calling the ggplot() function, using the code chunk below:\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not aleady a data.frame, it will be converted to one by fortify().",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on_Ex01",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can this encode an aspect of the data and be used to convey information.\n\nAll aesthetic of a plot are specified in the aes() function call.\n\n\n\n🚀 Usage aes(x,y,…)\nThe names for x and y aesthetics are typically omitted because they are so common; all other aesthetics must be named.\n\nEach geom layer can have its own aes specification.\n\n🔑 Code chunk below adds the aesthetic element into the plot.\n\n\n🚀 To display line numbers alongside the code block, can use the code-line-numbers attribute.\nFor example, {.r code-line-numbers=\"true\"}\nggplot(data=exam_data,\n       aes(x = MATHS))\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\n\n\n\nAesthetic specifications\n\n\n\nResources",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on_Ex01",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g., a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (data can be accessed for these maps by using the map_data() function).\nA plot must have one geom, but there is no limit. Add a geom to a plot using the + operator.\n\n\n\n🦄 Complete list of geom layers\n\n\n\n\n\n\n\nR colors\n\n\n\nColor codes for R as a resource. \n\ncl &lt;- colors()\nlength(cl); cl[1:20] #display 1-20\n\n[1] 657\n\n\n [1] \"white\"         \"aliceblue\"     \"antiquewhite\"  \"antiquewhite1\"\n [5] \"antiquewhite2\" \"antiquewhite3\" \"antiquewhite4\" \"aquamarine\"   \n [9] \"aquamarine1\"   \"aquamarine2\"   \"aquamarine3\"   \"aquamarine4\"  \n[13] \"azure\"         \"azure1\"        \"azure2\"        \"azure3\"       \n[17] \"azure4\"        \"beige\"         \"bisque\"        \"bisque1\"      \n\n\n\n\n\n1.7.1 Geometric Objects: geom_bar\n🔑 Code chunk below to plot a bar chart using geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n❓ Code won’t run when using {r code-line-numbers=\"true\"}\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n🔑 geom_dotplot() of ggplot2 is used to plot a dot plot with the code chunk below.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale could be misleading, so isn’t useful.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following 2 steps:\n\nscale_y_continuous() is sued to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\n🔑 In the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\n\n🚀 Histograms (geom_histogram()) display the counts with bars; frequency polygons (geom_freqpoly()) display the counts with lines.\nFrequency polygons are more suitable when you want to compare the distribution across the levels of a categorical variable.\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n1.7.4 Modify a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\n\n1.7.5 Modify a geometric object by changing aes()\nThe code chunk below changes the interior colour of t he histogram (i.e. fill) by using sub-group of aesthetic().\nggplot(data=exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric Objects: geom_density()\ngeom_density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\n\n\n🦄 geom-density() understands the following aesthetics: x, y, alpha, colour, fill, group, linetype, linewidth, weight.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n🔑 The code below plots the distribution of Maths scores in a kernel density estimate plot.\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_density()\n\n\n\n\n\n\n\n\n\n🔑 The code chunk below plots two kernel density lines by using colour or fill arguments of aes()\nggplot(data=exam_data,\n       aes(x = MATHS,\n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\n\n🦄 geom_boxplot() understands the following aesthetics:\nx or y, lower or xlower, upper or xupper, middle or xmiddle, ymin or xmin, ymax or xmax, alpha, colour, fill, group, linetype, linewidth, shape, size, weight.\n🔑 The code chunk below plots boxplots by using geom_boxplot()\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n🔑 The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin() is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\n\ngeom_violin() understands the following aesthetics:\nx, y, alpha, colour, fill, group, linetype, linewidth,weight.\n🔑 The code below plot the distribution of Maths score by gender in violin plot.\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot. The scatterplot is most useful for displaying the relationship between two continuous variables.\n\n\n🦄 geom_point() can be used to compare one continuous and one categorical variable, or two categorical variables, but a variation like geom_jitter(), geom_count(), or geom_bin_2d() is usually more appropriate.\nA bubblechart is a scatterplot with a third variable mapped to the size of points.\n🔑 The code chunk below plots a scatterplot showing that Maths and English grades of pupils by using geom_point().\nggplot(data=exam_data,\n       aes(x= MATHS,\n           y= ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n1.7.10 Geometric objects can be combined\n\n\n🐳 AMAZING\n🔑 The code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n💊 Point size in actual figure = 0.3",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on_Ex01",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nFrequencey of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes(y = MATHS, x = GENDER)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\nstat_summary() operates on unique x or y; stat_summary_bin() operates on binned x or y. They are more flexible versions of stat_bin(): instead of just counting, they can compute any aggregate.\n\nggplot(data=exam_data,\n       aes(y = MATHS, x = GENDER)) + \n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour = \"red\",\n               size = 4)\n\n\n\n\n\n\n\n\n\n\n1.8.3 Working with the stat - the geom() method\nThe code chunk below adds mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data,\n       aes(y = MATHS, x = GENDER)) + \n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun = \"mean\",\n             colour = \"red\",\n             size = 4)\n\n\n\n\n\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n❓ Unable to adjust scale\n\n\n\n\n\n\n\n\n\n🔑 In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\ngeom_smooth(method = \"loess\")\n\n\n🔑 The default smoothing method can be overridden as shown below.\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5)",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on_Ex01",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called treillis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot suppoorts two types of facets, namely: facet_grid() and facet_wrap().\n\n1.9.1 Working with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n🔑 The code chunk below plots a trellis plot using facet_wrap().\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20) + \n  facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and columns facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n🔑 The code chunk below plots a trellis plot using facet_grid() .\n\n\n🦄 If you have only one variable with many levels, try facet_wrap().\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n🦖 PRACTICE\n\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=0.8, colour=\"skyblue\") +\n  facet_wrap(~ CLASS)",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on_Ex01",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out.)\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n🔑 The code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar(color=\"gray\",fill=\"skyblue\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-axis range are not equal.\n\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  geom_smooth(method = lm, size = 0.5)",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on_Ex01",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize fnts\ngridlines\ncolour of labels\n\nBuilt-in themes include -theme_gray()(default)-theme_bw()-theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived f as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\n🔑 The code chunk below plot a horizontal bar chart using theme_gray().\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n🔑 A horizontal bar chart plotted using theme_classic().\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n🔑 A horizontal bar chart plotted using theme_minimal().\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on_Ex01",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale",
    "crumbs": [
      "![](images/home.svg)",
      "Hands-on Exercise",
      "Hands-on_Ex01"
    ]
  }
]