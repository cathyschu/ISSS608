[
  {
    "objectID": "In-class_Ex/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "🎯 Use Tool to install packages first before running the code. Helps reduce missing packages.\n\npacman:::p_load(haven, SmartEDA, tidyverse, ggdist,\n                tidymodels, ggridges, colorspace, ggthemes)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nBefore plotting ridgeline plots, we plot boxplot first to have a preview.\n\n\nShow the code\nggplot(exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot showing distribution\")\n\n\n\n\n\n\n\n\n\nNow, we plot the ridgeline plot.\n\n\nShow the code\nggplot(exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  #create ridgeline\n  geom_density_ridges( \n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 2.5,\n    fill = lighten(\"pink\", .3),\n    color = \"white\"\n  ) +\n  #extension of ggplot\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  labs(title = \"Visualising Distribution with Ridgeline Plot\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nBelow is with quantile lines:\n\n\nShow the code\nggplot(exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  labs(title = \"Ridgeline Plot with Quantile Lines\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nHere, we can use half-eye plot to see the distribution:\n\n\nShow the code\nggplot(exam_data, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) + #see no outliers.\n  geom_boxplot(width = .20, #not overly crowded.\n               outlier.shape = NA) + #see no outliers.\n  coord_flip() +\n  labs(title = \"Half-eye Graph\") \n\n\n\n\n\n\n\n\n\nNext we add dot plots with stat_dots(). This gives better clarify.\n\nHigh-level distribution of probability density&gt; This smooths out. Is it skewed or normal distributed.\nDots: provides the detail of it. With this we can observe that for some categories like “Others” has very small sample.\n\n\n\nShow the code\nggplot(exam_data, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = NA, #suggested to put all dots in the range.\n            dotsize = 1.3) + #can apply transparency if too many.\n  coord_flip() + #this is to flip into horizontal graph\n  labs(title = \"Adding dot plots to the Raincloud Plot\")",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex4"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01_working2.html",
    "href": "Take-home_Ex/Take-home_Ex01_working2.html",
    "title": "Take-home_Ex01_working",
    "section": "",
    "text": "pacman::p_load(ggstatsplot)\npacman::p_load(tidyverse)\nlibrary(readr)\ndata_heart &lt;- read_csv(\"data/jp_heart_attack_dataset.csv\")\ndata_ship &lt;- read_csv(\"data/Ship_Pfm_Dataset.csv\")\n#glimpse(data_ship)\nNumerical Features\n\nSpeed_Over_Ground_knots: Average speed of the ship over water (in knots).\nEngine_Power_kW: Engine power output (in kilowatts).\nDistance_Traveled_nm: Total distance traveled by the ship (in nautical miles).\nOperational_Cost_USD: Total operational cost per voyage (in USD).\nRevenue_per_Voyage_USD: Revenue generated per voyage (in USD).\nEfficiency_nm_per_kWh: Energy efficiency calculated in nautical miles per kilowatt-hour.\n\nCategorical Features\n\nShip_Type: Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).\nRoute_Type: Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).\nEngine_Type: Type of engine (e.g., Diesel, Heavy Fuel Oil).\nMaintenance_Status: Maintenance condition of the ship (e.g., Fair, Critical, Good).\nWeather_Condition: Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough).\n\n\n\n\n\n\n\n\nPackages\nDescription\n\n\n\n\ntidyverse\nthe tidyverse package installs a number of other packages for reading data and data manilupation, tidying.\n\n\nggplot2\na system for declaratively creating graphics.\n\n\ncolorspace\nprovides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualizations.\n\n\negg\nHigh-level functions are provided to post-process ‘ggplot2’ layouts and allow alignment between plot panels, as well as setting panel sizes to fixed values.\n\n\ngeomtextpath\n3.09\n\n\ngganimate\n3.09\n\n\nggdist\n3.09\n\n\nggstatsplot\n3.09\n\n\nggtext\n3.09\n\n\nggthemes\n3.09\n\n\nggridges\n3.09\n\n\nhaven\n3.09\n\n\nknitr\n3.09\n\n\nmagrittr\n3.09\n\n\npatchwork\n3.09\n\n\nperformance\n3.09\n\n\nparameters\n3.09\n\n\nreadxl\n3.09\n\n\nRColorBrewer\n3.09\n\n\nsee\n3.09\n\n\ntidyverse\n3.09\n\n\n\n\n\nInsights\n\n\n\ntext\n\n\n#| fig-width: 15\n#| fig-height: 8\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n# Plot1\n# Plot statboxplot by ship types\np_statbox_st &lt;- ggbetweenstats(\n  data = ship_filter,\n  x = Ship_Type,\n  y = Profit,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n) +\n    coord_flip() \n\n#Plot raincloud plot by ship types\nmedian_Profit &lt;- median(ship_filter$Profit)\nmean_Profit &lt;- round(mean(ship_filter$Profit), 2)\n\np_rcloud_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Profit,\n           fill = Ship_Type)) +\n  stat_halfeye(adjust = 0.3,\n               justification = -0.2,\n               scale = 0.6,\n               width = 0.6,\n               slab_color = \"grey\",\n               slab_fill = \"#D6DED5\",\n               slab_linetype = \"solid\",\n               slab_linewidth = 0.4,\n               slab_alpha = 0.5,\n               .width = 0,\n               point_colour = NA,\n               position = position_nudge(y = -0.2)) +\n  geom_boxplot(width = 0.1,\n               color = \"#FFC0CB\",\n               position = position_nudge(y = 0.8)) +\n  scale_fill_brewer(palette=\"Pasterl1\") +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            bandwidth = .5,\n            dotsize = 0.1,\n            alpha = 0.4,\n            aes(color = Engine_Type)) +\n  #indicate median score position\n  geom_hline(aes(yintercept = median_Profit),\n             color = \"blue\", \n             linewidth = 0.4,\n             linetype = \"dashed\") +\n  #indicate mean score position\n  geom_hline(aes(yintercept = mean_Profit),\n             color = \"red\", \n             linewidth = 0.4,\n             linetype = \"dashed\") +\n  theme_minimal() +\n  annotate(\"text\",\n           x = 0.1,\n           y = median_Profit + 270,\n           label = paste(\"Median Score = \", median_Profit),\n           color = \"blue\",\n           size = 3) +\n  \n  annotate(\"text\",\n           x = 0.3,\n           y = mean_Profit + 270,\n           label = paste(\"Mean Score = \", mean_Profit),\n           color = \"red\",\n           size = 3) +\n  coord_flip() +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank())\n\n#Combine two plots\npatchwork &lt;- (p_rcloud_st | p_statbox_st)\npatchwork"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01_working.html",
    "href": "Take-home_Ex/Take-home_Ex01_working.html",
    "title": "Take-home_Ex01_working",
    "section": "",
    "text": "pacman::p_load(tidyverse)\nlibrary(readr)\ndata_heart &lt;- read_csv(\"data/jp_heart_attack_dataset.csv\")\n\nRows: 30000 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Gender, Region, Smoking_History, Diabetes_History, Hypertension_Hi...\ndbl (22): Age, Cholesterol_Level, Stress_Levels, BMI, Heart_Rate, Systolic_B...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata_ship &lt;- read_csv(\"data/Ship_Pfm_Dataset.csv\")\n\nRows: 2736 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Weather_C...\ndbl  (12): Speed_Over_Ground_knots, Engine_Power_kW, Distance_Traveled_nm, D...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata_heart \n\n# A tibble: 30,000 × 32\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 26 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;,\n#   Extra_Column_5 &lt;dbl&gt;, Extra_Column_6 &lt;dbl&gt;, Extra_Column_7 &lt;dbl&gt;, …\n\ndata_ship\n\n# A tibble: 2,736 × 18\n   Date       Ship_Type      Route_Type   Engine_Type         Maintenance_Status\n   &lt;date&gt;     &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;               &lt;chr&gt;             \n 1 2023-06-04 Container Ship None         Heavy Fuel Oil (HF… Critical          \n 2 2023-06-11 Fish Carrier   Short-haul   Steam Turbine       Good              \n 3 2023-06-18 Container Ship Long-haul    Diesel              Fair              \n 4 2023-06-25 Bulk Carrier   Transoceanic Steam Turbine       Fair              \n 5 2023-07-02 Fish Carrier   Transoceanic Diesel              Fair              \n 6 2023-07-09 Fish Carrier   Long-haul    Heavy Fuel Oil (HF… Fair              \n 7 2023-07-16 Fish Carrier   Transoceanic Heavy Fuel Oil (HF… Critical          \n 8 2023-07-23 Container Ship Short-haul   Diesel              Critical          \n 9 2023-07-30 None           Coastal      Heavy Fuel Oil (HF… Good              \n10 2023-08-06 Container Ship Long-haul    Diesel              Fair              \n# ℹ 2,726 more rows\n# ℹ 13 more variables: Speed_Over_Ground_knots &lt;dbl&gt;, Engine_Power_kW &lt;dbl&gt;,\n#   Distance_Traveled_nm &lt;dbl&gt;, Draft_meters &lt;dbl&gt;, Weather_Condition &lt;chr&gt;,\n#   Cargo_Weight_tons &lt;dbl&gt;, Operational_Cost_USD &lt;dbl&gt;,\n#   Revenue_per_Voyage_USD &lt;dbl&gt;, Turnaround_Time_hours &lt;dbl&gt;,\n#   Efficiency_nm_per_kWh &lt;dbl&gt;, Seasonal_Impact_Score &lt;dbl&gt;,\n#   Weekly_Voyage_Count &lt;dbl&gt;, Average_Load_Percentage &lt;dbl&gt;\n\n\n\ndf_65plus &lt;- data_heart %&gt;% filter(Age &gt;= 65)\ndf_40plus &lt;- data_heart %&gt;% filter(Age &gt;= 40)\ndf_65below &lt;- data_heart %&gt;% filter(Age &lt; 65)\n\nggplot(df_65plus,\n       aes(x = Gender,\n           y = BMI, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(x = \"Gender\", y = \"BMI\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Gender,\n           y = Heart_Rate, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Heart rate by gender for 65plus\",\n  x = \"Gender\", y = \"Heart_Rate\")\n\n\n\n\n\n\n\n\n\nggplot(df_65below,\n       aes(x = Gender,\n           y = Heart_Rate, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Heart rate by gender for 65below\",\n  x = \"Gender\", y = \"Heart_Rate\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Region,\n           y = Cholesterol_Level, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Cholesterol_Level by region for 65below\",\n  x = \"Region\", y = \"Cholesterol_Level\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Gender,\n           y = Cholesterol_Level, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Cholesterol_Level by gender for 65below\",\n  x = \"Gender\", y = \"Cholesterol_Level\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Gender,\n           y = Diastolic_BP, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Diastolic_BP by gender for 65plus\",\n  x = \"Gender\", y = \"Diastolic_BP\")\n\n\n\n\n\n\n\n\n\nggplot(df_65below,\n       aes(x = Gender,\n           y = Diastolic_BP, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Diastolic_BP by gender for 65below\",\n  x = \"Gender\", y = \"Diastolic_BP\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Region,\n           y = Diastolic_BP, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Diastolic_BP by Region for 65plus\",\n  x = \"Region\", y = \"Diastolic_BP\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Region,\n           y = Stress_Levels, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Stress level by region for 65plus\",\n       x = \"Region\", y = \"Stress\")\n\n\n\n\n\n\n\n\n\nggplot(df_40plus,\n       aes(x = Gender,\n           y = Stress_Levels, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Stress level by gender for 40plus\",\n       x = \"Gender\", y = \"Stress\")\n\n\n\n\n\n\n\n\n\nggplot(df_65below,\n       aes(x = Gender,\n           y = Stress_Levels, \n           fill = Heart_Attack_Occurrence)) + \n  geom_boxplot() +\n  labs(title = \"Stress level by gender for 65below\",\n    x = \"Gender\", y = \"Stress\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Heart_Attack_Occurrence,\n           fill = Gender)) + \n  geom_bar() +\n  labs(x = \"Gender\", y = \"Count\")\n\n\n\n\n\n\n\n\n\nggplot(df_65below,\n       aes(x = Heart_Attack_Occurrence,\n           fill = Gender)) + \n  geom_bar() +\n  labs(x = \"Gender\", y = \"Count\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Heart_Attack_Occurrence,\n           fill = Family_History)) + \n  geom_bar() +\n  labs(x = \"Family_History\", y = \"Count\")\n\n\n\n\n\n\n\n\n\nggplot(df_65plus,\n       aes(x = Heart_Attack_Occurrence,\n           fill = Physical_Activity)) + \n  geom_bar() +\n  labs(x = \"Physical_Activity\", y = \"Count\")\n\n\n\n\n\n\n\n\nAge\n\ndf_agegrp &lt;- data_heart %&gt;%\n  mutate(Age_Group = cut(Age, \n                         breaks = c(-Inf, 15, 25, 40, 65, Inf),\n                         labels = c(\"0-15\", \"16-25\", \"26-40\",\"41-65\", \"65+\")))\n\nggplot(df_agegrp,\n       aes(x = Heart_Attack_Occurrence,\n           fill = Age_Group)) + \n  geom_bar() +\n  labs(x = \"Age\", y = \"Count\")\n\n\n\n\n\n\n\n\n\nggplot(data_heart,\n       aes(x = Heart_Attack_Occurrence,\n           y = Age, \n           fill = Gender)) + \n  geom_boxplot() +\n  labs(title = \"Age by gender\",\n       x = \"Ht attack\", y = \"Age\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to Cathy’s portfolio for ISSS608 Visual Analytics and Applications.\nThis webpage is a portfolio recording my course work for an Analytics course (ISSS608 Visual Analytics and Application) at Singapore Management University.\nIn this website, you will find the exercises, assignments and projects published during the course. Welcome to connect with me to discuss questions and insights about analytics!",
    "crumbs": [
      "![](/images/house.svg)",
      "Home"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on_Ex01",
    "section": "1.2 Getting started",
    "text": "1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\n🔑 pacman package has been installed in the workshop, using the following code.\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Importing data\nread_csv is a function of readr package, which is from the tidyverse package.\nThe dataset Exam_data.csv, containing exam grades of P3 students from a Singapore local school is imported into R environment.\n🔑 The code chunk below was used to import the dataset.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nMATHS\nENGLISH\nSCIENCE\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n1",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on_Ex01",
    "section": "1.3 Introducing ggplot",
    "text": "1.3 Introducing ggplot\nggplot2 is part of the tidyverse family specially designed for visual exploration and communication. It creates graphics based on The Grammar of Graphics.\n\n\n\n\n\n\nCheatsheet for ggplot2 (Learn more)\n\n\n\n\n\n\n\n\n\n\n\n1.3.1 R Graphics vs. ggplot\n🔑 Observe how R Graphics and ggplot are different when plotting a simple histogram. An example below:\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) + \n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"snow4\",\n                 fill=\"mistyrose\") +\n  ggtitle(\"Distribution of Math Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🦖 PRACTICE\nPractice plotting the different charts for English.\n\nG graphicshistogramboxplot\n\n\n\nhist(exam_data$ENGLISH)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill = \"skyblue\") +\n  ggtitle(\"Distribution of English Scores\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = GENDER,\n           y = ENGLISH)) +\n  geom_boxplot(outlier.colour = \"skyblue\",\n               outlier.fill = \"skyblue\",) +\n  ggtitle(\"Distribution of English Scores\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on_Ex01",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\n❓ What is a statistical graphic?\nUnderstanding the principles of grammar of graphics: a general scheme for data visualisation which breaks up graphs into semantic components such as scales and layers.\nIt was introduced by Leland Wlkinson (1999). It defines the rules of structural mathematical and aesthetic elements into a meaningful graph.\n\n\n\n\n\n\nNote\n\n\n\nTwo principles in grammar of graphics are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nA good grammar of graphics has the following characters:\n\nAllows us to gain insights into the composition of complicated graphics.\nReveals unexpected connections between seemingly different graphics (Cox 1978).\nProvides a strong foundation for understanding a diverse range of graphics.\nMay also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\n\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\n\n\n\n\n\nImportant\n\n\n\nA short description of each building blocks:\n\nData: the dataset being plotted.\nAesthetic: takes attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: the visual elements used for our data, such as point, bar or line.\nFacets: split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics: statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems: define the plan on which data are mapped on the graphic.\nThemes: modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on_Ex01",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\n🔑 Calling the ggplot() function, using the code chunk below:\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not aleady a data.frame, it will be converted to one by fortify().",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on_Ex01",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can this encode an aspect of the data and be used to convey information.\n\nAll aesthetic of a plot are specified in the aes() function call.\n\n\n\n🚀 Usage aes(x,y,…)\nThe names for x and y aesthetics are typically omitted because they are so common; all other aesthetics must be named.\n\nEach geom layer can have its own aes specification.\n\n🔑 Code chunk below adds the aesthetic element into the plot.\n\n\n🚀 To display line numbers alongside the code block, can use the code-line-numbers attribute.\nFor example, {.r code-line-numbers=\"true\"}\nggplot(data=exam_data,\n       aes(x = MATHS))\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\n\n\n\nAesthetic specifications\n\n\n\nResources",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on_Ex01",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g., a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (data can be accessed for these maps by using the map_data() function).\nA plot must have one geom, but there is no limit. Add a geom to a plot using the + operator.\n\n\n\n🦄 Complete list of geom layers\n\n\n\n\n\n\n\nR colors\n\n\n\nColor codes for R as a resource. \n\ncl &lt;- colors()\nlength(cl); cl[1:20] #display 1-20\n\n[1] 657\n\n\n [1] \"white\"         \"aliceblue\"     \"antiquewhite\"  \"antiquewhite1\"\n [5] \"antiquewhite2\" \"antiquewhite3\" \"antiquewhite4\" \"aquamarine\"   \n [9] \"aquamarine1\"   \"aquamarine2\"   \"aquamarine3\"   \"aquamarine4\"  \n[13] \"azure\"         \"azure1\"        \"azure2\"        \"azure3\"       \n[17] \"azure4\"        \"beige\"         \"bisque\"        \"bisque1\"      \n\n\n\n\n\n1.7.1 Geometric Objects: geom_bar\n🔑 Code chunk below to plot a bar chart using geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n❓ Code won’t run when using {r code-line-numbers=\"true\"}\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n🔑 geom_dotplot() of ggplot2 is used to plot a dot plot with the code chunk below.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale could be misleading, so isn’t useful.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following 2 steps:\n\nscale_y_continuous() is sued to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\n🔑 In the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\n\n🚀 Histograms (geom_histogram()) display the counts with bars; frequency polygons (geom_freqpoly()) display the counts with lines.\nFrequency polygons are more suitable when you want to compare the distribution across the levels of a categorical variable.\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n1.7.4 Modify a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\n\n1.7.5 Modify a geometric object by changing aes()\nThe code chunk below changes the interior colour of t he histogram (i.e. fill) by using sub-group of aesthetic().\nggplot(data=exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric Objects: geom_density()\ngeom_density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\n\n\n🦄 geom-density() understands the following aesthetics: x, y, alpha, colour, fill, group, linetype, linewidth, weight.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n🔑 The code below plots the distribution of Maths scores in a kernel density estimate plot.\nggplot(data=exam_data,\n       aes(x = MATHS)) + \n  geom_density()\n\n\n\n\n\n\n\n\n\n🔑 The code chunk below plots two kernel density lines by using colour or fill arguments of aes()\nggplot(data=exam_data,\n       aes(x = MATHS,\n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\n\n🦄 geom_boxplot() understands the following aesthetics:\nx or y, lower or xlower, upper or xupper, middle or xmiddle, ymin or xmin, ymax or xmax, alpha, colour, fill, group, linetype, linewidth, shape, size, weight.\n🔑 The code chunk below plots boxplots by using geom_boxplot()\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n🔑 The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin() is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\n\ngeom_violin() understands the following aesthetics:\nx, y, alpha, colour, fill, group, linetype, linewidth,weight.\n🔑 The code below plot the distribution of Maths score by gender in violin plot.\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot. The scatterplot is most useful for displaying the relationship between two continuous variables.\n\n\n🦄 geom_point() can be used to compare one continuous and one categorical variable, or two categorical variables, but a variation like geom_jitter(), geom_count(), or geom_bin_2d() is usually more appropriate.\nA bubblechart is a scatterplot with a third variable mapped to the size of points.\n🔑 The code chunk below plots a scatterplot showing that Maths and English grades of pupils by using geom_point().\nggplot(data=exam_data,\n       aes(x= MATHS,\n           y= ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n1.7.10 Geometric objects can be combined\n\n\n🐳 AMAZING\n🔑 The code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\nggplot(data=exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n💊 Point size in actual figure = 0.3",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on_Ex01",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nFrequencey of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes(y = MATHS, x = GENDER)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\nstat_summary() operates on unique x or y; stat_summary_bin() operates on binned x or y. They are more flexible versions of stat_bin(): instead of just counting, they can compute any aggregate.\n\nggplot(data=exam_data,\n       aes(y = MATHS, x = GENDER)) + \n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour = \"red\",\n               size = 4)\n\n\n\n\n\n\n\n\n\n\n1.8.3 Working with the stat - the geom() method\nThe code chunk below adds mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data,\n       aes(y = MATHS, x = GENDER)) + \n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun = \"mean\",\n             colour = \"red\",\n             size = 4)\n\n\n\n\n\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n❓ Unable to adjust scale\n\n\n\n\n\n\n\n\n\n🔑 In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\ngeom_smooth(method = \"loess\")\n\n\n🔑 The default smoothing method can be overridden as shown below.\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on_Ex01",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called treillis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot suppoorts two types of facets, namely: facet_grid() and facet_wrap().\n\n1.9.1 Working with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n🔑 The code chunk below plots a trellis plot using facet_wrap().\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20) + \n  facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and columns facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n🔑 The code chunk below plots a trellis plot using facet_grid() .\n\n\n🦄 If you have only one variable with many levels, try facet_wrap().\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n🦖 PRACTICE\n\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=0.8, colour=\"skyblue\") +\n  facet_wrap(~ CLASS)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on_Ex01",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out.)\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n🔑 The code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar(color=\"gray\",fill=\"skyblue\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-axis range are not equal.\n\nggplot(data=exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  geom_smooth(method = lm, size = 0.5)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on_Ex01",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize fnts\ngridlines\ncolour of labels\n\nBuilt-in themes include -theme_gray()(default)-theme_bw()-theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived f as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\n🔑 The code chunk below plot a horizontal bar chart using theme_gray().\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n🔑 A horizontal bar chart plotted using theme_classic().\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n🔑 A horizontal bar chart plotted using theme_minimal().\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on_Ex01",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html",
    "title": "Hands-on_Ex05-2",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables.\nWe will learn:\n\nHow to create correlation matrix using pairs() of R Graphics.\nHow to plot corrgram using corrplot package of R.\nHow to create an interactive correlation matrix using plotly R.\n\n\n\n\n\nInstall & launch R packagesImport data\n\n\nUse the code below to install and launch corrplot, ggpubr, plotly and tidyverse in R studio.\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nBeside quality and type, the test of the variables are numerical and continuous data type.\nUse glimpse() to have a look at the columns run down the page, and data runs across.\n\nglimpse(wine)\n\nRows: 6,497\nColumns: 13\n$ `fixed acidity`        &lt;dbl&gt; 7.4, 7.8, 7.8, 11.2, 7.4, 7.4, 7.9, 7.3, 7.8, 7…\n$ `volatile acidity`     &lt;dbl&gt; 0.700, 0.880, 0.760, 0.280, 0.700, 0.660, 0.600…\n$ `citric acid`          &lt;dbl&gt; 0.00, 0.00, 0.04, 0.56, 0.00, 0.00, 0.06, 0.00,…\n$ `residual sugar`       &lt;dbl&gt; 1.9, 2.6, 2.3, 1.9, 1.9, 1.8, 1.6, 1.2, 2.0, 6.…\n$ chlorides              &lt;dbl&gt; 0.076, 0.098, 0.092, 0.075, 0.076, 0.075, 0.069…\n$ `free sulfur dioxide`  &lt;dbl&gt; 11, 25, 15, 17, 11, 13, 15, 15, 9, 17, 15, 17, …\n$ `total sulfur dioxide` &lt;dbl&gt; 34, 67, 54, 60, 34, 40, 59, 21, 18, 102, 65, 10…\n$ density                &lt;dbl&gt; 0.9978, 0.9968, 0.9970, 0.9980, 0.9978, 0.9978,…\n$ pH                     &lt;dbl&gt; 3.51, 3.20, 3.26, 3.16, 3.51, 3.51, 3.30, 3.39,…\n$ sulphates              &lt;dbl&gt; 0.56, 0.68, 0.65, 0.58, 0.56, 0.56, 0.46, 0.47,…\n$ alcohol                &lt;dbl&gt; 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 1…\n$ quality                &lt;dbl&gt; 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5,…\n$ type                   &lt;chr&gt; \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"…\n\n\n\n\n\n\n\n\nWe will use pairs function of R Graphics to create a scatterplot matrix. There are many other ways to do so, too. See pairs function.\n\n\n\npairs(x, ...)\n\n## S3 method for class 'formula'\npairs(formula, data = NULL, ..., subset,\n      na.action = stats::na.pass)\n\n## Default S3 method:\npairs(x, labels, panel = points, ...,\n      horInd = 1:nc, \n      verInd = 1:nc,\n      lower.panel = panel, \n      upper.panel = panel,\n      diag.panel = NULL, \n      text.panel = textPanel,\n      label.pos = 0.5 + has.diag/3, \n      line.main = 3,\n      cex.labels = NULL, font.labels = 1,\n      row1attop = TRUE, gap = 1, \n      log = \"\",\n      horOdd = !row1attop, \n      verOdd = !row1attop)\n\n\nFigure below shows the scatterplot matrix of Wine Quality Data: 11x11 matrix.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npairs(wine[,1:11],\n      main = \"Correlation Matrix\")\n\n\n\n\n\n\n\n\n\nFigure below shows scatterplot matrix with different variables columns 2 to 12 of wine dataframe: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npairs(wine[,2:12],\n      main = \"Correlation Matrix with 2:12 vars\")\n\n\n\n\n\n\n\n\n\nFigure below shows scatterplot matrix with chosen variables: total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npairs(wine[, c(\"total sulfur dioxide\", \"density\", \"pH\", \"sulphates\", \"alcohol\")],\n      main = \"Correlation Matrix with 2:12 vars\")\n\n\n\n\n\n\n\n\n\n\n\n\nTo show the lower half of the correlation matrix, the upper.panelargument will be used as shown in the code chunk below.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\nWe can also display the upper half.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npanel.cor &lt;- function(x, y, digits = 2, prefix = \"\", cex.cor, ...) {\n  usr &lt;- par(\"usr\")\n  on.exit(par(usr))\n  par(usr = c(0, 1, 0 , 1))\n  r &lt;- abs(cor(x, y, use = \"complete.obs\"))\n  txt &lt;- format(c(r, 0.123456789), digits = digits)[1]\n  text &lt;- paste(prefix, txt, sep = \"\")\n  if(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[, 2:12],\n      upper.panel = panel.cor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelation matrix with scatterplot can look cluttered when observations are more than 500. Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used. 3 R packages will be used to plot corrgram: corrgram, ellipse and corrplot.\nHere we will visualise correlation matrix with ggcorrmat() of ggstatsplot package.\n\n\nAdvantage of using ggcormat() over many other methods to visualise correlation matrix is its ability to provide a comprehensive and statistical report.\nggcorrmat() uses the following default arguments:\n\nmatrix.type = “upper”\nsig.level = 0.05\nconf.level = 0.95\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  ggcorrplot.args = list(\n    lab_size = 2.8,\n    tl.cex = 8,\n    pch.cex = 8\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  colors = c(\"#ed939d\", \"#fcfaf8\", \"#82afd9\"),\n  ggcorrplot.args = list(outline.color = \"black\",\n                         hc.order = TRUE,\n                         lab_size = 2.8,\n                         tl.cex = 8,\n                         pch.cex = 8),\n  title = \"Corrlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p&lt; 0.05\"\n)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\nggplot.component = list(\n  theme(text = element_text(size = 5),\n        axis.text.x = element_text(size = 8),\n        axis.text.y = element_text(size = 8))\n)\n\n\n\n\nggstasplot is an extension of ggplot2, so also supports faceting. However the feature is in the grouped_ggcorrmat() of ggstatsplot.\n\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  colors = c(\"#ed939d\", \"#fcfaf8\", \"#82afd9\"),\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\",\n                         hc.order = TRUE,\n                         lab_size = 4,\n                         tl.cex = 12,\n                         pch.cex = 9\n                         ),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n) \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUse fig-width and fig-height to adjust the spaces.\nTo build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package.\n\n\n\n\n\n\n🔆 Resource: An Introduction to corrplot Package\n\n\n\nCompute the correlation matrix of wine data frame\n\n\nwine.cor &lt;- cor(wine[,1:11])\n\n\nUse corrplot() to plot the corrgram by using all the default settings.\n\n\npar(bg = \"#f1f4f5\")\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\n\n\nThe default settings\n\n\n\nvisual object used to plot the coorgram: circle\nlayout of the corrgram: symmetric matrix\ncolor scheme: diverging blue-red\nThe intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient.\nDarker colours indicate relatively stronger linear relationship between the paired variables\n\n\n\n\n\nMore settings\n\n\n\nmatrix.type: Character, \"full\" (default), \"upper\" or \"lower\", display full matrix, lower triangular or upper triangular matrix.\nmethod: Character argument that decides the visualization method of correlation matrix to be used. Allowed values are square (default), circle\ncorr.method: A character string indicating which correlation coefficient is to be computed (pearson (default) or kendall or spearman). robust can also be entered but only if output argument is set to either correlations or p-values. The robust correlation used is percentage bend correlation (see ?WRS2::pball). Abbreviations will also work: \"p\" (for parametric/Pearson’s r), \"np\" (nonparametric/Spearman’s rho), r (robust).\ndigits: Decides the number of decimal digits to be displayed (Default: 2)\nsig.level: Significance level (Default: 0.05). If the p-value in p-value matrix is bigger than sig.level, then the corresponding correlation coefficient is regarded as insignificant and flagged as such in the plot. This argument is relevant only when output = \"plot\".\nggtheme:\nA function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).\nsubtitle: The text for the plot subtitle.\nlab.col: Color to be used for the correlation coefficient labels (applicable only when lab = TRUE).\nlab.size: Size to be used for the correlation coefficient labels (applicable only when lab = TRUE).\nmessages: Decides whether messages references, notes, and warnings are to be displayed (Default: TRUE).\noutline = to draw the black outline of the correlation objects such as circles or squares.\naddgrid.col = to determine the color of the grids. Would dissapear if NA.\norder = the order of the columns. If not specified it is plotted as in the original matrix, but sometimes it is not so informative. Possible methods are: “AOE” (angular order of the eigenvectors), “FPC” (first principal component), “hclust”, “alphabet”. There is also hclust.method to determine the agglomeration method if the order is “hclust”.\naddrect = when the order is “hclust”, determines the number of rectangles according to the hierarchical cluster. rect.something arguments are about the rectangles added according to this argument.\ncl.something = these are the arguments about the color legend.\ntl.something = these are the arguments about the text labels.\n\n\n\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle, like the figure in 6.1.\nThe default setting can be changed by using the method argument. See the code below:\n\nellipsesquarenumbershadecolorpieaddrect\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Ellipse\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"square\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"number\",\n         number.cex = 0.65,\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Number\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"shade\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Shade\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"color\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Color\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"pie\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Pie\")\n\n\n\n\n\n\n\n\n\n\n\naddrect argument sets the value in numbers representing the number of clusters.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         outline = T,\n         addgrid.col = \"darkgray\",\n         order=\"hclust\",\n         addrect = 4,   \n         rect.col = \"black\",\n         rect.lwd = 5,\n         cl.pos = \"b\",\n         tl.col = \"indianred4\",\n         tl.cex = 0.6,\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         #addCoef.col = \"white\",\n         #number.digits = 2,\n         #number.cex = 0.75,\n         title=\"Correlation Plot with Ellipses and Clusters\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncorrplor() supports three layout types, namely: full, upper or lower. The default is full which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         type = \"lower\",\n         tl.srt = 45,\n         title = \"Correlation Plot - Lower Type\")\n\n\n\n\n\n\n\n\n\n\nTo turn off the diagonal cells: diag\nTo change the axis text label colour: tl.col\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.cex = 0.5,\n         tl.offset = 1.5,\n         tl.srt = 45,\n         cl.cex = 0.5,\n         cl.offset = 1,\n         title = \"Correlation Plot - Text Label in Black\")\n\n\n\n\n\n\n\n\n\n\n\n\nTo create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot.mixed(wine.cor,\n               lower = \"ellipse\",\n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\",\n               tl.cex = 0.6,\n               tl.srt = 45,\n               number.cex = 0.5)\n\n\n\n\n\n\n\n\n\nNote that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram.\nThe argument tl.pos, on the other, is used to specify the placement of the axis label.\nLastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n\nWe are also interested to know which pair of variables their correlation coefficient are statistically significant. Figure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor,\n                     conf.level = .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         tl.cex = 0.6,\n         number.cex = 0.7,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used. It should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n“alphabet” for alphabetical order. “AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               tl.srt = 45,\n               tl.cex = 0.6,\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n\n\n\n\nIf using hclust, corrplot()can draw rectangles around the corrgram based on the results of hierarchical clustering. addrect indicates the number of clusters.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         tl.cex = 0.6,\n         tl.srt = 45,\n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3\n         )\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\n## text labels rotated 45 degrees and  wider color legend with numbers right aligned\ncorrplot(wine.cor, \n         type = 'lower', \n         order = 'hclust', \n         tl.col = 'black',\n         tl.cex = 0.5,\n         cl.ratio = 0.2, \n         tl.srt = 45, \n         col = COL2('PuOr', 10))\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\n## text labels rotated 45 degrees and  wider color legend with numbers right aligned\ncorrplot(wine.cor, \n         type = \"upper\", \n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         tl.col = 'black',\n         tl.cex = 0.5, \n         tl.srt = 45, \n         col = c('white', 'black'),\n         bg = \"gold2\")\n\n\n\n\n\n\n\n\n\n\n\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. The American Statistician, 56, 316–324.\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. The American Statistician, 50, 178–180.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#overview",
    "title": "Hands-on_Ex05-2",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables.\nWe will learn:\n\nHow to create correlation matrix using pairs() of R Graphics.\nHow to plot corrgram using corrplot package of R.\nHow to create an interactive correlation matrix using plotly R.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#getting-started",
    "title": "Hands-on_Ex05-2",
    "section": "",
    "text": "Install & launch R packagesImport data\n\n\nUse the code below to install and launch corrplot, ggpubr, plotly and tidyverse in R studio.\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nBeside quality and type, the test of the variables are numerical and continuous data type.\nUse glimpse() to have a look at the columns run down the page, and data runs across.\n\nglimpse(wine)\n\nRows: 6,497\nColumns: 13\n$ `fixed acidity`        &lt;dbl&gt; 7.4, 7.8, 7.8, 11.2, 7.4, 7.4, 7.9, 7.3, 7.8, 7…\n$ `volatile acidity`     &lt;dbl&gt; 0.700, 0.880, 0.760, 0.280, 0.700, 0.660, 0.600…\n$ `citric acid`          &lt;dbl&gt; 0.00, 0.00, 0.04, 0.56, 0.00, 0.00, 0.06, 0.00,…\n$ `residual sugar`       &lt;dbl&gt; 1.9, 2.6, 2.3, 1.9, 1.9, 1.8, 1.6, 1.2, 2.0, 6.…\n$ chlorides              &lt;dbl&gt; 0.076, 0.098, 0.092, 0.075, 0.076, 0.075, 0.069…\n$ `free sulfur dioxide`  &lt;dbl&gt; 11, 25, 15, 17, 11, 13, 15, 15, 9, 17, 15, 17, …\n$ `total sulfur dioxide` &lt;dbl&gt; 34, 67, 54, 60, 34, 40, 59, 21, 18, 102, 65, 10…\n$ density                &lt;dbl&gt; 0.9978, 0.9968, 0.9970, 0.9980, 0.9978, 0.9978,…\n$ pH                     &lt;dbl&gt; 3.51, 3.20, 3.26, 3.16, 3.51, 3.51, 3.30, 3.39,…\n$ sulphates              &lt;dbl&gt; 0.56, 0.68, 0.65, 0.58, 0.56, 0.56, 0.46, 0.47,…\n$ alcohol                &lt;dbl&gt; 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 1…\n$ quality                &lt;dbl&gt; 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5,…\n$ type                   &lt;chr&gt; \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"…",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#build-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#build-correlation-matrix-pairs-method",
    "title": "Hands-on_Ex05-2",
    "section": "",
    "text": "We will use pairs function of R Graphics to create a scatterplot matrix. There are many other ways to do so, too. See pairs function.\n\n\n\npairs(x, ...)\n\n## S3 method for class 'formula'\npairs(formula, data = NULL, ..., subset,\n      na.action = stats::na.pass)\n\n## Default S3 method:\npairs(x, labels, panel = points, ...,\n      horInd = 1:nc, \n      verInd = 1:nc,\n      lower.panel = panel, \n      upper.panel = panel,\n      diag.panel = NULL, \n      text.panel = textPanel,\n      label.pos = 0.5 + has.diag/3, \n      line.main = 3,\n      cex.labels = NULL, font.labels = 1,\n      row1attop = TRUE, gap = 1, \n      log = \"\",\n      horOdd = !row1attop, \n      verOdd = !row1attop)\n\n\nFigure below shows the scatterplot matrix of Wine Quality Data: 11x11 matrix.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npairs(wine[,1:11],\n      main = \"Correlation Matrix\")\n\n\n\n\n\n\n\n\n\nFigure below shows scatterplot matrix with different variables columns 2 to 12 of wine dataframe: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npairs(wine[,2:12],\n      main = \"Correlation Matrix with 2:12 vars\")\n\n\n\n\n\n\n\n\n\nFigure below shows scatterplot matrix with chosen variables: total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npairs(wine[, c(\"total sulfur dioxide\", \"density\", \"pH\", \"sulphates\", \"alcohol\")],\n      main = \"Correlation Matrix with 2:12 vars\")\n\n\n\n\n\n\n\n\n\n\n\n\nTo show the lower half of the correlation matrix, the upper.panelargument will be used as shown in the code chunk below.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\nWe can also display the upper half.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\npanel.cor &lt;- function(x, y, digits = 2, prefix = \"\", cex.cor, ...) {\n  usr &lt;- par(\"usr\")\n  on.exit(par(usr))\n  par(usr = c(0, 1, 0 , 1))\n  r &lt;- abs(cor(x, y, use = \"complete.obs\"))\n  txt &lt;- format(c(r, 0.123456789), digits = digits)[1]\n  text &lt;- paste(prefix, txt, sep = \"\")\n  if(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[, 2:12],\n      upper.panel = panel.cor)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualise-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualise-correlation-matrix-ggcormat",
    "title": "Hands-on_Ex05-2",
    "section": "",
    "text": "Correlation matrix with scatterplot can look cluttered when observations are more than 500. Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used. 3 R packages will be used to plot corrgram: corrgram, ellipse and corrplot.\nHere we will visualise correlation matrix with ggcorrmat() of ggstatsplot package.\n\n\nAdvantage of using ggcormat() over many other methods to visualise correlation matrix is its ability to provide a comprehensive and statistical report.\nggcorrmat() uses the following default arguments:\n\nmatrix.type = “upper”\nsig.level = 0.05\nconf.level = 0.95\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  ggcorrplot.args = list(\n    lab_size = 2.8,\n    tl.cex = 8,\n    pch.cex = 8\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggstatsplot::ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  colors = c(\"#ed939d\", \"#fcfaf8\", \"#82afd9\"),\n  ggcorrplot.args = list(outline.color = \"black\",\n                         hc.order = TRUE,\n                         lab_size = 2.8,\n                         tl.cex = 8,\n                         pch.cex = 8),\n  title = \"Corrlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p&lt; 0.05\"\n)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\nggplot.component = list(\n  theme(text = element_text(size = 5),\n        axis.text.x = element_text(size = 8),\n        axis.text.y = element_text(size = 8))\n)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#build-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#build-multiple-plots",
    "title": "Hands-on_Ex05-2",
    "section": "",
    "text": "ggstasplot is an extension of ggplot2, so also supports faceting. However the feature is in the grouped_ggcorrmat() of ggstatsplot.\n\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  colors = c(\"#ed939d\", \"#fcfaf8\", \"#82afd9\"),\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\",\n                         hc.order = TRUE,\n                         lab_size = 4,\n                         tl.cex = 12,\n                         pch.cex = 9\n                         ),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n) \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUse fig-width and fig-height to adjust the spaces.\nTo build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualise-correlation-matrix-using-corrplot-pakcage",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#visualise-correlation-matrix-using-corrplot-pakcage",
    "title": "Hands-on_Ex05-2",
    "section": "",
    "text": "🔆 Resource: An Introduction to corrplot Package\n\n\n\nCompute the correlation matrix of wine data frame\n\n\nwine.cor &lt;- cor(wine[,1:11])\n\n\nUse corrplot() to plot the corrgram by using all the default settings.\n\n\npar(bg = \"#f1f4f5\")\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\n\n\nThe default settings\n\n\n\nvisual object used to plot the coorgram: circle\nlayout of the corrgram: symmetric matrix\ncolor scheme: diverging blue-red\nThe intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient.\nDarker colours indicate relatively stronger linear relationship between the paired variables\n\n\n\n\n\nMore settings\n\n\n\nmatrix.type: Character, \"full\" (default), \"upper\" or \"lower\", display full matrix, lower triangular or upper triangular matrix.\nmethod: Character argument that decides the visualization method of correlation matrix to be used. Allowed values are square (default), circle\ncorr.method: A character string indicating which correlation coefficient is to be computed (pearson (default) or kendall or spearman). robust can also be entered but only if output argument is set to either correlations or p-values. The robust correlation used is percentage bend correlation (see ?WRS2::pball). Abbreviations will also work: \"p\" (for parametric/Pearson’s r), \"np\" (nonparametric/Spearman’s rho), r (robust).\ndigits: Decides the number of decimal digits to be displayed (Default: 2)\nsig.level: Significance level (Default: 0.05). If the p-value in p-value matrix is bigger than sig.level, then the corresponding correlation coefficient is regarded as insignificant and flagged as such in the plot. This argument is relevant only when output = \"plot\".\nggtheme:\nA function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).\nsubtitle: The text for the plot subtitle.\nlab.col: Color to be used for the correlation coefficient labels (applicable only when lab = TRUE).\nlab.size: Size to be used for the correlation coefficient labels (applicable only when lab = TRUE).\nmessages: Decides whether messages references, notes, and warnings are to be displayed (Default: TRUE).\noutline = to draw the black outline of the correlation objects such as circles or squares.\naddgrid.col = to determine the color of the grids. Would dissapear if NA.\norder = the order of the columns. If not specified it is plotted as in the original matrix, but sometimes it is not so informative. Possible methods are: “AOE” (angular order of the eigenvectors), “FPC” (first principal component), “hclust”, “alphabet”. There is also hclust.method to determine the agglomeration method if the order is “hclust”.\naddrect = when the order is “hclust”, determines the number of rectangles according to the hierarchical cluster. rect.something arguments are about the rectangles added according to this argument.\ncl.something = these are the arguments about the color legend.\ntl.something = these are the arguments about the text labels.\n\n\n\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle, like the figure in 6.1.\nThe default setting can be changed by using the method argument. See the code below:\n\nellipsesquarenumbershadecolorpieaddrect\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Ellipse\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"square\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"number\",\n         number.cex = 0.65,\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Number\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"shade\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Shade\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"color\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Color\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"pie\",\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         title = \"Correlation Plot with Pie\")\n\n\n\n\n\n\n\n\n\n\n\naddrect argument sets the value in numbers representing the number of clusters.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         outline = T,\n         addgrid.col = \"darkgray\",\n         order=\"hclust\",\n         addrect = 4,   \n         rect.col = \"black\",\n         rect.lwd = 5,\n         cl.pos = \"b\",\n         tl.col = \"indianred4\",\n         tl.cex = 0.6,\n         tl.srt = 45,\n         bg = \"#f1f4f5\",\n         #addCoef.col = \"white\",\n         #number.digits = 2,\n         #number.cex = 0.75,\n         title=\"Correlation Plot with Ellipses and Clusters\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncorrplor() supports three layout types, namely: full, upper or lower. The default is full which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         type = \"lower\",\n         tl.srt = 45,\n         title = \"Correlation Plot - Lower Type\")\n\n\n\n\n\n\n\n\n\n\nTo turn off the diagonal cells: diag\nTo change the axis text label colour: tl.col\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.cex = 0.5,\n         tl.offset = 1.5,\n         tl.srt = 45,\n         cl.cex = 0.5,\n         cl.offset = 1,\n         title = \"Correlation Plot - Text Label in Black\")\n\n\n\n\n\n\n\n\n\n\n\n\nTo create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot.mixed(wine.cor,\n               lower = \"ellipse\",\n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\",\n               tl.cex = 0.6,\n               tl.srt = 45,\n               number.cex = 0.5)\n\n\n\n\n\n\n\n\n\nNote that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram.\nThe argument tl.pos, on the other, is used to specify the placement of the axis label.\nLastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n\nWe are also interested to know which pair of variables their correlation coefficient are statistically significant. Figure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor,\n                     conf.level = .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         tl.cex = 0.6,\n         number.cex = 0.7,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used. It should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n“alphabet” for alphabetical order. “AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               tl.srt = 45,\n               tl.cex = 0.6,\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n\n\n\n\nIf using hclust, corrplot()can draw rectangles around the corrgram based on the results of hierarchical clustering. addrect indicates the number of clusters.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\ncorrplot(wine.cor,\n         method = \"ellipse\",\n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         tl.cex = 0.6,\n         tl.srt = 45,\n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3\n         )\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\n## text labels rotated 45 degrees and  wider color legend with numbers right aligned\ncorrplot(wine.cor, \n         type = 'lower', \n         order = 'hclust', \n         tl.col = 'black',\n         tl.cex = 0.5,\n         cl.ratio = 0.2, \n         tl.srt = 45, \n         col = COL2('PuOr', 10))\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\n## text labels rotated 45 degrees and  wider color legend with numbers right aligned\ncorrplot(wine.cor, \n         type = \"upper\", \n         order = \"hclust\",\n         hclust.method = \"ward.D\",\n         tl.col = 'black',\n         tl.cex = 0.5, \n         tl.srt = 45, \n         col = c('white', 'black'),\n         bg = \"gold2\")\n\n\n\n\n\n\n\n\n\n\n\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. The American Statistician, 56, 316–324.\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. The American Statistician, 50, 178–180.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html",
    "title": "Hands-on_Ex05-1",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.)\nThe display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, I will build ternary plot programmatically using R for visualising and analysing population structure of Singapore. Here are the 4 steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.\n\n\n\n\n2 main R packages will be used.\n\n\n\nR Package\nOverview\n\n\n\n\nggtern\na ggplot extension that plots ternary diagrams. The package will be used to plot static ternary plots.\n\n\nPlotply R\nan R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js.\nThe plotly R library contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\ntidyverse\nselected tidyverse family packages: readr, dplyr and tidyr are installed and loaded.\n\n\n\nVersion 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2, because the current version of ggtern package is not compatible to the latest version of ggplot2.\n\npacman::p_load(plotly, ggtern, tidyverse)\n\n\n\n\n\n\nThe Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used.\nFile name: respopagsex2000to2018_tidy.csv\n\nImport dataPrepare data\n\n\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\nhead(pop_data)\n\n# A tibble: 6 × 5\n  PA         SZ                     AG      Year Population\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2011        290\n2 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2012        270\n3 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2013        260\n4 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2014        250\n5 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2015        260\n6 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2016        250\n\n\n\n\nUse mutate() function of dplyr package to derive 3 new measures, namely: young, active and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year)) %&gt;%\n  spread(AG, Population) %&gt;% #turn the values in Population col into AG cols.\n  mutate(YOUNG = rowSums(.[4:8])) %&gt;% #Age 0-24\n  mutate(ACTIVE = rowSums(.[9:16])) %&gt;% #Age 25-64\n  mutate(OLD = rowSums(.[17:21])) %&gt;% #Age &gt;65\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;% #Age \n  filter(Year == 2018) %&gt;%\n  filter(TOTAL &gt;0)\n\n\n\n\n\n\n\n\n\n+, -, log(), etc., for their usual mathematical meanings\nlead(), lag()\ndense_rank(), min_rank(), percent_rank(), row_number(), cume_dist(), ntile()\ncumsum(), cummean(), cummin(), cummax(), cumany(), cumall()\nna_if(), coalesce()\nif_else(), recode(), case_when()\n\n\n\n\nBecause mutating expressions are computed within groups, they may yield different results on grouped tibbles. This will be the case as soon as an aggregating, lagging, or ranking function is involved. Compare this ungrouped mutate:\nstarwars %&gt;%\n  select(name, mass, species) %&gt;%\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\n\n\n\nstarwars %&gt;%\n  select(name, mass, species) %&gt;%\n  group_by(species) %&gt;%\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\nThe former normalises mass by the global average whereas the latter normalises by the averages within species levels.\n\n\n\n\n\n\n\nUse ggtern() function of ggtern package to create a simple ternary plot:\n\nClassictheme_rgbw()Interactive\n\n\n\n\nShow the code\n#Building the static ternary plot\nggtern(data=agpop_mutated, \n       aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggtern(data = agpop_mutated, \n       aes(\n         x = YOUNG, y = ACTIVE, z = OLD\n)) +\n  geom_point() +\n  labs(title = \"Popultation structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n\nUse plot_ly() to create an interactive plot.:\n\n\nShow the code\n# Function for creating annotation object too\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1, #Position of the annotation in the plot\n    ax = 0, ay = 0, #annotation has no arrow\n    xref = \"paper\", yref = \"paper\",  #Positioning is relative to the entire figure, not data points\n    align = \"center\",\n    font = list(family = \"Calibri\", size = 15, color = \"white\"),\n    bgcolor = \"#000000\", # Background color of the annotation box (light gray)\n    bordercolor = \"black\", \n    borderwidth = 2\n  )\n}\n\n# Function for creating axis formatting too\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiate a plotly visualization\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#overview",
    "title": "Hands-on_Ex05-1",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.)\nThe display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, I will build ternary plot programmatically using R for visualising and analysing population structure of Singapore. Here are the 4 steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex05-1",
    "section": "",
    "text": "2 main R packages will be used.\n\n\n\nR Package\nOverview\n\n\n\n\nggtern\na ggplot extension that plots ternary diagrams. The package will be used to plot static ternary plots.\n\n\nPlotply R\nan R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js.\nThe plotly R library contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\ntidyverse\nselected tidyverse family packages: readr, dplyr and tidyr are installed and loaded.\n\n\n\nVersion 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2, because the current version of ggtern package is not compatible to the latest version of ggplot2.\n\npacman::p_load(plotly, ggtern, tidyverse)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#data-preparation",
    "title": "Hands-on_Ex05-1",
    "section": "",
    "text": "The Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used.\nFile name: respopagsex2000to2018_tidy.csv\n\nImport dataPrepare data\n\n\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\nhead(pop_data)\n\n# A tibble: 6 × 5\n  PA         SZ                     AG      Year Population\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2011        290\n2 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2012        270\n3 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2013        260\n4 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2014        250\n5 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2015        260\n6 Ang Mo Kio Ang Mo Kio Town Centre AGE0-4  2016        250\n\n\n\n\nUse mutate() function of dplyr package to derive 3 new measures, namely: young, active and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year)) %&gt;%\n  spread(AG, Population) %&gt;% #turn the values in Population col into AG cols.\n  mutate(YOUNG = rowSums(.[4:8])) %&gt;% #Age 0-24\n  mutate(ACTIVE = rowSums(.[9:16])) %&gt;% #Age 25-64\n  mutate(OLD = rowSums(.[17:21])) %&gt;% #Age &gt;65\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;% #Age \n  filter(Year == 2018) %&gt;%\n  filter(TOTAL &gt;0)\n\n\n\n\n\n\n\n\n\n+, -, log(), etc., for their usual mathematical meanings\nlead(), lag()\ndense_rank(), min_rank(), percent_rank(), row_number(), cume_dist(), ntile()\ncumsum(), cummean(), cummin(), cummax(), cumany(), cumall()\nna_if(), coalesce()\nif_else(), recode(), case_when()\n\n\n\n\nBecause mutating expressions are computed within groups, they may yield different results on grouped tibbles. This will be the case as soon as an aggregating, lagging, or ranking function is involved. Compare this ungrouped mutate:\nstarwars %&gt;%\n  select(name, mass, species) %&gt;%\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\n\n\n\nstarwars %&gt;%\n  select(name, mass, species) %&gt;%\n  group_by(species) %&gt;%\n  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))\nThe former normalises mass by the global average whereas the latter normalises by the averages within species levels.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plot-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plot-ternary-diagram-with-r",
    "title": "Hands-on_Ex05-1",
    "section": "",
    "text": "Use ggtern() function of ggtern package to create a simple ternary plot:\n\nClassictheme_rgbw()Interactive\n\n\n\n\nShow the code\n#Building the static ternary plot\nggtern(data=agpop_mutated, \n       aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggtern(data = agpop_mutated, \n       aes(\n         x = YOUNG, y = ACTIVE, z = OLD\n)) +\n  geom_point() +\n  labs(title = \"Popultation structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n\nUse plot_ly() to create an interactive plot.:\n\n\nShow the code\n# Function for creating annotation object too\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1, #Position of the annotation in the plot\n    ax = 0, ay = 0, #annotation has no arrow\n    xref = \"paper\", yref = \"paper\",  #Positioning is relative to the entire figure, not data points\n    align = \"center\",\n    font = list(family = \"Calibri\", size = 15, color = \"white\"),\n    bgcolor = \"#000000\", # Background color of the annotation box (light gray)\n    bordercolor = \"black\", \n    borderwidth = 2\n  )\n}\n\n# Function for creating axis formatting too\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiate a plotly visualization\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, I will create animated data visualisation with gganimate and plotly r packages. At the same time, I will learn how to 1/ reshape data by using tidyr package, and 2/ process, wrangle and transform datawith dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames - like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore starting making animated graphs, think of the question first:\nDoes it make sense to go through the effort?\nIf you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly: R library for plotting interactive statistical graphs.\ngganimate: a ggplot extension for creating animated statistical graphs.\ngifski: converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminer: an excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      shee=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() show in the code chunk below.\n\n\n❓ mutate_at() links back to the same page in textbook?\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how to positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, - transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year) - ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n🦖 PracticeOriginal\n\n\n🦖 Different theme and title, ease_aes\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'The animated bubble chart | Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('cubic-in-out') +\n  theme_dark()\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same ID (which helps facilitate object constancy).\n\n\nIn this sub-section, we will learn how to create an animated bubble plot by using ggplotly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_bw()\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme_bw()\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\nNotice that although show.legend=FALSE argument was used, the legend still appears on the plot.\nTo overcome this problem, `theme(legend.position=‘none’) should be used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nIn this sub-section, we will learn how to create an animated bubble plot with plot_ly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Adjusted bubble sizes\n\nbp2 &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,500),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by a senior\n\nBuilding an animation step-by-step with gganimate\n\nCreating a composite gif with multiple gganimate panels\n\n\n\n\n📝 Used Tableau to design a prototype, then implemented with gganimate.\n\n🎯 Try to use the methods to implement an animation.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#overview",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, I will create animated data visualisation with gganimate and plotly r packages. At the same time, I will learn how to 1/ reshape data by using tidyr package, and 2/ process, wrangle and transform datawith dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames - like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore starting making animated graphs, think of the question first:\nDoes it make sense to go through the effort?\nIf you are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#getting-started",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly: R library for plotting interactive statistical graphs.\ngganimate: a ggplot extension for creating animated statistical graphs.\ngifski: converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminer: an excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      shee=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() show in the code chunk below.\n\n\n❓ mutate_at() links back to the same page in textbook?\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how to positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, - transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year) - ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n🦖 PracticeOriginal\n\n\n🦖 Different theme and title, ease_aes\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'The animated bubble chart | Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('cubic-in-out') +\n  theme_dark()\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#animated-data-visualisation-plotly",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same ID (which helps facilitate object constancy).\n\n\nIn this sub-section, we will learn how to create an animated bubble plot by using ggplotly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_bw()\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme_bw()\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\nNotice that although show.legend=FALSE argument was used, the legend still appears on the plot.\nTo overcome this problem, `theme(legend.position=‘none’) should be used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\nIn this sub-section, we will learn how to create an animated bubble plot with plot_ly() method.\n\n🦖 PracticePlotCode\n\n\n🦖 Adjusted bubble sizes\n\nbp2 &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,500),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#reference",
    "title": "Hands-on_Ex03_2",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by a senior\n\nBuilding an animation step-by-step with gganimate\n\nCreating a composite gif with multiple gganimate panels\n\n\n\n\n📝 Used Tableau to design a prototype, then implemented with gganimate.\n\n🎯 Try to use the methods to implement an animation.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "title": "Hands-on Ex04-1",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In Session 1, there are some of the popular statustistical graphics methods for visualising distribution, such as histogram, probability density curve (pdf), boxplot, notch plot and violin plot, and how they can be created using ggplot2.\nIn this session, we will learn two relatively new statistical graphic methods for visualisaing distribution, namely ridgeline plot and raincloud plot using ggplot2 and its extensions.\n\n\n\n\n\nThe following R packages will be used for this exercise.\n\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\nggdist: a ggplot2 extension specially designed for visualising distribution and uncertainty.\ntidyverse: a family of R packages to meet the modern data science and visual communication needs\nggthemes: a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package.\ncolorspace: a R pckage provides a broad toolbox for selecting individual colours or colour palettes, manipulating these colours, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used loading these R pakcages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n\n🦄 WHAT FOR\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than ~6 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\nFigure below is a ridgelines plot showing the distribution of English scores by class.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 2.5,\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot ridgeline plots. They are:\ngrom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n🦖 PracticeExample plot\n\n\n🦖 Changed colour fill, opacity, no grid lines and scale.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 5,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"pink\", 0.5),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges(grid = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid colour but rather with colours that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges()\n\n🦖 PracticeExample plot\n\n\n🦖 Applied a different filling colour scheme.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"G\") +\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBesides providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPracticeExample plot\n\n\nUsed scale_fill_viridis_b to replace scale_fill_viridis_c, and changed theme colour.\n❓ Need discrete data to use scale_fill_viridis_d ? &gt; see next example!\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_b(name = \"Tail probability\",\n                       option = \"B\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n🦖 PracticeExample Plot\n\n\n🦖 Changed theme colours\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\",\n                       option = \"B\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cutting points such as 2.5% and 97.5% tails to colour the ridgeline plot, shown in figure below.\n\n📝 alpha in scale_fill_manual()\n\n🦖 PracticeExample Plot\n\n\n🦖。Changed colours fill.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = alpha(c(\"#E76F51\", \"#FCEDA0\", \"#6AA68B\"), 0.5),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional boxplot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualisation, which contains a half-density and a slab-interval.\n\n🦖 PracticeExample Plot\n\n\n🦖 With slab interval; changed color for the slab & interval, points.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"pink\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.6,\n               interval_colour = \"skyblue\",\n               point_fill = \"yellow\",\n               point_colour = \"red\",\n               point_size = 2\n) \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from code above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n🦖 PracticeExample Plot\n\n\n🦖 Changed slab colour, fill, linetype to dotline, slab alpha, and added color to the boxplot. Outliers are shown as well.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"pink\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.4,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               col = \"steelblue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = \"left\" to indicate we want it on the left-hand side.\n\nPracticeExample Plot\n\n\n🦖 Changed stat_dots color by CLASS\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"grey\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.4,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               col = \"grey\",\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2,\n            aes(color = CLASS))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flit() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nPracticeExample Plot\n\n\nUsed a different theme theme_stata() and changed colours for the slab and dots.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"grey\",\n               slab_fill = \"#D6DED5\",\n               slab_linetype = \"solid\",\n               slab_linewidth = 0.4,\n               slab_alpha = 0.5,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.2,\n            aes(color = CLASS)) +\n              \n  coord_flip() +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n🕵️ Notice the there are fewer dots when using colours to display CLASS.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.2) +\n  coord_flip() +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroducing Ridgeline Plots (formerly Joyplots)\n🎯 Claus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms\nAdditional reference: Cedric Scherer Data Visualization & Info Disign [slides]",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#learning-outcome",
    "title": "Hands-on Ex04-1",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In Session 1, there are some of the popular statustistical graphics methods for visualising distribution, such as histogram, probability density curve (pdf), boxplot, notch plot and violin plot, and how they can be created using ggplot2.\nIn this session, we will learn two relatively new statistical graphic methods for visualisaing distribution, namely ridgeline plot and raincloud plot using ggplot2 and its extensions.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#getting-started",
    "title": "Hands-on Ex04-1",
    "section": "",
    "text": "The following R packages will be used for this exercise.\n\nggridges: a ggplot2 extension specially designed for plotting ridgeline plots\nggdist: a ggplot2 extension specially designed for visualising distribution and uncertainty.\ntidyverse: a family of R packages to meet the modern data science and visual communication needs\nggthemes: a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package.\ncolorspace: a R pckage provides a broad toolbox for selecting individual colours or colour palettes, manipulating these colours, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used loading these R pakcages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Ex04-1",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n\n🦄 WHAT FOR\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than ~6 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\nFigure below is a ridgelines plot showing the distribution of English scores by class.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 2.5,\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot ridgeline plots. They are:\ngrom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n🦖 PracticeExample plot\n\n\n🦖 Changed colour fill, opacity, no grid lines and scale.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 5,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"pink\", 0.5),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges(grid = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid colour but rather with colours that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges()\n\n🦖 PracticeExample plot\n\n\n🦖 Applied a different filling colour scheme.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"G\") +\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBesides providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPracticeExample plot\n\n\nUsed scale_fill_viridis_b to replace scale_fill_viridis_c, and changed theme colour.\n❓ Need discrete data to use scale_fill_viridis_d ? &gt; see next example!\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_b(name = \"Tail probability\",\n                       option = \"B\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n🦖 PracticeExample Plot\n\n\n🦖 Changed theme colours\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\",\n                       option = \"B\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cutting points such as 2.5% and 97.5% tails to colour the ridgeline plot, shown in figure below.\n\n📝 alpha in scale_fill_manual()\n\n🦖 PracticeExample Plot\n\n\n🦖。Changed colours fill.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = alpha(c(\"#E76F51\", \"#FCEDA0\", \"#6AA68B\"), 0.5),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualsing-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualsing-distribution-with-raincloud-plot",
    "title": "Hands-on Ex04-1",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional boxplot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, we will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualisation, which contains a half-density and a slab-interval.\n\n🦖 PracticeExample Plot\n\n\n🦖 With slab interval; changed color for the slab & interval, points.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"pink\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.6,\n               interval_colour = \"skyblue\",\n               point_fill = \"yellow\",\n               point_colour = \"red\",\n               point_size = 2\n) \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from code above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n🦖 PracticeExample Plot\n\n\n🦖 Changed slab colour, fill, linetype to dotline, slab alpha, and added color to the boxplot. Outliers are shown as well.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"pink\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.4,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               col = \"steelblue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = \"left\" to indicate we want it on the left-hand side.\n\nPracticeExample Plot\n\n\n🦖 Changed stat_dots color by CLASS\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"black\",\n               slab_fill = \"grey\",\n               slab_linetype = \"dashed\",\n               slab_linewidth = 0.3,\n               slab_alpha = 0.4,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               col = \"grey\",\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2,\n            aes(color = CLASS))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLastly, coord_flit() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nPracticeExample Plot\n\n\nUsed a different theme theme_stata() and changed colours for the slab and dots.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               slab_color = \"grey\",\n               slab_fill = \"#D6DED5\",\n               slab_linetype = \"solid\",\n               slab_linewidth = 0.4,\n               slab_alpha = 0.5,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.2,\n            aes(color = CLASS)) +\n              \n  coord_flip() +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n🕵️ Notice the there are fewer dots when using colours to display CLASS.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.2) +\n  coord_flip() +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroducing Ridgeline Plots (formerly Joyplots)\n🎯 Claus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms\nAdditional reference: Cedric Scherer Data Visualization & Info Disign [slides]",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html",
    "title": "Hands-on Ex04-3",
    "section": "",
    "text": "In this chapter, we will do hands-on in creating statistical graphics for visualising uncertainty.\n\nto plot statistics error bars by using ggplot2\nto plot interactive error bars by combining ggplot2, plotly and DT\nto create advanced using ggdist\nto create hypothetical outcome plots (HOPs) with ungeviz package\n\n\n\n\n\n\nThe following R packages will be used for this exercise:\n\ntidyverse: a family of R packages for data science process\nplotly: can create interactive plot\ngganimate: can create animation plot\nDT: can display interactive HTML table\ncrosstalk: to implement cross-widget interactions (currently linked brushing and filtering)\nggdist: to visualise distribution and uncertainty\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, corsstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n\nThe Exam_data.csv dataset will be used for this exercise.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nA point estimate is a single number, such as a mean score. Uncertainty, is expressed as standard error, confidence interval, or credible interval. Don’t confuse the uncertainty of a point estimate with the variation in the sample.\nNow, we will plot error bars of MATHS scores by RACE using the data provided in exam tibble data frame.\nCode below will be used to derive the necessary summary statistics:\n\nCodeMathematics\n\n\n\nmy_sum &lt;- exam %&gt;%\n  #group the observation by RACE; group_by() from dplyr package\n  group_by(RACE) %&gt;% \n  \n  #compute the count of observations, mean, standard deviation\n  summarise( \n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n  ) %&gt;%\n  \n  #derive standard error of Maths by RACE\n  mutate(se=sd/sqrt(n-1)) \n\nThe output is saved as a tibble data table called my_sum.\n\n\n\n\n\n\nSummary of code above\n\n\n\n\ngroup_by() from dplyr package is used to group the observation by RACE\nsummarise() is used to compute count of observations, mean, standard deviation\nmutate() is used to derive standard error of MATHS by RACE\n\n\n\n\n\n\n\n\n\n🔑🔑🔑 Next code is used to display my_sum tibble data frame in an HTML table format.\n\nCodeTable\n\n\nknitr:::kable(head(my_sum),\n              format = 'html')\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\nNow, plotting the standard error bars for the mean score of MATHS by RACE.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary of code above\n\n\n\n\nThe error bars are computed by using the formula mean +/- se\nFor geom_point(), it is important to indicate stat=\"identity\"\n\n\n\n\n\nggplot(my_sum) + \n  geom_errorbar(\n    aes(x = RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width = 0.2,\n    colour = \"blue\",\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(\n    aes(x = RACE,\n        y = mean),\n    stat = \"identity\",\n    color = \"red\",\n    size = 2.5,\n    alpha = 1\n  ) +\n  ggtitle(\"Standard Error of Mean MATHS Score by RACE\")\n\n\n\n\n\n\nInstead of plotting error bars of point estimates, we can also plot Confidence Intervals of the mean scores of MATHS by RACE.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x = reorder(RACE, -mean),\n        ymin=mean-1.96*se,\n        ymax=mean+1.96*se),\n    width=0.2,\n    colour=\"darkgreen\",\n    alpha=0.9,\n    size=1\n  ) + \n  geom_point(aes(\n    x = RACE,\n    y = mean),\n    stat=\"identity\",\n    color=\"red\",\n    alpha=1,\n    size=5\n    ) +\n  labs(x = \"MATHS score\",\n       title = \"95% Confidence Interval of Mean MATHS Score by RACE\")\n\n\n\n\n\n\nSummary of code\n\n\n\n\nThe Confidence Intervals are computed by using the formula mean +/- 1.96*se\nThe error bars are sorted using the average maths scores\nlabs() argument of ggplot2 is used to change the x-axis label\n\n\n\n\n\n\n\n\n\nTo plot interactive error bars for the 99% Confidence Interval of the mean score for MATHS by RACE.\n\n\nThe primary use for SharedData is to be passed to Crosstalk-compatible widgets in place of a data frame. Each SharedData$new(...) call makes a new “group” of widgets that link to each other, but not to widgets in other groups. You can also use a SharedData object from Shiny code in order to react to filtering and brushing from non-widget visualizations (like ggplot2 plots).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#install.packages(\"leaflet\")\nlibrary(shiny)\nlibrary(crosstalk)\nlibrary(leaflet)\nlibrary(DT)\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4.5,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(\n                     aes(x = reorder(RACE, -mean),\n                         ymin = mean-2.58*se,\n                         ymax = mean+2.58*se),\n                     width = 0.2,\n                     colour = \"blue\",\n                     alpha = 0.8,\n                     size = 0.6\n                   ) +\n                   geom_point(\n                     aes(x = RACE,\n                         y = mean,\n                         text = paste(\"Race: \", `RACE`,\n                                      \"&lt;br&gt;N: \", `n`,\n                                      \"&lt;br&gt;Avg. Scores: \", round(mean, digits = 2),\n                                      \"&lt;br&gt;95% CI:[\",\n                                      round((mean-2.58*se), digits = 2), \",\",\n                                      round((mean+2.58*se), digits = 2), \"]\")),\n                        stat = \"identity\",\n                        color = \"pink\",\n                        size = 2.5,\n                        alpha = 1) +\n                   xlab(\"Race\") +\n                   ylab(\"Average Scores\") +\n                   theme_minimal() +\n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.8, hjust = 1),\n                     plot.title = element_text(size = 8, face = \"bold\")) +\n                   ggtitle(\"99% Confidence Interval of &lt;br&gt;Average MATHS Score by RACE\")),\n                tooltip = \"text\"),\n       DT::datatable(shared_df,\n                     rownames = FALSE,\n                     class = \"compact\",\n                     width = \"150%\",\n                     options = list(pageLength = 10,\n                                    scrollX=T),\n                     colnames = c(\"No. of pupils\",\n                                  \"Avg. scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns = c('mean', 'sd', 'se'),\n                     digits = 2))\n\n\n\n\n\n\n\nggdist for distribution and uncertainty visualisation:\nIt is an R package that provides flexible set of ggplot2 geoms and stats designed for visualising distributions and uncertainty.\nIt can visualise both frequentist and Bayesian uncertainty. Uncertainty visualization can be unified through the perspective of distribution visualization.\n\nFrequentist model: one visualises confidence distribution or bootstrap distributions (see vignette (“freq-uncertainty-vis”) ::: column-margin ## Setup for Frequentist uncertainty visualization\n\n\n\nFrequentist uncertainty visualization Setup\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggdist)\nlibrary(ggplot2)\nlibrary(broom)\nlibrary(distributional)\n\ntheme_set(theme_ggdist())\n\nBayesian model: one visualises probability distributions (see tidyverse package that builds on top of ggdist)\n\n\nVisualisationCheatsheet\n\n\n\n\n\n\n\n\n\n\n\nstat_pointinterval() of ggdist is used in the code below to build a visualisation to display distribution of MATHS scores by RACE.\n\nPlotCode🦖 + arguments\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x= RACE,\n             y = MATHS)) +\n  stat_pointinterval(\n    color = \"skyblue\"\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Scores for MATHS\",\n    subtitle = \"Mean point + multiple-interval plot\"\n  )\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments. See next tab for example.\n\n\n\n\nAdded the following arguments\n\n.width = 0.95\n.point = median\n.interval = qi\ncolor = red\n\n\n\nShow the code\ntheme_set(theme_bw())\n\nexam %&gt;%\n  ggplot(aes(\n    x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    .point = median,\n    .interval = qi,\n    color = \"red\") +\n  labs(title = \"Visualising Confidence Intervals of Median Scores for MATHS by RACE\",\n       subtitle = \"Median point + multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nDIY to show 95% and 99% confidence intervals.\n\n\n\n\nShow the code\nexam %&gt;%\nggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE,\n    .width = c(0.95, 0.99),\n    aes(interval_color = stat(level)),\n    point_fill = \"grey\",\n    point_colour = \"grey\",\n    point_size = 5\n  ) +\n  #Define colors of the intervals\n  scale_color_manual(\n    values = c(\"steelblue\", \"pink\"),\n    aesthetics = \"interval_color\"\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Scores for MATHS by RACE\",\n    subtitle = \"Mean point + multiple-interval plot\"\n  ) +\n  theme(\n    panel.background = element_rect(fill = \"transparent\", color = NA),\n    plot.background = element_rect(fill = \"transparent\", color = NA),\n    legend.background = element_rect(fill = \"transparent\", color = NA)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nstat_gradientinterval() of ggdist is used in the code below to build a visualisation for displaying distribution of MATHS scores by RACE.\n\n\nShow the code\nexam %&gt;%\n  ggplot(\n    aes(x = RACE,\n        y = MATHS)) +\n  stat_gradientinterval(\n    fill = \"skyblue\",\n    show.legend = TRUE\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Score for MATHS by RACE\",\n    subtitle = \"Gradient + interval plot\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n1️⃣ Step 1: Install ungeviz package\ndevtools::install_github(\"wilkelab/ungeviz\")\n2️⃣ Step 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\nMATHS by RACEENGLISH by RACESCIENCE by RACE\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = MATHS)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.6, color = \"darkolivegreen\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"pink\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = ENGLISH)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.5, color = \"skyblue\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"azure4\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = SCIENCE)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.4, color = \"tan1\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"pink1\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\n\n\n\n🔖 Reading resource for HOPs:\nhttps://medium.com/hci-design-at-uw/hypothetical-outcomes-plots-experiencing-the-uncertain-b9ea60d7c740",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#learning-outcome",
    "title": "Hands-on Ex04-3",
    "section": "",
    "text": "In this chapter, we will do hands-on in creating statistical graphics for visualising uncertainty.\n\nto plot statistics error bars by using ggplot2\nto plot interactive error bars by combining ggplot2, plotly and DT\nto create advanced using ggdist\nto create hypothetical outcome plots (HOPs) with ungeviz package",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#getting-started",
    "title": "Hands-on Ex04-3",
    "section": "",
    "text": "The following R packages will be used for this exercise:\n\ntidyverse: a family of R packages for data science process\nplotly: can create interactive plot\ngganimate: can create animation plot\nDT: can display interactive HTML table\ncrosstalk: to implement cross-widget interactions (currently linked brushing and filtering)\nggdist: to visualise distribution and uncertainty\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, corsstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n\nThe Exam_data.csv dataset will be used for this exercise.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualising-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualising-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Ex04-3",
    "section": "",
    "text": "A point estimate is a single number, such as a mean score. Uncertainty, is expressed as standard error, confidence interval, or credible interval. Don’t confuse the uncertainty of a point estimate with the variation in the sample.\nNow, we will plot error bars of MATHS scores by RACE using the data provided in exam tibble data frame.\nCode below will be used to derive the necessary summary statistics:\n\nCodeMathematics\n\n\n\nmy_sum &lt;- exam %&gt;%\n  #group the observation by RACE; group_by() from dplyr package\n  group_by(RACE) %&gt;% \n  \n  #compute the count of observations, mean, standard deviation\n  summarise( \n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n  ) %&gt;%\n  \n  #derive standard error of Maths by RACE\n  mutate(se=sd/sqrt(n-1)) \n\nThe output is saved as a tibble data table called my_sum.\n\n\n\n\n\n\nSummary of code above\n\n\n\n\ngroup_by() from dplyr package is used to group the observation by RACE\nsummarise() is used to compute count of observations, mean, standard deviation\nmutate() is used to derive standard error of MATHS by RACE\n\n\n\n\n\n\n\n\n\n🔑🔑🔑 Next code is used to display my_sum tibble data frame in an HTML table format.\n\nCodeTable\n\n\nknitr:::kable(head(my_sum),\n              format = 'html')\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\nNow, plotting the standard error bars for the mean score of MATHS by RACE.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary of code above\n\n\n\n\nThe error bars are computed by using the formula mean +/- se\nFor geom_point(), it is important to indicate stat=\"identity\"\n\n\n\n\n\nggplot(my_sum) + \n  geom_errorbar(\n    aes(x = RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width = 0.2,\n    colour = \"blue\",\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(\n    aes(x = RACE,\n        y = mean),\n    stat = \"identity\",\n    color = \"red\",\n    size = 2.5,\n    alpha = 1\n  ) +\n  ggtitle(\"Standard Error of Mean MATHS Score by RACE\")\n\n\n\n\n\n\nInstead of plotting error bars of point estimates, we can also plot Confidence Intervals of the mean scores of MATHS by RACE.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x = reorder(RACE, -mean),\n        ymin=mean-1.96*se,\n        ymax=mean+1.96*se),\n    width=0.2,\n    colour=\"darkgreen\",\n    alpha=0.9,\n    size=1\n  ) + \n  geom_point(aes(\n    x = RACE,\n    y = mean),\n    stat=\"identity\",\n    color=\"red\",\n    alpha=1,\n    size=5\n    ) +\n  labs(x = \"MATHS score\",\n       title = \"95% Confidence Interval of Mean MATHS Score by RACE\")\n\n\n\n\n\n\nSummary of code\n\n\n\n\nThe Confidence Intervals are computed by using the formula mean +/- 1.96*se\nThe error bars are sorted using the average maths scores\nlabs() argument of ggplot2 is used to change the x-axis label\n\n\n\n\n\n\n\n\n\nTo plot interactive error bars for the 99% Confidence Interval of the mean score for MATHS by RACE.\n\n\nThe primary use for SharedData is to be passed to Crosstalk-compatible widgets in place of a data frame. Each SharedData$new(...) call makes a new “group” of widgets that link to each other, but not to widgets in other groups. You can also use a SharedData object from Shiny code in order to react to filtering and brushing from non-widget visualizations (like ggplot2 plots).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#install.packages(\"leaflet\")\nlibrary(shiny)\nlibrary(crosstalk)\nlibrary(leaflet)\nlibrary(DT)\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4.5,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(\n                     aes(x = reorder(RACE, -mean),\n                         ymin = mean-2.58*se,\n                         ymax = mean+2.58*se),\n                     width = 0.2,\n                     colour = \"blue\",\n                     alpha = 0.8,\n                     size = 0.6\n                   ) +\n                   geom_point(\n                     aes(x = RACE,\n                         y = mean,\n                         text = paste(\"Race: \", `RACE`,\n                                      \"&lt;br&gt;N: \", `n`,\n                                      \"&lt;br&gt;Avg. Scores: \", round(mean, digits = 2),\n                                      \"&lt;br&gt;95% CI:[\",\n                                      round((mean-2.58*se), digits = 2), \",\",\n                                      round((mean+2.58*se), digits = 2), \"]\")),\n                        stat = \"identity\",\n                        color = \"pink\",\n                        size = 2.5,\n                        alpha = 1) +\n                   xlab(\"Race\") +\n                   ylab(\"Average Scores\") +\n                   theme_minimal() +\n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.8, hjust = 1),\n                     plot.title = element_text(size = 8, face = \"bold\")) +\n                   ggtitle(\"99% Confidence Interval of &lt;br&gt;Average MATHS Score by RACE\")),\n                tooltip = \"text\"),\n       DT::datatable(shared_df,\n                     rownames = FALSE,\n                     class = \"compact\",\n                     width = \"150%\",\n                     options = list(pageLength = 10,\n                                    scrollX=T),\n                     colnames = c(\"No. of pupils\",\n                                  \"Avg. scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns = c('mean', 'sd', 'se'),\n                     digits = 2))",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualsing-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualsing-uncertainty-ggdist-package",
    "title": "Hands-on Ex04-3",
    "section": "",
    "text": "ggdist for distribution and uncertainty visualisation:\nIt is an R package that provides flexible set of ggplot2 geoms and stats designed for visualising distributions and uncertainty.\nIt can visualise both frequentist and Bayesian uncertainty. Uncertainty visualization can be unified through the perspective of distribution visualization.\n\nFrequentist model: one visualises confidence distribution or bootstrap distributions (see vignette (“freq-uncertainty-vis”) ::: column-margin ## Setup for Frequentist uncertainty visualization\n\n\n\nFrequentist uncertainty visualization Setup\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggdist)\nlibrary(ggplot2)\nlibrary(broom)\nlibrary(distributional)\n\ntheme_set(theme_ggdist())\n\nBayesian model: one visualises probability distributions (see tidyverse package that builds on top of ggdist)\n\n\nVisualisationCheatsheet\n\n\n\n\n\n\n\n\n\n\n\nstat_pointinterval() of ggdist is used in the code below to build a visualisation to display distribution of MATHS scores by RACE.\n\nPlotCode🦖 + arguments\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x= RACE,\n             y = MATHS)) +\n  stat_pointinterval(\n    color = \"skyblue\"\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Scores for MATHS\",\n    subtitle = \"Mean point + multiple-interval plot\"\n  )\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments. See next tab for example.\n\n\n\n\nAdded the following arguments\n\n.width = 0.95\n.point = median\n.interval = qi\ncolor = red\n\n\n\nShow the code\ntheme_set(theme_bw())\n\nexam %&gt;%\n  ggplot(aes(\n    x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    .point = median,\n    .interval = qi,\n    color = \"red\") +\n  labs(title = \"Visualising Confidence Intervals of Median Scores for MATHS by RACE\",\n       subtitle = \"Median point + multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nDIY to show 95% and 99% confidence intervals.\n\n\n\n\nShow the code\nexam %&gt;%\nggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE,\n    .width = c(0.95, 0.99),\n    aes(interval_color = stat(level)),\n    point_fill = \"grey\",\n    point_colour = \"grey\",\n    point_size = 5\n  ) +\n  #Define colors of the intervals\n  scale_color_manual(\n    values = c(\"steelblue\", \"pink\"),\n    aesthetics = \"interval_color\"\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Scores for MATHS by RACE\",\n    subtitle = \"Mean point + multiple-interval plot\"\n  ) +\n  theme(\n    panel.background = element_rect(fill = \"transparent\", color = NA),\n    plot.background = element_rect(fill = \"transparent\", color = NA),\n    legend.background = element_rect(fill = \"transparent\", color = NA)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nstat_gradientinterval() of ggdist is used in the code below to build a visualisation for displaying distribution of MATHS scores by RACE.\n\n\nShow the code\nexam %&gt;%\n  ggplot(\n    aes(x = RACE,\n        y = MATHS)) +\n  stat_gradientinterval(\n    fill = \"skyblue\",\n    show.legend = TRUE\n  ) +\n  labs(\n    title = \"Visualising Confidence Intervals of Mean Score for MATHS by RACE\",\n    subtitle = \"Gradient + interval plot\"\n  )",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Ex04-3",
    "section": "",
    "text": "1️⃣ Step 1: Install ungeviz package\ndevtools::install_github(\"wilkelab/ungeviz\")\n2️⃣ Step 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\nMATHS by RACEENGLISH by RACESCIENCE by RACE\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = MATHS)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.6, color = \"darkolivegreen\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"pink\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = ENGLISH)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.5, color = \"skyblue\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"azure4\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\nShow the code\nggplot(data = exam,\n       aes(x = factor(RACE), y = SCIENCE)) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05),\n    size = 0.4, color = \"tan1\", alpha = 0.6) +\n  geom_hpline(data = sampler(25, group = RACE),\n              height = 0.6, color = \"pink1\") +\n  theme_bw() +\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\nShow the code\n#.draw is a generated column indicating the sample draw.\n\n\n\n\n\n\n\n\n\n🔖 Reading resource for HOPs:\nhttps://medium.com/hci-design-at-uw/hypothetical-outcomes-plots-experiencing-the-uncertain-b9ea60d7c740",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. We will learn the following in this chapter:\n\nPlot funnel plots using funnelPlotR package\nPlot static funnel plot with ggplot2 package\nplot interactive funnel plot by using both plotly R and ggplot2 packages\n\n\n\n\nFour R packages will be used in this exercise:\n\nreadr: import csv to R\nFunnerPlotR: create funnel plot\nggplot2: create funner plot manually\nknitr: build static html table\nplotly: create interactive funner plot\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nWe use a new set of data for this exercise - COVID-19_DKI_Jakarta as of 31st July 2021 from Open Data Covid-19 Provinsi DKI Jakarta portal. In this exercise, we will compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan).\nFirst, we import the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26\n\n\n\n\n\n\nFunnelPlotR package uses ggplot to generate funner plots. It requires numerator (events of interest), denominator (population considered) and group. The key arguments selected for customisation are:\n\n\nFunnelPlotR Installation\ninstall.packages(\"FunnelPlotR\")\n\nlimit: plot limits (95 or 99)\nlabel_outliers: to label outliers (true or false)\nPoisson_limits: to add Poisson limits to the plot\nOD_adjust: to add overdispersed limits to the plot\nxrange and yrange: to specify the range to display for axes, acts like a zoom function\nOther aesthetic components, such as graph title, axis labels etc.\n\n\n\nThe code below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\ngroup in this function is different from the scatterplot. Here is defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\nAdjust code to make over the previous plot.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\n+data_type argument is used to change from default “SR” to “PR” (i.e., proportions).\n+xrange and yrange are used to set the range of x-axis and y-axis.\n\n\n\n\n\n\nMakeover 2 is to add titles for x axis and y axis.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\",\n  \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from code\n\n\n\n\nlabel = NA argument is to remove the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\n\n\nIn this exercise, we will build funnel plots step-by-step with ggplot2. This will enhance the skills using ggplot2 to customise specialised data visualisation like Funnel Plot.\n\n\nTo plot the funnel plot from scratch:\n\ndrive cumulative death rate\nstandard error of cumulative death rate\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death/Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean is computed by using the code below:\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nNext, we will compute the lower and upper limits for 95% Confidence Interval.\n\n\nShow the code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\ndfCI &lt;- data.frame(number.ll95, number.ul95, \n                   number.ll999, number.ul999,\n                   number.seq, fit.mean)\n\n\n\n\n\n\n\n\nNote\n\n\n\n95% of the data falls within 1.96 standard deviations of the mean.\n99.9% of the data falls within 3.29 standard deviations of the mean.\n\n\n\n\n\nUse the following code to plot a static funnel plot with ggplot2.\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label = `Sub-district`),\n             alpha = 0.4) +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll999),\n            size = 0.4,\n            colour = \"skyblue\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul999),\n            size = 0.4,\n            colour = 'skyblue') +\n  geom_hline(data = dfCI,\n             aes(yintercept = fit.mean),\n             size = 0.4,\n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") +\n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n\nto make the funnel plot interactive, we can use ggplot2 together with ggplotly() from plotly R package.\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n                        tooltip = c(\"label\",\n                                    \"x\",\n                                    \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#overview",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. We will learn the following in this chapter:\n\nPlot funnel plots using funnelPlotR package\nPlot static funnel plot with ggplot2 package\nplot interactive funnel plot by using both plotly R and ggplot2 packages",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "Four R packages will be used in this exercise:\n\nreadr: import csv to R\nFunnerPlotR: create funnel plot\nggplot2: create funner plot manually\nknitr: build static html table\nplotly: create interactive funner plot\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#import-data",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "We use a new set of data for this exercise - COVID-19_DKI_Jakarta as of 31st July 2021 from Open Data Covid-19 Provinsi DKI Jakarta portal. In this exercise, we will compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan).\nFirst, we import the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnelplotr-methods",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funner plots. It requires numerator (events of interest), denominator (population considered) and group. The key arguments selected for customisation are:\n\n\nFunnelPlotR Installation\ninstall.packages(\"FunnelPlotR\")\n\nlimit: plot limits (95 or 99)\nlabel_outliers: to label outliers (true or false)\nPoisson_limits: to add Poisson limits to the plot\nOD_adjust: to add overdispersed limits to the plot\nxrange and yrange: to specify the range to display for axes, acts like a zoom function\nOther aesthetic components, such as graph title, axis labels etc.\n\n\n\nThe code below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\ngroup in this function is different from the scatterplot. Here is defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\nAdjust code to make over the previous plot.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\n+data_type argument is used to change from default “SR” to “PR” (i.e., proportions).\n+xrange and yrange are used to set the range of x-axis and y-axis.\n\n\n\n\n\n\nMakeover 2 is to add titles for x axis and y axis.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\",\n  \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from code\n\n\n\n\nlabel = NA argument is to remove the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "In this exercise, we will build funnel plots step-by-step with ggplot2. This will enhance the skills using ggplot2 to customise specialised data visualisation like Funnel Plot.\n\n\nTo plot the funnel plot from scratch:\n\ndrive cumulative death rate\nstandard error of cumulative death rate\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death/Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean is computed by using the code below:\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nNext, we will compute the lower and upper limits for 95% Confidence Interval.\n\n\nShow the code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\ndfCI &lt;- data.frame(number.ll95, number.ul95, \n                   number.ll999, number.ul999,\n                   number.seq, fit.mean)\n\n\n\n\n\n\n\n\nNote\n\n\n\n95% of the data falls within 1.96 standard deviations of the mean.\n99.9% of the data falls within 3.29 standard deviations of the mean.\n\n\n\n\n\nUse the following code to plot a static funnel plot with ggplot2.\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label = `Sub-district`),\n             alpha = 0.4) +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll999),\n            size = 0.4,\n            colour = \"skyblue\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul999),\n            size = 0.4,\n            colour = 'skyblue') +\n  geom_hline(data = dfCI,\n             aes(yintercept = fit.mean),\n             size = 0.4,\n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") +\n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n\nto make the funnel plot interactive, we can use ggplot2 together with ggplotly() from plotly R package.\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n                        tooltip = c(\"label\",\n                                    \"x\",\n                                    \"y\"))\nfp_ggplotly",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_4.html#references",
    "title": "Hands-on_Ex04-4",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html",
    "title": "Hands-on Ex04-2",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information.\nperformance package to visualise model diagnostics.\nparameters package to visualise model parameters.\n\n\n\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n- to provide alternative statistical inference methods by default.\n- to follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. \nFor example, here are results from a robust t-test:\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\n\n\n\n\n\nDIY\n\n\n\nImport Exam-csv data by using appropriate tidyverse package.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to build an visual of one-sample test on English scores.\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\nDefault information:\nstatistical details / Bayes Factor / sample sizes / distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favour of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes factor is often written as B10. It can be defined mathematically as:\n\\[\n\\frac{likelihood-of-data-given-H_1}{likelihood-of-data-given-H_0} = \\frac{P(D|H_1)}{P(D/H_0)}\n\\]\nThe Schwarz criterion is one of the easiest ways to calculate rough estimation of the Bayes factor.\n\n\n\n\nA Bayes Factor can be any positive number.\nOne of the most common interpretation is this one - first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagemakers in 2013.\n\nBayes Factor\n\n\nIF B10 IS…\nTHEN YOU HAVE\n\n\n\n\n&gt;100\nExtreme evidence for H1\n\n\n30 - 100\nVery strong evidence for H1\n\n\n10 - 30\nStrong evidence for H1\n\n\n3 - 10\nModerate evidence for H1\n\n\n1 - 3\nAnecdotal evidence for H1\n\n\n1\nNo evidence\n\n\n1/3 - 1\nAnecdotal evidence for H1\n\n\n1/3 - 1/10\nModerate evidence for H1\n\n\n1/10 - 1/30\nStrong evidence for H1\n\n\n1/30 - 1/100\nVery Strong evidence for H1\n\n\n&lt;1/100\nExtreme evidence for H1\n\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\nDefault information: statistical details / Bayes factor / samples sizes / distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English scores by race.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = RACE,\n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n“na” -&gt; only non-significant\n“s” -&gt; only significant\n“all” -&gt; everything\n\n\n\n\nTestCISummary\n\n\nFollowing (between-subjects) tests are carried out for each type of analyses.\n\n\n\nTYPE\nNO. OF GROUPS\nTEST\n\n\n\n\nParametric\n&gt;2\nFisher’s or Welch’s one-way ANOVA\n\n\nNon-Parametric\n&gt;2\nKruskal-Wallis one-way ANOVA\n\n\nRobust\n&gt;2\nHeteroscedastic one-way ANOVA for trimmed means\n\n\nBayes Factor\n&gt;2\nFisher’s ANOVA\n\n\nParametric\n2\nStudent’s or Welch’s t-test\n\n\nNon-Parametric\n2\nMann-Whitney U test\n\n\nRobust\n2\nYuen’s test for trimmed means\n\n\nBayes Factor\n2\nStudent’s t-test\n\n\n\n\n\nThe following effect sizes (and confidence intervals) are available for each type of test\n\n\n\nSummary of multiple pairwise comparison tests supported in ggbetweenstats()\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores. Practice using various subjects from the data and labeling functions.\n\n🦖 Practice I🦖 Practice IIExample\n\n\nMaths x Science; use labels to indicate races scoring 90 for both subjects.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = SCIENCE,\n  label.var = RACE,\n  label.expression = MATHS &gt;= 90 & SCIENCE &gt;= 90,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\nEnglish x Science; use labels to indicate genders scoring 90 for both subjects.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = ENGLISH,\n  y = SCIENCE,\n  label.var = GENDER,\n  label.expression = ENGLISH &gt;= 90 & SCIENCE &gt;= 90,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below, the Maths scores are binned into a 4-class variable with cut()\n\n#load library\nlibrary(dplyr)\n\nexam1 &lt;- exam |&gt;\n  mutate(MATHS_bins = \n           cut(MATHS,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats() is used to build a visual for Significant Test of Association in the code below.\n\n\nUsage\nggbarstats(\n  data,\n  x,\n  y,\n  counts = NULL,\n  type = \"parametric\",\n  paired = FALSE,\n  results.subtitle = TRUE,\n  label = \"percentage\",\n  label.args = list(alpha = 1, fill = \"white\"),\n  sample.size.label.args = list(size = 4),\n  digits = 2L,\n  proportion.test = results.subtitle,\n  digits.perc = 0L,\n  bf.message = TRUE,\n  ratio = NULL,\n  conf.level = 0.95,\n  sampling.plan = \"indepMulti\",\n  fixed.margin = \"rows\",\n  prior.concentration = 1,\n  title = NULL,\n  subtitle = NULL,\n  caption = NULL,\n  legend.title = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ggtheme = ggstatsplot::theme_ggstatsplot(),\n  package = \"RColorBrewer\",\n  palette = \"Dark2\",\n  ggplot.component = NULL,\n  ...\n)\n\n🦖 English by GENDER🦖 Science by RACEExample\n\n\nTo see English scores by genders.\n\n\nShow the code\nexam_E &lt;- exam |&gt;\n  mutate(ENGLISH_bins = \n           cut(ENGLISH,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_E,\n           x = ENGLISH_bins,\n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\n\nTo see Science scores by races.\n\n\nShow the code\nexam_S &lt;- exam |&gt;\n  mutate(SCIENCE_bins = \n           cut(SCIENCE,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_S,\n           x = SCIENCE_bins,\n           y = RACE)\n\n\n\n\n\n\n\n\n\n\n\n\nggbarstats(exam1,\n           x = MATHS_bins,\n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn how to visualise model diagnostic and model parameters by using parameters package.\n🚙 🚙 🚙 🚙 🚙 Toyota Corolla case study will be used to build a model to discover factor affecting practices of used-cars by taking into consideration of a set of explanatory variables.\n\n\n\n\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nread_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls worksbook into R.\n\n\nread_xls() Usage\nread_excel(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\nread_xls(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\nread_xlsx(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\",\n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output object car_resale is a tibble data frame.\nTibble is a modern data frame that is similar to data frames in R Programming Language but with some enhancements to make them easier to use and more consistent. Tibble is a part of the tidyverse package in R. Using tibbles we can view and understand the data very easily especially when working with large datasets\n\n\n\n\n\nCode chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price~Age_08_04 + Mfg_Year + KM +\n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n🦄 Can see how the variables affecting price positively or negatively.\n\n\n\nCode below checks for Multicollinearity using check_collinearity() of performance package.\n\n\ncheck_collinearity() Usage\ncheck_collinearity(x, ...)\n\nmulticollinearity(x, ...)\n\n# Default S3 method\ncheck_collinearity(x, ci = 0.95, verbose = TRUE, ...)\n\n# S3 method for class 'glmmTMB'\ncheck_collinearity(\n  x,\n  component = c(\"all\", \"conditional\", \"count\", \"zi\", \"zero_inflated\"),\n  ci = 0.95,\n  verbose = TRUE,\n  ...\n)\n\ncheck_concurvity(x, ...)\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\nNext to plot the result:\n\n#install.packages(\"bayestestR\", repos = \"https://easystats.r-universe.dev\")\n#remotes::install_github(\"easystats/see\")\n#install.packages(\"performance\")\nlibrary(performance)\nlibrary(\"bayestestR\")\nlibrary(\"see\")\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\nChecking normality using check_normality() from the performance package.\n\n\ncheck_normality()usage\ncheck_normality(x, ...)\n\n# S3 method for class 'merMod'\ncheck_normality(x, effects = \n                  c(\"fixed\", \"random\"), ...)\n\n\nShow the code\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM +\n               Weight + Guarantee_Period, \n             data = car_resale)\n\n#check normality\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n\n🐠 The Performance workflow\n\n\n\n\n\n\n\n\nCheck model for constant error variance using check_heteroscedasticity() from the performance package.\n\n\ncheck_heteroscedasticity() usage\ncheck_heteroscedasticity(x, ...)\n\ncheck_heteroskedasticity(x, ...)\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\nUse check_model() to perform a complete model check.\nVisual check of various model assumptions (normality of residuals, normality of random effects, linear relationship, homogeneity of variance, multicollinearity).\nIf check_model() doesn’t work as expected, try setting verbose = TRUE to get hints about possible problems.\n\n\ncheck_model(x, ...)\n\n# Default S3 method\ncheck_model(\n  x,\n  panel = TRUE,\n  check = \"all\",\n  detrend = TRUE,\n  bandwidth = \"nrd\",\n  type = \"density\",\n  residual_type = NULL,\n  show_dots = NULL,\n  size_dot = 2,\n  size_line = 0.8,\n  size_title = 12,\n  size_axis_title = base_size,\n  base_size = 10,\n  alpha = 0.2,\n  alpha_dot = 0.8,\n  colors = c(\"#3aaf85\", \"#1b6ca8\", \"#cd201f\"),\n  theme = \"see::theme_lucid\",\n  verbose = FALSE,\n  ...\n)\n\n\nShow the code\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\n\nUse plot() from the see package and parameters() from the parameters package to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nUse ggcoefstats() from ggstatsplot package to visualise the parameters of a regression model.\n\n\nShow the code\nggcoefstats(model1,\n            output = \"plot\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#learning-outcome",
    "title": "Hands-on Ex04-2",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information.\nperformance package to visualise model diagnostics.\nparameters package to visualise model parameters.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Ex04-2",
    "section": "",
    "text": "ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n- to provide alternative statistical inference methods by default.\n- to follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. \nFor example, here are results from a robust t-test:",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#getting-started",
    "title": "Hands-on Ex04-2",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\n\n\n\n\n\nDIY\n\n\n\nImport Exam-csv data by using appropriate tidyverse package.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\nIn the code chunk below, gghistostats() is used to build an visual of one-sample test on English scores.\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\nDefault information:\nstatistical details / Bayes Factor / sample sizes / distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favour of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes factor is often written as B10. It can be defined mathematically as:\n\\[\n\\frac{likelihood-of-data-given-H_1}{likelihood-of-data-given-H_0} = \\frac{P(D|H_1)}{P(D/H_0)}\n\\]\nThe Schwarz criterion is one of the easiest ways to calculate rough estimation of the Bayes factor.\n\n\n\n\nA Bayes Factor can be any positive number.\nOne of the most common interpretation is this one - first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagemakers in 2013.\n\nBayes Factor\n\n\nIF B10 IS…\nTHEN YOU HAVE\n\n\n\n\n&gt;100\nExtreme evidence for H1\n\n\n30 - 100\nVery strong evidence for H1\n\n\n10 - 30\nStrong evidence for H1\n\n\n3 - 10\nModerate evidence for H1\n\n\n1 - 3\nAnecdotal evidence for H1\n\n\n1\nNo evidence\n\n\n1/3 - 1\nAnecdotal evidence for H1\n\n\n1/3 - 1/10\nModerate evidence for H1\n\n\n1/10 - 1/30\nStrong evidence for H1\n\n\n1/30 - 1/100\nVery Strong evidence for H1\n\n\n&lt;1/100\nExtreme evidence for H1\n\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\nDefault information: statistical details / Bayes factor / samples sizes / distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English scores by race.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = RACE,\n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n“na” -&gt; only non-significant\n“s” -&gt; only significant\n“all” -&gt; everything\n\n\n\n\nTestCISummary\n\n\nFollowing (between-subjects) tests are carried out for each type of analyses.\n\n\n\nTYPE\nNO. OF GROUPS\nTEST\n\n\n\n\nParametric\n&gt;2\nFisher’s or Welch’s one-way ANOVA\n\n\nNon-Parametric\n&gt;2\nKruskal-Wallis one-way ANOVA\n\n\nRobust\n&gt;2\nHeteroscedastic one-way ANOVA for trimmed means\n\n\nBayes Factor\n&gt;2\nFisher’s ANOVA\n\n\nParametric\n2\nStudent’s or Welch’s t-test\n\n\nNon-Parametric\n2\nMann-Whitney U test\n\n\nRobust\n2\nYuen’s test for trimmed means\n\n\nBayes Factor\n2\nStudent’s t-test\n\n\n\n\n\nThe following effect sizes (and confidence intervals) are available for each type of test\n\n\n\nSummary of multiple pairwise comparison tests supported in ggbetweenstats()\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores. Practice using various subjects from the data and labeling functions.\n\n🦖 Practice I🦖 Practice IIExample\n\n\nMaths x Science; use labels to indicate races scoring 90 for both subjects.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = SCIENCE,\n  label.var = RACE,\n  label.expression = MATHS &gt;= 90 & SCIENCE &gt;= 90,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\nEnglish x Science; use labels to indicate genders scoring 90 for both subjects.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = ENGLISH,\n  y = SCIENCE,\n  label.var = GENDER,\n  label.expression = ENGLISH &gt;= 90 & SCIENCE &gt;= 90,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below, the Maths scores are binned into a 4-class variable with cut()\n\n#load library\nlibrary(dplyr)\n\nexam1 &lt;- exam |&gt;\n  mutate(MATHS_bins = \n           cut(MATHS,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats() is used to build a visual for Significant Test of Association in the code below.\n\n\nUsage\nggbarstats(\n  data,\n  x,\n  y,\n  counts = NULL,\n  type = \"parametric\",\n  paired = FALSE,\n  results.subtitle = TRUE,\n  label = \"percentage\",\n  label.args = list(alpha = 1, fill = \"white\"),\n  sample.size.label.args = list(size = 4),\n  digits = 2L,\n  proportion.test = results.subtitle,\n  digits.perc = 0L,\n  bf.message = TRUE,\n  ratio = NULL,\n  conf.level = 0.95,\n  sampling.plan = \"indepMulti\",\n  fixed.margin = \"rows\",\n  prior.concentration = 1,\n  title = NULL,\n  subtitle = NULL,\n  caption = NULL,\n  legend.title = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ggtheme = ggstatsplot::theme_ggstatsplot(),\n  package = \"RColorBrewer\",\n  palette = \"Dark2\",\n  ggplot.component = NULL,\n  ...\n)\n\n🦖 English by GENDER🦖 Science by RACEExample\n\n\nTo see English scores by genders.\n\n\nShow the code\nexam_E &lt;- exam |&gt;\n  mutate(ENGLISH_bins = \n           cut(ENGLISH,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_E,\n           x = ENGLISH_bins,\n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\n\nTo see Science scores by races.\n\n\nShow the code\nexam_S &lt;- exam |&gt;\n  mutate(SCIENCE_bins = \n           cut(SCIENCE,\n               breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_S,\n           x = SCIENCE_bins,\n           y = RACE)\n\n\n\n\n\n\n\n\n\n\n\n\nggbarstats(exam1,\n           x = MATHS_bins,\n           y = GENDER)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visualsing-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#visualsing-models",
    "title": "Hands-on Ex04-2",
    "section": "",
    "text": "Learn how to visualise model diagnostic and model parameters by using parameters package.\n🚙 🚙 🚙 🚙 🚙 Toyota Corolla case study will be used to build a model to discover factor affecting practices of used-cars by taking into consideration of a set of explanatory variables.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_2.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Ex04-2",
    "section": "",
    "text": "pacman::p_load(readxl, performance, parameters, see)\n\n\n\nread_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls worksbook into R.\n\n\nread_xls() Usage\nread_excel(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\nread_xls(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\nread_xlsx(\n  path,\n  sheet = NULL,\n  range = NULL,\n  col_names = TRUE,\n  col_types = NULL,\n  na = \"\",\n  trim_ws = TRUE,\n  skip = 0,\n  n_max = Inf,\n  guess_max = min(1000, n_max),\n  progress = readxl_progress(),\n  .name_repair = \"unique\"\n)\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\",\n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output object car_resale is a tibble data frame.\nTibble is a modern data frame that is similar to data frames in R Programming Language but with some enhancements to make them easier to use and more consistent. Tibble is a part of the tidyverse package in R. Using tibbles we can view and understand the data very easily especially when working with large datasets\n\n\n\n\n\nCode chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price~Age_08_04 + Mfg_Year + KM +\n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n🦄 Can see how the variables affecting price positively or negatively.\n\n\n\nCode below checks for Multicollinearity using check_collinearity() of performance package.\n\n\ncheck_collinearity() Usage\ncheck_collinearity(x, ...)\n\nmulticollinearity(x, ...)\n\n# Default S3 method\ncheck_collinearity(x, ci = 0.95, verbose = TRUE, ...)\n\n# S3 method for class 'glmmTMB'\ncheck_collinearity(\n  x,\n  component = c(\"all\", \"conditional\", \"count\", \"zi\", \"zero_inflated\"),\n  ci = 0.95,\n  verbose = TRUE,\n  ...\n)\n\ncheck_concurvity(x, ...)\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\nNext to plot the result:\n\n#install.packages(\"bayestestR\", repos = \"https://easystats.r-universe.dev\")\n#remotes::install_github(\"easystats/see\")\n#install.packages(\"performance\")\nlibrary(performance)\nlibrary(\"bayestestR\")\nlibrary(\"see\")\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\nChecking normality using check_normality() from the performance package.\n\n\ncheck_normality()usage\ncheck_normality(x, ...)\n\n# S3 method for class 'merMod'\ncheck_normality(x, effects = \n                  c(\"fixed\", \"random\"), ...)\n\n\nShow the code\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM +\n               Weight + Guarantee_Period, \n             data = car_resale)\n\n#check normality\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n\n🐠 The Performance workflow\n\n\n\n\n\n\n\n\nCheck model for constant error variance using check_heteroscedasticity() from the performance package.\n\n\ncheck_heteroscedasticity() usage\ncheck_heteroscedasticity(x, ...)\n\ncheck_heteroskedasticity(x, ...)\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\nUse check_model() to perform a complete model check.\nVisual check of various model assumptions (normality of residuals, normality of random effects, linear relationship, homogeneity of variance, multicollinearity).\nIf check_model() doesn’t work as expected, try setting verbose = TRUE to get hints about possible problems.\n\n\ncheck_model(x, ...)\n\n# Default S3 method\ncheck_model(\n  x,\n  panel = TRUE,\n  check = \"all\",\n  detrend = TRUE,\n  bandwidth = \"nrd\",\n  type = \"density\",\n  residual_type = NULL,\n  show_dots = NULL,\n  size_dot = 2,\n  size_line = 0.8,\n  size_title = 12,\n  size_axis_title = base_size,\n  base_size = 10,\n  alpha = 0.2,\n  alpha_dot = 0.8,\n  colors = c(\"#3aaf85\", \"#1b6ca8\", \"#cd201f\"),\n  theme = \"see::theme_lucid\",\n  verbose = FALSE,\n  ...\n)\n\n\nShow the code\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\n\nUse plot() from the see package and parameters() from the parameters package to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nUse ggcoefstats() from ggstatsplot package to visualise the parameters of a regression model.\n\n\nShow the code\nggcoefstats(model1,\n            output = \"plot\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 4-2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#learning-outcome",
    "title": "Hands-on_Ex03_1",
    "section": "3.1 Learning Outcome",
    "text": "3.1 Learning Outcome\nIn this hands-on exercise, you will learn how to create interactive data cisualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#getting-started",
    "title": "Hands-on_Ex03_1",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch t he following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n🔑 The code chunk below will be used to accomplish the task.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#importing-data",
    "title": "Hands-on_Ex03_1",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nlibrary(readr)\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on_Ex03_1",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\n\n\n🎯 Onclick, Data_id\nIf it is used within a shiny application, elements associated with an id(data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n❗article not found.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved.\nFirst, an interactive vrsion of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity",
    "title": "Hands-on_Ex03_1",
    "section": "3.5 Interactivity",
    "text": "3.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\n🔑 The content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class =\", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---customisation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactivity---customisation",
    "title": "Hands-on_Ex03_1",
    "section": "3.6 Interactivity - customisation",
    "text": "3.6 Interactivity - customisation\nBy hovering the mouse pointer on a data point of interest, the student’s ID and CLASS are displayed.\n\n\n\n\n\n\n\n3.7.1 Customising Tooltip style\n🔑 Code chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering by adding css declarations.\ntooltip_css &lt;- \"background-color: pink;  #&lt;&lt;\nfront-style:bold; color: #fff;\" #&lt;&lt;\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\nNotice that the background colour of the tooltip is pink and the font colour is white and bold.\n\n\n\n\n\n\n\n\n❓ How to change tooltip fonts?\n❓ Text to appear between code chunk and charts\nRefer to Customizing girafe objects to learn more about how to customise ggriaph objects. (link is not working as of Jan 16 2025)\n\n\n3.6.2 Displaying statistics on tooltip\n🔑 Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores: \", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                  aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = \"light blue\"\n              ) + \n              stat_summary(aes(y = MATHS),\n                fun.data = mean_se,\n                geom = \"errorbar\", width = 0.2, size = 0.2\n              )\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\n🔑 Code chunk below shows the second interactive feature of ggiraph, namely data_id.\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”\n\n\n\n\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id=CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse hover.\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the css customisation request are encoded directly.\n\n\n\n\n3.6.5 Combining tooltip and hover effect\n🔑 There are time when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS, #tooltip here\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #2020202;\"),\n    opts_hover_inv(css = \"opacity:0.2\")\n  )\n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\n🔑 The code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID)) #onclic link here\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n❓ string column in the dataset\n\n\n3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\n🐳 Note that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n🦄 The goal of patchwork is to make it ridiculously simple to combine separate ggplots into the same graphic. As such it tries to solve the same problem as gridExtra::grid.arrange() and cowplot::plot_grid but using an API that incites exploration and iteration, and scales to arbitrarily complex layouts.\np1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID,),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) + #patchwork here\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       ))\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on_Ex03_1",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\n🔑 The tabset below shows an example of a basic interactive plot created with plot_ly().\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data=exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data=exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplot().\n\nPlotCode chunk🦖 Practice\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\nNotice that the only extra line needed in the code chunk is ggplotly()\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n3.7.4 Coordinated multiple views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatter plots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\n\n🦄 highlight_key(): This function simply creates an object of class crosstalk::SharedData. The reason it exists is to make it easier to teach others how to leverage its functionality in plotly. It also makes it more discoverable if one is already aware of highlight.\n🎯 Read more on subplot()\n\n\nPlotCode chunk🦖 Practice I🦖 Practice II\n\n\n\n\n\n\n\n\n\nHover over on a data point in one of the scatterplots. A tooltip will appear and show its scores.\nClick on a data point in one of the scatterplots, and the corresponding point in the other plot will appear.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = GENDER)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE,\n                color = GENDER)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE,\n                color = RACE)) +\n  geom_point(size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight_key() simply creates object of class crosstalk::SharedData.\nLearn more about crosswalk.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on_Ex03_1",
    "section": "3.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript Library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_1.html#reference",
    "title": "Hands-on_Ex03_1",
    "section": "3.9 Reference",
    "text": "3.9 Reference\n\n3.9.1 ggiraph\nThis link provides online version of the reference gude and several useful articles. Use this link to download the PDF version of the reference guide.\n\nHow to plot with ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to create interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting started with Plotly in R\nA collection of plotly R graphs are available via this [link]\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link]\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nA interesting implementation of gganimate by SMU senior: How has Singapore changed since 2011?\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 3-1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, one will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package.\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages; and\nplot composite figure by combing ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nIn this exercise, besides tidyverse, four R packages will be used.\nThey are:\n\nggrepel: a R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: a R package provides some extra themes, geoms, and scales for ggplot.\nhrbrthemes: a R package provides typographu-centric themes and theme components for ggplot2.\npatchwork: a R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto the working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse) #all packages are then installed.\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyversepackage.\n\nlibrary(readr)\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are ID, CLASS, GENDER and RACE.\nThe continuous attributes are MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n🦖 PracticePlotCode\n\n\n🦖 Used colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID,\n                 colour = GENDER), #added colours\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in the examples below.\n\n\n\n\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() with geom_label_repel().\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Applied colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID,\n                       colour = GENDER), #colour for gender\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\nggplot2 comes with eight built-in themes. They are:\ntheme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), theme_void().\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Applied theme_light() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n🦖 Applied theme_dark() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"skyblue\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n🦄 Refer to this link to learn more about ggplot2 Themes\n\n\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_stata()\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\",\n                 linewidth = 0.3) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\nIt also provides some extra geoms and scales fpr ggplot2. Consult this vignette to learn more. *Link is broken as of Jan 19.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n🦖 PracticePlotCode\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"pink\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Display English scores.\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n              \n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18.\nbase_size argument is used to increase the default axis label to 15.\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\nNext -\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\n\n\nLastly, we will draw a scatterplot for English score vs Maths score by the plot below:\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist().\n\np100 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") +\n  theme_economist() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"))\np100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np99 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") \np99\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package . The extension called patchwork is specially designed for combining separate ggplot 2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here is the general syntax that combines:\n\nTwo-column layout using the Plus sign +.\nParenthesis () to create a subplot group.\nTwo-row layout using the Division design /\n\n\n\n\nFigure in the tabset below shows a a composite of two histograms created using patchwork. Code is pretty simple.\n\n🦖 PracticePlotCode\n\n\n\npatchwork &lt;- p1 + p2\npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using: - “/” operator to stack two ggplot2 graphs - “|” operator to place the plots beside each other - “()” operator to define the sequence of the plotting.\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Changed the layout.\n\np3 | ( p2 / p1)\n\n\n\n\n\n\n\n\n\n\n🦖 Used theme_economist()\n\npatchwork &lt;- p3 | (p2 / p1)\npatchwork & theme_economist() +\n  theme(axis.title = element_text(size = rel(1)),\n        axis.text = element_text(size = 8))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n🦄 Learn more with Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n🦖 PracticePlotCode\n\n\n🦖 Changed level tag and used a new theme theme_stata()\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'A') + \n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist() and altered the position of the top layer plot.\n\np3 + theme_economist() +\n  inset_element(p1,\n                   left = 0.5,\n                   bottom = 0,\n                   right = 1,\n                   top = 0.3) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\n🦖 PracticePlotCode\n\n\nUsed theme_stata() and changed layout.\n\npatchwork &lt;- p3 | (p1 / p2) \npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, one will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package.\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages; and\nplot composite figure by combing ggplot2 graphs by using patchwork package.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this exercise, besides tidyverse, four R packages will be used.\nThey are:\n\nggrepel: a R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: a R package provides some extra themes, geoms, and scales for ggplot.\nhrbrthemes: a R package provides typographu-centric themes and theme components for ggplot2.\npatchwork: a R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto the working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse) #all packages are then installed.\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyversepackage.\n\nlibrary(readr)\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are ID, CLASS, GENDER and RACE.\nThe continuous attributes are MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\n🦖 PracticePlotCode\n\n\n🦖 Used colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID,\n                 colour = GENDER), #added colours\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in the examples below.\n\n\n\n\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() with geom_label_repel().\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Applied colours to differentiate genders.\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID,\n                       colour = GENDER), #colour for gender\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "ggplot2 comes with eight built-in themes. They are:\ntheme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), theme_void().\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Applied theme_light() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"pink\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n🦖 Applied theme_dark() and different colors for fill and color.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey90\",\n                 fill = \"skyblue\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n🦄 Refer to this link to learn more about ggplot2 Themes\n\n\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_stata()\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\",\n                 linewidth = 0.3) +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\nIt also provides some extra geoms and scales fpr ggplot2. Consult this vignette to learn more. *Link is broken as of Jan 19.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n🦖 PracticePlotCode\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"pink\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n🦖 PracticePlotCode\n\n\n🦖 Display English scores.\n\nggplot(data=exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of English scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n              \n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18.\nbase_size argument is used to increase the default axis label to 15.\ngrid argument is used to remove the x-axis grid lines.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\nNext -\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\n\n\nLastly, we will draw a scatterplot for English score vs Maths score by the plot below:\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist().\n\np100 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") +\n  theme_economist() +\n    theme(plot.title = element_text(size = 10, face = \"bold\"))\np100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np99 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                 ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for P3\") \np99\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package . The extension called patchwork is specially designed for combining separate ggplot 2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here is the general syntax that combines:\n\nTwo-column layout using the Plus sign +.\nParenthesis () to create a subplot group.\nTwo-row layout using the Division design /\n\n\n\n\nFigure in the tabset below shows a a composite of two histograms created using patchwork. Code is pretty simple.\n\n🦖 PracticePlotCode\n\n\n\npatchwork &lt;- p1 + p2\npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using: - “/” operator to stack two ggplot2 graphs - “|” operator to place the plots beside each other - “()” operator to define the sequence of the plotting.\n\n🦖 Practice I🦖 Practice IIPlotCode\n\n\n🦖 Changed the layout.\n\np3 | ( p2 / p1)\n\n\n\n\n\n\n\n\n\n\n🦖 Used theme_economist()\n\npatchwork &lt;- p3 | (p2 / p1)\npatchwork & theme_economist() +\n  theme(axis.title = element_text(size = rel(1)),\n        axis.text = element_text(size = 8))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n🦄 Learn more with Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n🦖 PracticePlotCode\n\n\n🦖 Changed level tag and used a new theme theme_stata()\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'A') + \n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\n🦖 PracticePlotCode\n\n\n🦖 Used theme_economist() and altered the position of the top layer plot.\n\np3 + theme_economist() +\n  inset_element(p1,\n                   left = 0.5,\n                   bottom = 0,\n                   right = 1,\n                   top = 0.3) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\n🦖 PracticePlotCode\n\n\nUsed theme_stata() and changed layout.\n\npatchwork &lt;- p3 | (p1 / p2) \npatchwork & theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html",
    "title": "Hands-on_Ex05-4",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\n\n\n\n\nInstall and launch R packagesData preparation\n\n\nGGally, parcoords, parallelPlot and tidyverse packages will be used.\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\nhe World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nHave a look at the data.\n\nhead(wh)\n\n# A tibble: 6 × 12\n  Country         Region `Happiness score` `Whisker-high` `Whisker-low` Dystopia\n  &lt;chr&gt;           &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 Albania         Centr…              4.59           4.70          4.48     1.46\n2 Bosnia and Her… Centr…              5.13           5.22          5.04     1.88\n3 Bulgaria        Centr…              4.93           5.02          4.84     1.22\n4 Croatia         Centr…              5.32           5.40          5.24     1.77\n5 Czech Republic  Centr…              6.71           6.78          6.64     2.49\n6 Estonia         Centr…              5.74           5.82          5.66     1.46\n# ℹ 6 more variables: `GDP per capita` &lt;dbl&gt;, `Social support` &lt;dbl&gt;,\n#   `Healthy life expectancy` &lt;dbl&gt;, `Freedom to make life choices` &lt;dbl&gt;,\n#   Generosity &lt;dbl&gt;, `Perceptions of corruption` &lt;dbl&gt;\n\n\n\n\n\n\n\n\nIn this section, we will learn to plot static parallel coordinates plot by using ggparcoord() of GGally package.\n\n\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nhead(wh)\n\n# A tibble: 6 × 12\n  Country         Region `Happiness score` `Whisker-high` `Whisker-low` Dystopia\n  &lt;chr&gt;           &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 Albania         Centr…              4.59           4.70          4.48     1.46\n2 Bosnia and Her… Centr…              5.13           5.22          5.04     1.88\n3 Bulgaria        Centr…              4.93           5.02          4.84     1.22\n4 Croatia         Centr…              5.32           5.40          5.24     1.77\n5 Czech Republic  Centr…              6.71           6.78          6.64     2.49\n6 Estonia         Centr…              5.74           5.82          5.66     1.46\n# ℹ 6 more variables: `GDP per capita` &lt;dbl&gt;, `Social support` &lt;dbl&gt;,\n#   `Healthy life expectancy` &lt;dbl&gt;, `Freedom to make life choices` &lt;dbl&gt;,\n#   Generosity &lt;dbl&gt;, `Perceptions of corruption` &lt;dbl&gt;\n\n\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12)) +\n  labs(title = \"Basic parellel plot\") +\n  geom_line(size = 0.01) +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    panel.background = element_rect(fill=\"#f1f4f5\"))\n\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\nUse groupColumn() to group column ‘Region’:\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12),\n           groupColumn = \"Region\",\n           scale = \"robust\") +\n  labs(title = \"Basic parellel plot grouped by Region\") +\n  geom_line(size = 0.01) +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    panel.background = element_rect(fill=\"#f1f4f5\"))\n\n\n\n\n\n\n\n\n\nCan assign a color to specific group, but assigning the former columns may have the colors blocked by the rest.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12),\n           groupColumn = \"Region\",\n           scale = \"robust\") +\n  labs(title = \"Basic parellel plot grouped by Region with color\") +\n  geom_line(size = 0.01) +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"left\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))+\n  scale_color_manual(values=c(\"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"skyblue\", \"grey70\") )\n\n\n\n\n\n\n\n\n\n\n\n\nIt is hard to decipher the Parallel Coordinates Plot alone. We will complement it with boxplot. The arguments are provided in ggparcoord().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\") +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"left\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combie some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region.\n\nBase plotRoate X-axis text labelAdjust label position\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(\n    plot.title = element_text(hjust = 0, size = 8),\n    axis.title.x = element_text(size = 0.2),\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.x = element_text(size = 6),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"bottom\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) \n\n\n\n\n\n\n\n\n\n\n\nTo make the x-axis text label easy to read, we will rotate the labels. We can rotate axis text labels using theme() function in ggplot2.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(\n    plot.title = element_text(hjust = 0, size = 8),\n    axis.title.x = element_text(size = 10, hjust = 1),\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.x = element_text(size = 7, angle = 30),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"bottom\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) \n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nWe use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degrees.\n\n\n\n\n\nSome text labels after rotation are overlapping the plot. We can use hjust to adjust the position of the labels in theme().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(\n    plot.title = element_text(hjust = 0, size = 8),\n    axis.title.x = element_text(size = 10, hjust = 1),\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.x = element_text(size = 7, angle = 30, hjust = 1.1),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"bottom\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. We will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\nBase plotRotate axis labelChange colour schemeParallel coordinates plot with histogram\n\n\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\nNote that some labels are long and overlapping.\n\n\nShow the code\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\nTo solve the issue in the basee plot, we use rotateTitle argument is used to avoid overlapping axis labels.\n\n\nShow the code\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nColor can be customised using continuousCS.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nhistoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\nWhen clicking on a variable, the lines often change colour based on how that variable scales or groups the data.\n\n\n\n\nR for Visual Analytics\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#overview",
    "title": "Hands-on_Ex05-4",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#getting-started",
    "title": "Hands-on_Ex05-4",
    "section": "",
    "text": "Install and launch R packagesData preparation\n\n\nGGally, parcoords, parallelPlot and tidyverse packages will be used.\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\nhe World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nHave a look at the data.\n\nhead(wh)\n\n# A tibble: 6 × 12\n  Country         Region `Happiness score` `Whisker-high` `Whisker-low` Dystopia\n  &lt;chr&gt;           &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 Albania         Centr…              4.59           4.70          4.48     1.46\n2 Bosnia and Her… Centr…              5.13           5.22          5.04     1.88\n3 Bulgaria        Centr…              4.93           5.02          4.84     1.22\n4 Croatia         Centr…              5.32           5.40          5.24     1.77\n5 Czech Republic  Centr…              6.71           6.78          6.64     2.49\n6 Estonia         Centr…              5.74           5.82          5.66     1.46\n# ℹ 6 more variables: `GDP per capita` &lt;dbl&gt;, `Social support` &lt;dbl&gt;,\n#   `Healthy life expectancy` &lt;dbl&gt;, `Freedom to make life choices` &lt;dbl&gt;,\n#   Generosity &lt;dbl&gt;, `Perceptions of corruption` &lt;dbl&gt;",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plot-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plot-static-parallel-coordinates-plot",
    "title": "Hands-on_Ex05-4",
    "section": "",
    "text": "In this section, we will learn to plot static parallel coordinates plot by using ggparcoord() of GGally package.\n\n\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nhead(wh)\n\n# A tibble: 6 × 12\n  Country         Region `Happiness score` `Whisker-high` `Whisker-low` Dystopia\n  &lt;chr&gt;           &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 Albania         Centr…              4.59           4.70          4.48     1.46\n2 Bosnia and Her… Centr…              5.13           5.22          5.04     1.88\n3 Bulgaria        Centr…              4.93           5.02          4.84     1.22\n4 Croatia         Centr…              5.32           5.40          5.24     1.77\n5 Czech Republic  Centr…              6.71           6.78          6.64     2.49\n6 Estonia         Centr…              5.74           5.82          5.66     1.46\n# ℹ 6 more variables: `GDP per capita` &lt;dbl&gt;, `Social support` &lt;dbl&gt;,\n#   `Healthy life expectancy` &lt;dbl&gt;, `Freedom to make life choices` &lt;dbl&gt;,\n#   Generosity &lt;dbl&gt;, `Perceptions of corruption` &lt;dbl&gt;\n\n\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12)) +\n  labs(title = \"Basic parellel plot\") +\n  geom_line(size = 0.01) +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    panel.background = element_rect(fill=\"#f1f4f5\"))\n\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\nUse groupColumn() to group column ‘Region’:\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12),\n           groupColumn = \"Region\",\n           scale = \"robust\") +\n  labs(title = \"Basic parellel plot grouped by Region\") +\n  geom_line(size = 0.01) +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    panel.background = element_rect(fill=\"#f1f4f5\"))\n\n\n\n\n\n\n\n\n\nCan assign a color to specific group, but assigning the former columns may have the colors blocked by the rest.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12),\n           groupColumn = \"Region\",\n           scale = \"robust\") +\n  labs(title = \"Basic parellel plot grouped by Region with color\") +\n  geom_line(size = 0.01) +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"left\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))+\n  scale_color_manual(values=c(\"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"grey70\", \"skyblue\", \"grey70\") )\n\n\n\n\n\n\n\n\n\n\n\n\nIt is hard to decipher the Parallel Coordinates Plot alone. We will complement it with boxplot. The arguments are provided in ggparcoord().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\") +\n  theme(\n    plot.title = element_text(hjust = 0),\n    axis.title.x = element_text(size = 0.7),\n    axis.title.y = element_text(hjust=1, angle=0),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"left\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2))\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combie some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region.\n\nBase plotRoate X-axis text labelAdjust label position\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(\n    plot.title = element_text(hjust = 0, size = 8),\n    axis.title.x = element_text(size = 0.2),\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.x = element_text(size = 6),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"bottom\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) \n\n\n\n\n\n\n\n\n\n\n\nTo make the x-axis text label easy to read, we will rotate the labels. We can rotate axis text labels using theme() function in ggplot2.\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(\n    plot.title = element_text(hjust = 0, size = 8),\n    axis.title.x = element_text(size = 10, hjust = 1),\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.x = element_text(size = 7, angle = 30),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"bottom\",\n    panel.background = element_rect(fill=\"#f1f4f5\")) \n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nWe use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degrees.\n\n\n\n\n\nSome text labels after rotation are overlapping the plot. We can use hjust to adjust the position of the labels in theme().\n\n\nShow the code\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(\n    plot.title = element_text(hjust = 0, size = 8),\n    axis.title.x = element_text(size = 10, hjust = 1),\n    axis.title.y = element_text(hjust=1, angle=0),\n    axis.text.x = element_text(size = 7, angle = 30, hjust = 1.1),\n    plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n    legend.background = element_rect(fill=\"#f1f4f5\"),\n    legend.position = \"bottom\",\n    panel.background = element_rect(fill=\"#f1f4f5\"))",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plot-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plot-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on_Ex05-4",
    "section": "",
    "text": "parallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. We will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\nBase plotRotate axis labelChange colour schemeParallel coordinates plot with histogram\n\n\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\nNote that some labels are long and overlapping.\n\n\nShow the code\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\nTo solve the issue in the basee plot, we use rotateTitle argument is used to avoid overlapping axis labels.\n\n\nShow the code\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nColor can be customised using continuousCS.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nhistoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\nWhen clicking on a variable, the lines often change colour based on how that variable scales or groups the data.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#section",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#section",
    "title": "Hands-on_Ex05-4",
    "section": "",
    "text": ":::",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html",
    "title": "Hands-on_Ex05-3",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rows and colouring the cells within the table.\nHeatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this chapter, we will use R to plot static and interactive heatmap for visualising and analysing multivariate data.\n\n\n\nWe shall install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\n\n\n1 Import data2 Prep data3 Transform data frame to matrix\n\n\nThe data of World Happines 2018 report called WHData-2018.csv will be used.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\nglimpse(wh)\n\nRows: 156\nColumns: 12\n$ Country                        &lt;chr&gt; \"Albania\", \"Bosnia and Herzegovina\", \"B…\n$ Region                         &lt;chr&gt; \"Central and Eastern Europe\", \"Central …\n$ `Happiness score`              &lt;dbl&gt; 4.586, 5.129, 4.933, 5.321, 6.711, 5.73…\n$ `Whisker-high`                 &lt;dbl&gt; 4.695, 5.224, 5.022, 5.398, 6.783, 5.81…\n$ `Whisker-low`                  &lt;dbl&gt; 4.477, 5.035, 4.844, 5.244, 6.639, 5.66…\n$ Dystopia                       &lt;dbl&gt; 1.462, 1.883, 1.219, 1.769, 2.494, 1.45…\n$ `GDP per capita`               &lt;dbl&gt; 0.916, 0.915, 1.054, 1.115, 1.233, 1.20…\n$ `Social support`               &lt;dbl&gt; 0.817, 1.078, 1.515, 1.161, 1.489, 1.53…\n$ `Healthy life expectancy`      &lt;dbl&gt; 0.790, 0.758, 0.712, 0.737, 0.854, 0.73…\n$ `Freedom to make life choices` &lt;dbl&gt; 0.419, 0.280, 0.359, 0.380, 0.543, 0.55…\n$ Generosity                     &lt;dbl&gt; 0.149, 0.216, 0.064, 0.120, 0.064, 0.08…\n$ `Perceptions of corruption`    &lt;dbl&gt; 0.032, 0.000, 0.009, 0.039, 0.034, 0.17…\n\n\n\n\nChange the rows by country name instead of row number.\n\nrow.names(wh) &lt;- wh$Country\n\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make a heatmap. The code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNote that wh_matrix is in R matrix format.\n\n\n\n\n\n\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap() of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nWe will plot static heatmaps by using heatmap() of R Stats package.\n\n\n\nBase plotCluster heatmapNormalised heatmap\n\n\nLet’s plot a heatmap by using heatmap() of Base Stats.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv = NA, Colv = NA)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\n\n\nTo plot a cluster heatmap, we just have to use the default code.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix.\n\nThis is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nWhen the Happiness Score variable have relatively higher values, it makes all other variables small and hard to interpret. Thus, we need to normalize this matrix.\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe values are scaled now and the margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively.\n\n\n\n\n\n\n\n\n\n\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nResource: Introduction to Heatmaply & user manual\nBelow we will use heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nWith basic syntax for interactive heatmap creation, using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap. The text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\n\n\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(); namely, scale, normalise and percentilse.\n\nScaling methodNormalising methodPercentising method\n\n\n\nWhen all variables come from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling. Below the code scales variable values columewise.\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\nWhen variables in the data come from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set; i.e., wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nPercentize method is also performed on the input data set. See below:\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\nManual approachStatistical approach\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\npar(bg = \"#f1f4f5\")\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nNext, find_k() is used to determine the optimal number of cluster.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\nFigure above shows that K = 3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below:\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\n\n\n\n\nProblems to tackle: with hierarchical clustering is that it doesn’t actually place the rows in a definite order.\nIt merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nSolution: heatmaply uses the seriation package to find an optimal ordering of rows and columns.\nOptimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\n\nOLOGWmeannone\n\n\nSeriation algorithm #1: Optimal Leaf Ordering (OLO)\nThis algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)).\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\n\n“GW” (Gruvaeus and Wainer) aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nThe Purple colour palette of rColorBrewer is used.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          k_row = 3,\n          seriate = \"GW\",\n          fontsize_col = 7,\n          fontsize_row = 4,\n          colors = Purples)\n\n\n\n\n\n\n\n\nheatmaply has a wide collection of arguments to meet the statistical analysis needs. Italso provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Greens,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 7,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )\n\n\n\n\n\n\n\n\n\nR for Visual Analytics: https://r4va.netlify.app/chap14#overview",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#overview",
    "title": "Hands-on_Ex05-3",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rows and colouring the cells within the table.\nHeatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this chapter, we will use R to plot static and interactive heatmap for visualising and analysing multivariate data.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex05-3",
    "section": "",
    "text": "We shall install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#data-preparation",
    "title": "Hands-on_Ex05-3",
    "section": "",
    "text": "1 Import data2 Prep data3 Transform data frame to matrix\n\n\nThe data of World Happines 2018 report called WHData-2018.csv will be used.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\nglimpse(wh)\n\nRows: 156\nColumns: 12\n$ Country                        &lt;chr&gt; \"Albania\", \"Bosnia and Herzegovina\", \"B…\n$ Region                         &lt;chr&gt; \"Central and Eastern Europe\", \"Central …\n$ `Happiness score`              &lt;dbl&gt; 4.586, 5.129, 4.933, 5.321, 6.711, 5.73…\n$ `Whisker-high`                 &lt;dbl&gt; 4.695, 5.224, 5.022, 5.398, 6.783, 5.81…\n$ `Whisker-low`                  &lt;dbl&gt; 4.477, 5.035, 4.844, 5.244, 6.639, 5.66…\n$ Dystopia                       &lt;dbl&gt; 1.462, 1.883, 1.219, 1.769, 2.494, 1.45…\n$ `GDP per capita`               &lt;dbl&gt; 0.916, 0.915, 1.054, 1.115, 1.233, 1.20…\n$ `Social support`               &lt;dbl&gt; 0.817, 1.078, 1.515, 1.161, 1.489, 1.53…\n$ `Healthy life expectancy`      &lt;dbl&gt; 0.790, 0.758, 0.712, 0.737, 0.854, 0.73…\n$ `Freedom to make life choices` &lt;dbl&gt; 0.419, 0.280, 0.359, 0.380, 0.543, 0.55…\n$ Generosity                     &lt;dbl&gt; 0.149, 0.216, 0.064, 0.120, 0.064, 0.08…\n$ `Perceptions of corruption`    &lt;dbl&gt; 0.032, 0.000, 0.009, 0.039, 0.034, 0.17…\n\n\n\n\nChange the rows by country name instead of row number.\n\nrow.names(wh) &lt;- wh$Country\n\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make a heatmap. The code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNote that wh_matrix is in R matrix format.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#static-heatmap",
    "title": "Hands-on_Ex05-3",
    "section": "",
    "text": "There are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap() of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nWe will plot static heatmaps by using heatmap() of R Stats package.\n\n\n\nBase plotCluster heatmapNormalised heatmap\n\n\nLet’s plot a heatmap by using heatmap() of Base Stats.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv = NA, Colv = NA)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\n\n\nTo plot a cluster heatmap, we just have to use the default code.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix.\n\nThis is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nWhen the Happiness Score variable have relatively higher values, it makes all other variables small and hard to interpret. Thus, we need to normalize this matrix.\n\n\n\n\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe values are scaled now and the margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#create-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#create-interactive-heatmap",
    "title": "Hands-on_Ex05-3",
    "section": "",
    "text": "heatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nResource: Introduction to Heatmaply & user manual\nBelow we will use heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nWith basic syntax for interactive heatmap creation, using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap. The text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\n\n\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(); namely, scale, normalise and percentilse.\n\nScaling methodNormalising methodPercentising method\n\n\n\nWhen all variables come from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling. Below the code scales variable values columewise.\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\nWhen variables in the data come from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set; i.e., wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nPercentize method is also performed on the input data set. See below:\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\nManual approachStatistical approach\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\npar(bg = \"#f1f4f5\")\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nNext, find_k() is used to determine the optimal number of cluster.\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\nFigure above shows that K = 3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below:\n\n\nShow the code\npar(bg = \"#f1f4f5\")\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\n\n\n\n\nProblems to tackle: with hierarchical clustering is that it doesn’t actually place the rows in a definite order.\nIt merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nSolution: heatmaply uses the seriation package to find an optimal ordering of rows and columns.\nOptimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\n\nOLOGWmeannone\n\n\nSeriation algorithm #1: Optimal Leaf Ordering (OLO)\nThis algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)).\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\n\n“GW” (Gruvaeus and Wainer) aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nThe Purple colour palette of rColorBrewer is used.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          k_row = 3,\n          seriate = \"GW\",\n          fontsize_col = 7,\n          fontsize_row = 4,\n          colors = Purples)\n\n\n\n\n\n\n\n\nheatmaply has a wide collection of arguments to meet the statistical analysis needs. Italso provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nShow the code\npar(bg = \"#f1f4f5\")\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Greens,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 7,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )\n\n\n\n\n\n\n\n\n\nR for Visual Analytics: https://r4va.netlify.app/chap14#overview",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-3"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started.",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#getting-started.",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "Importing data",
    "text": "Importing data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\nrealis_csv &lt;- read.csv(\"data/REALIS2019.csv\") #old way - utility &gt; avoid using this.\n\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "Pivoting data",
    "text": "Pivoting data\n\npopdata_long &lt;- popdata_fat %&gt;% \n  #what is %&gt;%? allows to combine functions together. e.g. call this file and do pivot_longer.\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\") \n\nCreate rds file\n\nwrite_rds(popdata_long, \"data/rds/popdata_long.rds\") #reading rds is faster.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\nselect, filter, arrange, mutate (compute), group_by, summarise, join.\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter(`Property Type` == \"Condominium\" | \n           `Property Type` == \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\nPutting all together",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Cathy C.",
    "section": "",
    "text": "My name is Cathy.\nCreating cute illustrations in my spare time is one of my favourite hobbies.",
    "crumbs": [
      "![](/images/house.svg)",
      "About"
    ]
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Cathy C.",
    "section": "Education",
    "text": "Education\nSingapore Management University | Masters of IT in Business | Expected Dec 2025",
    "crumbs": [
      "![](/images/house.svg)",
      "About"
    ]
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Cathy C.",
    "section": "Experience",
    "text": "Experience\nMultiple MNCs | Program Manager, Training instructor | Singapore",
    "crumbs": [
      "![](/images/house.svg)",
      "About"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "This study presents an in-depth analysis of ship performance and profitability, focusing on various operational metrics, ship types, and environmental factors. Using a dataset spanning one year, the study identifies seasonal trends in voyage frequencies, revealing fluctuations in ship activity during specific months, particularly among bulk carriers. Visualisation plots was used to explore profitability across ship types, with key performance drivers such as engine type, maintenance status, route type, and operational efficiency playing significant roles in financial outcomes. Findings suggest that while rough weather conditions and longer turnaround times tend to reduce profitability, specific ship-engine combinations exhibit resilience under varying conditions. Time-based profit trends indicate an overall upward trajectory, with several months showing notable profitability increases.\n\n\n\nAn international media company that publishes weekly content on digital platforms is planning to release articles on “Ship Performance in the Gulf of Guinea”. As a graphical editor of the media company, I am going to prepare data visualisation for the article focusing on ship performance assessment.\nThis report will use Exploratory Data Analysis (EDA) methods and ggplot2 functions to visualise insights on 1. Ships’ profitability 2. Operational factors affecting voyage performance.",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01.html#overview",
    "title": "Take-home Exercise 1",
    "section": "1 Overview",
    "text": "1 Overview\n\n1.1 Abstract\nThis study presents an in-depth analysis of ship performance and profitability, focusing on various operational metrics, ship types, and environmental factors. Using a dataset spanning one year, the study identifies seasonal trends in voyage frequencies, revealing fluctuations in ship activity during specific months, particularly among bulk carriers. Visualisation plots was used to explore profitability across ship types, with key performance drivers such as engine type, maintenance status, route type, and operational efficiency playing significant roles in financial outcomes. Findings suggest that while rough weather conditions and longer turnaround times tend to reduce profitability, specific ship-engine combinations exhibit resilience under varying conditions. Time-based profit trends indicate an overall upward trajectory, with several months showing notable profitability increases.\n\n\n1.2 Task\nAn international media company that publishes weekly content on digital platforms is planning to release articles on “Ship Performance in the Gulf of Guinea”. As a graphical editor of the media company, I am going to prepare data visualisation for the article focusing on ship performance assessment.\nThis report will use Exploratory Data Analysis (EDA) methods and ggplot2 functions to visualise insights on 1. Ships’ profitability 2. Operational factors affecting voyage performance.",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#install-and-load-packages",
    "href": "Take-home_Ex/Take-home_Ex01.html#install-and-load-packages",
    "title": "Take-home Exercise 1",
    "section": "2 Install and Load Packages",
    "text": "2 Install and Load Packages\n\npacman::p_load(tidyverse, ggplot2, haven, knitr, patchwork, ggthemes, \n               ggridges, gganimate,ggdist, ggtext, colorspace, magrittr, \n               patchwork, RColorBrewer, ggstatsplot, egg, geomtextpath, \n               readxl, performance, parameters, see, ggiraph, plotlyr,\n               treemap, treemapify)",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#dataset",
    "href": "Take-home_Ex/Take-home_Ex01.html#dataset",
    "title": "Take-home Exercise 1",
    "section": "3 Dataset",
    "text": "3 Dataset\nThe dataset Ship Performance Clustering Dataset downloaded from Kaggle. This file contains a detailed dataset focusing on the operational performance of various ship types across different routes. Each row represents the performance metrics and attributes for a specific voyage or ship over a given timeframe.\n\n3.1 Import file and check\nImport the csv file using read_csv().\n\ndata_ship &lt;- read_csv(\"data/Ship_Pfm_Dataset.csv\")\n\n\nclass(data_ship)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\nNext I would like to observe the variables and their data type and understand the dataset.\nThe dataset consists of 18 columns and 2,736 rows (observations). Each observation contains an entry recording a voyage for which the ship’s profile and operational information. As the result of code shows, there are 5 categorical variables, 1 date variable and 12 numerical variables.\n\nglimpse(data_ship)\n\nRows: 2,736\nColumns: 18\n$ Date                    &lt;date&gt; 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               &lt;chr&gt; \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              &lt;chr&gt; \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             &lt;chr&gt; \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      &lt;chr&gt; \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         &lt;dbl&gt; 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            &lt;dbl&gt; 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       &lt;chr&gt; \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       &lt;dbl&gt; 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    &lt;dbl&gt; 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   &lt;dbl&gt; 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   &lt;dbl&gt; 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     &lt;dbl&gt; 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage &lt;dbl&gt; 93.76925, 93.89537, 96.21824, 66.19370, 80.008…",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01.html#data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "4 Data Wrangling",
    "text": "4 Data Wrangling\nThe diagram below shows the variables selected for this study:\n[placeholder]\n\n4.1 Add a variable\nTo assess the ships’ performance in profit, I will add a variable Profit, to be derived from Revenue_per_Voyage_USD subtracing Operational_Cost_USD.\n\nlibrary(dplyr)\ndata_ship &lt;- data_ship %&gt;%\n  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)\n\nNow, I will use head() to have a look and confirm Profit is added to the data frame and the data type is numeric.\n\nhead(data_ship)\n\n# A tibble: 6 × 19\n  Date       Ship_Type      Route_Type   Engine_Type          Maintenance_Status\n  &lt;date&gt;     &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;                &lt;chr&gt;             \n1 2023-06-04 Container Ship None         Heavy Fuel Oil (HFO) Critical          \n2 2023-06-11 Fish Carrier   Short-haul   Steam Turbine        Good              \n3 2023-06-18 Container Ship Long-haul    Diesel               Fair              \n4 2023-06-25 Bulk Carrier   Transoceanic Steam Turbine        Fair              \n5 2023-07-02 Fish Carrier   Transoceanic Diesel               Fair              \n6 2023-07-09 Fish Carrier   Long-haul    Heavy Fuel Oil (HFO) Fair              \n# ℹ 14 more variables: Speed_Over_Ground_knots &lt;dbl&gt;, Engine_Power_kW &lt;dbl&gt;,\n#   Distance_Traveled_nm &lt;dbl&gt;, Draft_meters &lt;dbl&gt;, Weather_Condition &lt;chr&gt;,\n#   Cargo_Weight_tons &lt;dbl&gt;, Operational_Cost_USD &lt;dbl&gt;,\n#   Revenue_per_Voyage_USD &lt;dbl&gt;, Turnaround_Time_hours &lt;dbl&gt;,\n#   Efficiency_nm_per_kWh &lt;dbl&gt;, Seasonal_Impact_Score &lt;dbl&gt;,\n#   Weekly_Voyage_Count &lt;dbl&gt;, Average_Load_Percentage &lt;dbl&gt;, Profit &lt;dbl&gt;\n\n\n\n\n4.1 Variable selection\nTo perform an analysis to achieve the objectives in 1.2, I will keep the following variables.\n\nVariable Selection\n:\n\n\n\n\n\n\n\n\n\n\nCategory\nVariable\nRecoded\nDescription\nType\nEncoding\n\n\n\n\napple\nDate\nbbb\nbbb\nbbb\nbbb\n\n\npear\nShip_Type\nbbb\nbbb\nbbb\nbbb\n\n\norange\nRoute_Type\nbbb\nbbb\nbbb\nbbb\n\n\norange\nEngine_Type\nbbb\nbbb\nbbb\nbbb\n\n\norange\nMaintenance_Status\nbbb\nbbb\nbbb\nbbb\n\n\norange\nSpeed_Over_Ground_knots\nbbb\nbbb\nbbb\nbbb\n\n\norange\nEngine_Power_kW\nbbb\nbbb\nbbb\nbbb\n\n\norange\nDistance_Traveled_nm\nbbb\nbbb\nbbb\nbbb\n\n\norange\nDraft_meters\nbbb\nbbb\nbbb\nbbb\n\n\norange\nWeather_Condition\nbbb\nbbb\nbbb\nbbb\n\n\norange\nCargo_Weight_tons\nbbb\nbbb\nbbb\nbbb\n\n\norange\nOperational_Cost_USD\nbbb\nbbb\nbbb\nbbb\n\n\norange\nRevenue_per_Voyage_USD\nbbb\nbbb\nbbb\nbbb\n\n\norange\nEfficiency_nm_per_kWh\nbbb\nbbb\nbbb\nbbb\n\n\norange\nWeekly_Voyage_Count\nbbb\nbbb\nbbb\nbbb\n\n\norange\nAverage_Load_Percentage\nbbb\nbbb\nbbb\nbbb\n\n\norange\nRevenue_per_Voyage_USD\nbbb\nbbb\nbbb\nbbb\n\n\norange\nRevenue_per_Voyage_USD\nbbb\nbbb\nbbb\nbbb\n\n\norange\nRevenue_per_Voyage_USD\nbbb\nbbb\nbbb\nbbb\n\n\n\nThe code below is used to select and reorder columns of wanted variables using select()\n\nship &lt;- data_ship %&gt;%\n  \n  select(Date, Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Speed_Over_Ground_knots,\n        Engine_Power_kW, Distance_Traveled_nm, Efficiency_nm_per_kWh,\n        Weather_Condition, Profit, Operational_Cost_USD,Revenue_per_Voyage_USD,  \n        Average_Load_Percentage, Cargo_Weight_tons, Turnaround_Time_hours) \n\nUse glimese() to check and confirm the new data frame ship is created, and now has 14 columns.\n\nglimpse(ship)\n\nRows: 2,736\nColumns: 16\n$ Date                    &lt;date&gt; 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               &lt;chr&gt; \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              &lt;chr&gt; \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             &lt;chr&gt; \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      &lt;chr&gt; \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         &lt;dbl&gt; 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Weather_Condition       &lt;chr&gt; \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Profit                  &lt;dbl&gt; -191649.081, 400377.787, -54524.657, -173798.2…\n$ Operational_Cost_USD    &lt;dbl&gt; 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Average_Load_Percentage &lt;dbl&gt; 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n$ Cargo_Weight_tons       &lt;dbl&gt; 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Turnaround_Time_hours   &lt;dbl&gt; 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n\n\n\n\n4.2 Missing values\nBefore I use the new data to perform analysis, I want to check if there are missing values to remove. If an entry has a missing value, it may affect the analysis result.\nis.na() can be used to check this. Before I dive into each variable, I would like to have an overall check if there indeed are missing values. After this check, there is no missing value found.\n\nwhich(is.na(ship))\n\ninteger(0)\n\nsum(is.na(ship))\n\n[1] 0\n\n\nNext, I will use summary() to run a summary of the dataset to understand the overall statistics of the data.\n\nsummary(ship)\n\n      Date             Ship_Type          Route_Type        Engine_Type       \n Min.   :2023-06-04   Length:2736        Length:2736        Length:2736       \n 1st Qu.:2023-09-10   Class :character   Class :character   Class :character  \n Median :2023-12-17   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-12-17                                                           \n 3rd Qu.:2024-03-24                                                           \n Max.   :2024-06-30                                                           \n Maintenance_Status Speed_Over_Ground_knots Engine_Power_kW\n Length:2736        Min.   :10.01           Min.   : 501   \n Class :character   1st Qu.:13.93           1st Qu.:1148   \n Mode  :character   Median :17.71           Median :1757   \n                    Mean   :17.60           Mean   :1758   \n                    3rd Qu.:21.28           3rd Qu.:2383   \n                    Max.   :25.00           Max.   :2999   \n Distance_Traveled_nm Efficiency_nm_per_kWh Weather_Condition \n Min.   :  50.43      Min.   :0.1002        Length:2736       \n 1st Qu.: 548.51      1st Qu.:0.4636        Class :character  \n Median :1037.82      Median :0.7899        Mode  :character  \n Mean   :1036.41      Mean   :0.7987                          \n 3rd Qu.:1540.93      3rd Qu.:1.1474                          \n Max.   :1998.34      Max.   :1.4993                          \n     Profit        Operational_Cost_USD Revenue_per_Voyage_USD\n Min.   :-444584   Min.   : 10092       Min.   : 50352        \n 1st Qu.:  40885   1st Qu.:131293       1st Qu.:290346        \n Median : 262716   Median :257158       Median :520177        \n Mean   : 266219   Mean   :255143       Mean   :521362        \n 3rd Qu.: 492216   3rd Qu.:381797       3rd Qu.:750073        \n Max.   : 977168   Max.   :499735       Max.   :999917        \n Average_Load_Percentage Cargo_Weight_tons Turnaround_Time_hours\n Min.   : 50.01          Min.   :  50.23   Min.   :12.02        \n 1st Qu.: 62.70          1st Qu.: 553.98   1st Qu.:26.17        \n Median : 75.50          Median :1043.21   Median :41.59        \n Mean   : 75.22          Mean   :1032.57   Mean   :41.75        \n 3rd Qu.: 87.72          3rd Qu.:1527.72   3rd Qu.:57.36        \n Max.   :100.00          Max.   :1999.13   Max.   :71.97        \n\n\nAs shown above, it is observed that for Ship_Type, Route_Type, Engine_Type, and Weather_Condition, there are “None” string that I will not be able to incorporate into my analysis. Therefore, I will remove entries containing “None” using the code below. As a result, a tibble frame of 2,234 entries is derived.\n\nlibrary(dplyr)\n\n#check row numbers before filter\nnrow(ship)\n\n[1] 2736\n\nship_filter &lt;- ship %&gt;%\n  filter(!if_any(c(Ship_Type, Route_Type, Engine_Type, Weather_Condition, Maintenance_Status), ~ .x == \"None\"))\n\n#check row numbers after filter\nnrow(ship_filter) \n\n[1] 2127\n\n\nLet’s run a summary of this dataset again.\n\nsummary(ship_filter)\n\n      Date             Ship_Type          Route_Type        Engine_Type       \n Min.   :2023-06-04   Length:2127        Length:2127        Length:2127       \n 1st Qu.:2023-09-10   Class :character   Class :character   Class :character  \n Median :2023-12-17   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-12-18                                                           \n 3rd Qu.:2024-03-27                                                           \n Max.   :2024-06-30                                                           \n Maintenance_Status Speed_Over_Ground_knots Engine_Power_kW \n Length:2127        Min.   :10.01           Min.   : 501.7  \n Class :character   1st Qu.:13.90           1st Qu.:1140.3  \n Mode  :character   Median :17.71           Median :1755.4  \n                    Mean   :17.61           Mean   :1750.9  \n                    3rd Qu.:21.32           3rd Qu.:2365.0  \n                    Max.   :24.99           Max.   :2998.7  \n Distance_Traveled_nm Efficiency_nm_per_kWh Weather_Condition \n Min.   :  50.43      Min.   :0.1002        Length:2127       \n 1st Qu.: 559.50      1st Qu.:0.4553        Class :character  \n Median :1037.65      Median :0.7750        Mode  :character  \n Mean   :1038.98      Mean   :0.7899                          \n 3rd Qu.:1541.19      3rd Qu.:1.1363                          \n Max.   :1998.34      Max.   :1.4982                          \n     Profit        Operational_Cost_USD Revenue_per_Voyage_USD\n Min.   :-428282   Min.   : 10097       Min.   : 50352        \n 1st Qu.:  47543   1st Qu.:133864       1st Qu.:292184        \n Median : 259071   Median :259125       Median :524083        \n Mean   : 266385   Mean   :257042       Mean   :523428        \n 3rd Qu.: 492047   3rd Qu.:384452       3rd Qu.:752934        \n Max.   : 977168   Max.   :499735       Max.   :999812        \n Average_Load_Percentage Cargo_Weight_tons Turnaround_Time_hours\n Min.   :50.01           Min.   :  50.23   Min.   :12.02        \n 1st Qu.:62.51           1st Qu.: 557.07   1st Qu.:26.31        \n Median :75.16           Median :1045.37   Median :41.53        \n Mean   :75.13           Mean   :1033.47   Mean   :41.77        \n 3rd Qu.:87.69           3rd Qu.:1526.15   3rd Qu.:57.56        \n Max.   :99.95           Max.   :1999.13   Max.   :71.97        \n\n\n\n\n4.3 Convert data type\nFrom 4.1, I observed that Maintenance_Status, Weather_Condition, Ship_Type, Route_Type, Engine_Type are all character data type. In fact, Maintenance_Status, Weather_Condition can be converted to ordinal data type, and Ship_Type, Route_Type, Engine_Type to factor data type to derive better result.\nUse the code below to perform data type conversion:\n\ncol_f &lt;- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\", \"Weather_Condition\")\n#Column names should be in quotation marks (\" \")\n\nship_filter &lt;- ship_filter %&gt;%\n  mutate(across(col_f, as.factor)) %&gt;%\n  mutate(Maintenance_Status = factor(Maintenance_Status,\n                                     levels = c(\"Good\", \"Fair\", \"Critical\"),\n                                     ordered = TRUE)) \n\nI also want to convert the uni for the monetary values into thousand dollars as the unit for Operational_Cost_USD, Revenue_per_Voyage_USD and Profit.\n\nship_filter &lt;- ship_filter %&gt;%\n  mutate(Operational_Cost_USD = round(Operational_Cost_USD / 1000, 0), #convert to thousand dollars, leaving on decimal places.\n         Revenue_per_Voyage_USD = round(Revenue_per_Voyage_USD / 1000, 0),\n         Profit = round(Profit / 1000, 0))\n\nI use kable() to check the conversion result, and confirm the desired variables have been converted accordingly.\n\nkable(head(ship_filter, n=8), caption = \"Ship Performance Dataset\")\n\n\nShip Performance Dataset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nShip_Type\nRoute_Type\nEngine_Type\nMaintenance_Status\nSpeed_Over_Ground_knots\nEngine_Power_kW\nDistance_Traveled_nm\nEfficiency_nm_per_kWh\nWeather_Condition\nProfit\nOperational_Cost_USD\nRevenue_per_Voyage_USD\nAverage_Load_Percentage\nCargo_Weight_tons\nTurnaround_Time_hours\n\n\n\n\n2023-06-11\nFish Carrier\nShort-haul\nSteam Turbine\nGood\n10.38758\n1796.0574\n1060.4864\n0.2903614\nRough\n400\n483\n884\n93.89537\n162.3947\n63.24820\n\n\n2023-06-18\nContainer Ship\nLong-haul\nDiesel\nFair\n20.74975\n1648.5567\n658.8741\n0.4995945\nModerate\n-55\n449\n394\n96.21824\n178.0409\n49.41815\n\n\n2023-06-25\nBulk Carrier\nTransoceanic\nSteam Turbine\nFair\n21.05510\n915.2618\n1126.8225\n0.7029057\nModerate\n-174\n261\n88\n66.19370\n1737.3853\n22.40911\n\n\n2023-07-02\nFish Carrier\nTransoceanic\nDiesel\nFair\n13.74278\n1089.7218\n1445.2812\n1.3313431\nModerate\n388\n288\n676\n80.00858\n260.5951\n64.15823\n\n\n2023-07-09\nFish Carrier\nLong-haul\nHeavy Fuel Oil (HFO)\nFair\n18.61620\n2171.6466\n723.3042\n1.3702060\nRough\n592\n185\n777\n53.17490\n1912.5098\n47.47615\n\n\n2023-07-16\nFish Carrier\nTransoceanic\nHeavy Fuel Oil (HFO)\nCritical\n20.43312\n2505.0435\n270.1186\n1.1203894\nRough\n305\n434\n739\n58.50864\n1191.4364\n29.04042\n\n\n2023-07-23\nContainer Ship\nShort-haul\nDiesel\nCritical\n23.49805\n814.8065\n1717.3284\n0.6959746\nModerate\n114\n348\n462\n94.59197\n318.4493\n52.47860\n\n\n2023-08-06\nContainer Ship\nLong-haul\nDiesel\nFair\n23.22710\n2685.4017\n1588.7923\n0.4406762\nCalm\n465\n150\n615\n79.45133\n1843.4383\n63.74276",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#voyage-profile",
    "href": "Take-home_Ex/Take-home_Ex01.html#voyage-profile",
    "title": "Take-home Exercise 1",
    "section": "4 Voyage Profile",
    "text": "4 Voyage Profile\nTo perform profit performance analysis in the next section, we shall understand the profile of the data and variables to determine the direction for the performance analysis. Below I will utilise variables to visualise ship conditions, weather conditions and operational factors by the different ship types to obtain preliminary understanding of patterns or trends.\n\n4.1 Ship conditions & routes\n\n\nShow the code\n# Code bar chart for Ship type\np_st &lt;- ggplot(data = ship_filter,\n               aes(x = Ship_Type)) +\n  geom_bar(fill = \"grey20\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 3) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Ship types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 10, face = \"bold\"),\n        text = element_text(size = 10))\n\n# Code bar chart for Engine type\n\np_et &lt;- ggplot(data = ship_filter,\n               aes(x = Engine_Type)) +\n  geom_bar(fill = \"grey20\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 3) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Engine types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 10, face = \"bold\"),\n        text = element_text(size = 10))\n\n\n# Code bar chart for Route type\n\np_rt &lt;- ggplot(data = ship_filter,\n               aes(x = Route_Type)) +\n  geom_bar(fill = \"grey20\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 3) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Route types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 10, face = \"bold\"),\n        text = element_text(size = 10))\n\n#Code bar chart for Maintenance status\n\np_ms &lt;- ggplot(data = ship_filter,\n               aes(x = Maintenance_Status)) +\n  geom_bar(fill = \"grey20\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 3) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Maintenance status\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 10, face = \"bold\"),\n        text = element_text(size = 10))\n\n#Combine all charts\n\npatchwork &lt;- (p_st | p_et) / (p_rt | p_ms)\npatchwork\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe dataset is fairly evenly distributed across different ship types, engine types, route types, and maintenance statuses, with each category varying by 0 ~ 3%.\nThe largest different is between Long-haul trips and Short haul, Transoceanic, which is 3%.\n\n\n\n\n\n\n4.2 Weather conditions\nI aimed to analyse the overall voyage distribution of weather conditions as well as their trends over time with geom_bar(). Bar charts is used to represent the distribution, while a stacked bar chart visualises the percentage occurrence of the three different weather conditions within each month.\n\n\nShow the code\n#Plot1\np_wthr_1 &lt;- ggplot(data = ship_filter,\n               aes(x = Weather_Condition, fill = Weather_Condition)) +\n  geom_bar() +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 3) +\n  scale_fill_manual(values = c(\"Calm\" = \"#bcd6be\",\n                               \"Moderate\" = \"#f5e8ce\",\n                               \"Rough\" = \"#e0bcc0\")) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Weather Condition \\n Overview\") +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 12, face = \"bold\"),\n        text = element_text(size = 8),\n        legend.text = element_text(size = 8),  \n        legend.title = element_text(size = 8, face = \"bold\"),  \n#        legend.key.size = unit(0.5, \"cm\"),  \n#        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"none\")  \n\n# Plot2\n# Extract month and year from the Date\nship_filter_month &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by Month and Weather type, then count occurrences\nweather_by_month_bar &lt;- ship_filter_month %&gt;%\n  group_by(Month, Weather_Condition) %&gt;%\n  summarise(Count = n(), .groups = \"drop\")\n\n# Calculate total occurrences per month\ntotal_per_month_bar &lt;- weather_by_month_bar %&gt;%\n  group_by(Month) %&gt;%\n  summarise(Total = sum(Count))\n\n# Join total occurrences per month and compute percentage\nweather_percentage_bar &lt;- weather_by_month_bar %&gt;%\n  left_join(total_per_month_bar, by = \"Month\") %&gt;%\n  mutate(Percentage = (Count / Total) * 100) \n\n# Plot stacked bar chart with percentage\np_wthr_2 &lt;- ggplot(weather_percentage_bar, \n       aes(x = Month, y = Percentage, fill = factor(Weather_Condition, levels = c(\"Calm\", \"Moderate\", \"Rough\")))) +\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Use identity because we computed percentages\n  geom_text(aes(label = paste0(round(Percentage, 0), \"%\")), \n            position = position_stack(vjust = 0.5),  \n            size = 3, color = \"black\") +  \n  scale_fill_manual(values = c(\"Calm\" = \"#bcd6be\",\n                               \"Moderate\" = \"#f5e8ce\",\n                               \"Rough\" = \"#e0bcc0\")) + \n  labs(title = \"Weather Distribution by Month (%)\",\n       x = \"Month\",\n       y = \"Percentage (%)\",\n       fill = \"Weather\") +\n  theme_article() +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") + \n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        text = element_text(size = 8),\n        legend.text = element_text(size = 8),  \n        legend.title = element_text(size = 8, face = \"bold\"), \n        legend.key.size = unit(0.5, \"cm\"),  \n        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"top\")  \n\n#Combine plots\np_wthr_2 + p_wthr_1 + plot_layout(widths = c(2.5,1))\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe Weather Condition Overview chart on the right shows that voyages in rough weather occur less frequently than those in other weather conditions, yet they still make up over 30% of the year. While ships primarily operate in fine weather, nearly one-third of the journeys experience rough conditions for both the ships and personnel.\nJanuary recorded the fewest rough journeys compared to other months, while April had the highest count of rough journeys.\nShips are capable of operating under any weather condition throughout the year. There is no specific month when the journeys were consistently exceptional or consistently poor.\n\n\n\n\n\n4.3 Operational effects by ship type and route type\nThis section delves into the operational performance of various ships, examining key factors such as average load, engine power, cargo weight, turnaround time, distance traveled, and energy efficiency. To visualize the distribution of these factors across different ship and route types, stat_halfeye() is used to generate half-eye plots. This method offers a clear view of the distributions, revealing trends and the spread of each operational effect. By comparing these distributions, I aim to identify how different ship types and routes may influence these operational effects.\n\nAverage loadEngine powerCargo weightTurnaround timeDistance travelledEnergy efficiency\n\n\n\n\nShow the code\n#Plot1\np_heye_al &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Average_Load_Percentage,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 1,\n                       interval_color = \"grey70\") +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#FF9EAA\", alpha.f = 0.5),\n                               \"Long-haul\" = adjustcolor(\"#3AA6B9\", alpha.f = 0.5), \n                               \"Short-haul\" = adjustcolor(\"#e0c080\", alpha.f = 0.5),\n                               \"Transoceanic\" = adjustcolor(\"grey70\", alpha.f = 0.5)),\n                               name = NULL) +\n  labs(title = \"Halfeye Plots by Route Type\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Average_Load_Percentage)\n\np_heye_al_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Average_Load_Percentage)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"mako\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"#3AA6B9\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"#3AA6B9\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots with Median Line\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n#Combine plots\np_heye_al_st / p_heye_al + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\nObervations\n\n\nAcross various operational effects, none of the distributions follow a normal distribution. Instead, multimodal distributions are observed across the four route types for each ship type. Although the median scores vary among different ship types and route types for these operational effects, they all converge towards similar median values in the end, regardless of the ship type.\nAverage load Fish carriers and tankers generally have lower median of Average load percentages for long-haul trips, but higher median values for coastal trips. Bulk carrier has the lowest median of the average load percentage in transoceanic journey and highest for short-haul journey. Container ship have closer median scores among coastal, long-haul and short-haul. It has higher median score for average load in transoceanic trips.\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_ep &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Engine_Power_kW,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#FF9EAA\", alpha.f = 0.5),\n                               \"Long-haul\" = adjustcolor(\"#3AA6B9\", alpha.f = 0.5), \n                               \"Short-haul\" = adjustcolor(\"#e0c080\", alpha.f = 0.5),\n                               \"Transoceanic\" = adjustcolor(\"grey70\", alpha.f = 0.5)), \n                                 name = NULL) +\n  labs(title = \"Halfeye Plots of Engine Power by Route Type\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Engine_Power_kW)\n\np_heye_ep_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Engine_Power_kW)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", \n                       color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"cividis\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"blue\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"blue\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Engine Power with Median Line\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n#Combine plots\np_heye_ep_st / p_heye_ep + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\nEngine power\n\n\n\nAmong the four ship types, the Fish Carrier shows the widest range of median engine power across the different route types. It has the lowest median engine power for long-haul trips and the highest for transoceanic trips.\nOverall, the Tanker has a higher median engine power compared to the Container ship.\n\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_cw &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Cargo_Weight_tons,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#FF9EAA\", alpha.f = 0.5),\n                               \"Long-haul\" = adjustcolor(\"#3AA6B9\", alpha.f = 0.5), \n                               \"Short-haul\" = adjustcolor(\"#e0c080\", alpha.f = 0.5),\n                               \"Transoceanic\" = adjustcolor(\"grey70\", alpha.f = 0.5)), \n                               name = NULL) +\n  labs(title = \"Halfeye Plots of Cargo Weight by Route Type\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Cargo_Weight_tons)\n\np_heye_cw_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Cargo_Weight_tons)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"plasma\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"red\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"red\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Cargo Weight with Median Line\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n#Combine plots\np_heye_cw_st / p_heye_cw + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\nCargo weight\n\n\n\nBulk carriers tend to have a higher concentration of lower cargo weights on Transoceanic trips. The density ridge line shows an obvious hump on the lower end of weight.\nFish carriers and Tankers show a greater concentration of higher cargo weights on Long-haul trips, while the concentration is lower on Short-haul trips.\nContainer ships show a higher concentration of cargo weights on Coastal and Transoceanic trips, with less concentration on Long-haul trips.\n\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_tt &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Turnaround_Time_hours,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#FF9EAA\", alpha.f = 0.5),\n                               \"Long-haul\" = adjustcolor(\"#3AA6B9\", alpha.f = 0.5), \n                               \"Short-haul\" = adjustcolor(\"#e0c080\", alpha.f = 0.5),\n                               \"Transoceanic\" = adjustcolor(\"grey70\", alpha.f = 0.5)), \n                               name = NULL) +\n  labs(title = \"Halfeye Plots of Turnaround Time by Route Type\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Turnaround_Time_hours)\n\np_heye_tt_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Turnaround_Time_hours)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"rocket\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"green\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"green\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Turnaround Time with Median Line\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n#Combine plots\np_heye_tt_st / p_heye_tt + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\nTurnaround time\n\n\n\nBulk carriers exhibit longer turnaround times on coastal, long-haul, and transoceanic routes, which aligns with the extended distances they cover. In contrast, Fish carriers show an inverse trend—short-haul routes have higher turnaround times, while long-haul routes see quicker turnarounds.\nThis suggests that Fish carriers on short-haul routes may frequently stop at sea to receive fish from fishing vessels before returning, whereas long-haul voyages likely involve fewer interruptions. Further data could clarify this operational pattern.\n\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_dt &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Distance_Traveled_nm,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#FF9EAA\", alpha.f = 0.5),\n                               \"Long-haul\" = adjustcolor(\"#3AA6B9\", alpha.f = 0.5), \n                               \"Short-haul\" = adjustcolor(\"#e0c080\", alpha.f = 0.5),\n                               \"Transoceanic\" = adjustcolor(\"grey70\", alpha.f = 0.5)), \n                               name = NULL) +\n  labs(title = \"Halfeye Plots of Distance by Route Type\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n#Plot2\n\nmedian_load = median(ship_filter$Distance_Traveled_nm)\n\np_heye_dt_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Distance_Traveled_nm)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"inferno\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"grey20\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"grey20\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Distance with Median Line\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n#Combine plots\np_heye_dt_st / p_heye_dt + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\nDistance travelled*\n\n\n\nBoth Bulk carriers and Fish carriers exhibit strong bimodal distributions in the distances traveled on long-haul routes. However, they differ significantly in their average travel distances compared to other routes. Bulk carriers show the shortest average distance for long-haul trips, while Fish carriers record the longest. This disparity suggests that despite similar route classifications, the operational characteristics or requirements for these ship types influence their journey lengths.\n\n\n\n\n\n\n\nShow the code\n# Plot1\np_heye_ee_et &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Engine_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Heavy Fuel Oil (HFO)\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.6),\n                               \"Steam Turbine\" = adjustcolor(\"#DA498D\", alpha.f = 0.6), \n                               \"Diesel\" = adjustcolor(\"#96CEB4\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Engine Type\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n\n# Plot2\n\nmedian_load = median(ship_filter$Efficiency_nm_per_kWh)\n\np_heye_ee &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"magma\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"brown\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"brown\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Energy Efficiency with Median Line\") \n\n\n# Plot3\np_heye_ee_wc &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Weather_Condition)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 3) +\n  scale_fill_manual(values = c(\"Moderate\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.6),\n                               \"Rough\" = adjustcolor(\"#DA498D\", alpha.f = 0.6), \n                               \"Calm\" = adjustcolor(\"#5B99C2\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Weather\") +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n# Plot4\np_heye_ee_ms &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Maintenance_Status)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Fair\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.6),\n                               \"Critical\" = adjustcolor(\"#8B5DFF\", alpha.f = 0.6), \n                               \"Good\" = adjustcolor(\"#41B3A2\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Maintenance\") \n\n\n# Combine plots\n(p_heye_ee | p_heye_ee_et) / (p_heye_ee_wc | p_heye_ee_ms)\n\n\n\n\n\n\n\n\n\n\n\nEnergy efficiency\n\n\nThe energy efficiency distribution appears relatively uniform across all ship types, suggesting that there is no significant disparity in energy performance across different vessels.\nAn interesting observation is that Container ships demonstrate a remarkbly higher average energy efficiency during calm weather conditions. In contrast, Fish carriers show a slight negative skew in energy efficiency during calm weather, indicating that Fish containers may face unique operational constaints in such conditions.\nWhile most ship types exhibit a positive correlation between energy efficiency and maintenance status, Fish carriers deviate from this trend. They show a lower average energy efficiency when in good maintenance status. This anomaly could potentially be attributed to the specific logistics requirements of Fish carriers, which might necessitate operational adjustments that affect their energy performance. Further investigation is needed to understand the factors influencing this discrepancy.\n\n\n\n\n\n\n\n4.4 Voyage frequency\n\n4.4.1 Overall voyage frequency over time\nTo analyse voyage frequency trends over time, a bar chart was plotted to illustrate the monthly distribution of voyages in the dataset.\n\n\nShow the code\nvoyage_count &lt;- ship_filter %&gt;%\n  mutate(Month = format(as.Date(Date), \"%Y-%m\")) %&gt;% #to extract Year-Month\n  group_by(Month) %&gt;%\n  summarise(Count = n()) #count rows\nvoyage_count_scaled &lt;- voyage_count %&gt;%\n  mutate(Count_scaled = Count / 10)\n\n#calculate average\nmean_voyage &lt;- mean(voyage_count$Count)\n\nggplot(voyage_count_scaled,\n       aes(x = Month,\n           y = Count_scaled)) +\n  geom_bar(stat = \"identity\", \n           fill = \"grey30\") +\n  labs(x = \"Date\", y = \"Voyage Count (scaled by 10) \",\n       title = \"Voyage Frequency Over Time\") +\n  theme_light() +\n  geom_hline(yintercept = mean_voyage/10, color = \"#3AA6B9\", linetype = \"dashed\", size = 1) + \n  annotate(\"text\", x = 3.2, y = mean_voyage/10 + 1, \n           label = paste(\"Mean: \", round(mean_voyage/10, 2)), color = \"#3AA6B9\")+\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = NA),  \n        legend.key = element_rect(fill = \"#f1f4f5\", color = NA)\n        )\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nVoyage frequencies exhibit seasonal fluctuations, with notable peaks in July, October, and December 2023, as well as March and June 2024.\nMarch 2024 recorded the highest voyage count, nearing 200 voyages.\nMost other months maintained a steady frequency around 150 voyages, with September recording the lowest.\n\n\n\n\n\n4.4.2 Voyage frequency by ship type\nTo gain deeper insights into voyage frequencies by ship type and their distribution over time, the combined bar charts plot below presents voyage frequencies by ship type on the right and their monthly percentages over time.\n\n\nShow the code\n# Extract month and year from the Date\nship_filter_month &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by Month and Ship type, then count occurrences\ntrip_by_month_bar &lt;- ship_filter_month %&gt;%\n  group_by(Month, Ship_Type) %&gt;%\n  summarise(Count = n(), .groups = \"drop\")\n\n# Calculate total occurrences per month\ntotal_trip_per_month_bar &lt;- trip_by_month_bar %&gt;%\n  group_by(Month) %&gt;%\n  summarise(Total = sum(Count))\n\n# Join total occurrences per month and compute percentage\ntrip_percentage_bar &lt;- trip_by_month_bar %&gt;%\n  left_join(total_trip_per_month_bar, by = \"Month\") %&gt;%\n  mutate(Percentage = (Count / Total) * 100)  # Convert to percentage\n\n# Plot stacked bar chart with percentage\np_trip_ct_1 &lt;- ggplot(trip_percentage_bar, \n       aes(x = Month, y = Percentage, fill = factor(Ship_Type, levels = c(\"Bulk Carrier\", \"Container Ship\", \"Fish Carrier\", \"Tanker\")))) +\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Use identity because we computed percentages\n  geom_text(aes(label = paste0(round(Percentage, 0), \"%\")), \n            position = position_stack(vjust = 0.5),  # Center the text in each segment\n            size = 2.5, color = \"black\") +  # Adjust text size and color\n  scale_fill_manual(values = c(\"Bulk Carrier\" = \"#bcd6be\",\n                               \"Container Ship\" = \"#f5e8ce\",\n                               \"Fish Carrier\" = \"#e0bcc0\",\n                               \"Tanker\" = \"#9bc5cc\")) + \n  labs(title = \"Number of Trips Over Time (%)\",\n       x = \"Month\",\n       y = \"Percentage (%)\",\n       fill = \"Ship_Type\") +\n  theme_light() +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") + \n  theme(plot.title = element_text(size = 8, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        text = element_text(size = 8),\n        legend.text = element_text(size = 6),  # Change legend text size\n        legend.title = element_text(size = 6, face = \"bold\"),  # Change legend title size\n        legend.key.size = unit(0.5, \"cm\"),  # Adjust legend key size (box size)\n        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"top\") \n\n###------------ Plot2 ------------\n#Count the number of trips by ship\ntrip_count &lt;- ship_filter %&gt;%\n  group_by(Ship_Type) %&gt;%\n  summarise(Trip_Count = n(), .group = \"drop\")\n\n#calculation\ntotal_trips &lt;- sum(trip_count$Trip_Count)\ntrip_count &lt;- trip_count %&gt;%\n  mutate(Percentage = (Trip_Count / total_trips) * 100)\n\n#plot the bar chart\np_trip_ct_2 &lt;- ggplot(trip_count,\n       aes(x = Ship_Type,\n           y = Trip_Count,\n           fill = Ship_Type)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) + #stat = \"identity\": use the values in 'Trip_Count'\n  labs(title = \"Trip Count by Ship Type\",\n       x = \"Ship Type\",\n       y = \"Number of Trips\") +\n  geom_text(aes(label = paste0(Trip_Count,\" (\", round(Percentage, 1), \"%)\")),\n            vjust = -0.8, size = 2, angle = 45) +\n  theme_light() +\n  theme(plot.title = element_text(size = 8, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        text = element_text(size = 8),\n        legend.text = element_text(size = 6), \n        legend.title = element_text(size = 6, face = \"bold\"), \n        legend.key.size = unit(0.5, \"cm\"),\n        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_manual(values = c(\"Bulk Carrier\" = \"#bcd6be\",\n                               \"Container Ship\" = \"#f5e8ce\",\n                               \"Fish Carrier\" = \"#e0bcc0\",\n                               \"Tanker\" = \"#9bc5cc\")) \n#Combine plots\np_trip_ct_1 + p_trip_ct_2 + plot_layout(widths = c(2.5,1))\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\nBalanced Distribution with Leading Segments Voyage frequencies are fairly evenly distributed across ship types. Bulk carriers recorded the highest share at nearly 26%, followed by tankers, container ships, and fish carriers, each contributing approximately 25%.\n\nBulk Carrier Trends Bulk carriers’ voyage frequencies range from 20% to 34%, with peak activity in August, November 2023 and April 2024, where they accounted for close to or more than 1/3 of total monthly voyages.\nContainer Ship Patterns Container ships showed fluctuations between 19% and 29%. Peak months included December 2023 and March, June 2024, when they made up nearly 30% of total voyages.\nFish Carrier Variability Fish carriers exhibited the widest range, from 16% to 33%, with the lowest frequency in November 2023 and the highest in January 2024.\nTanker Stability Tankers maintained steadier voyage frequencies, ranging from 21% to 29%, suggesting that seasonal variations had less impact on their operations compared to other ship types.",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#profit-performance",
    "href": "Take-home_Ex/Take-home_Ex01.html#profit-performance",
    "title": "Take-home Exercise 1",
    "section": "5 Profit Performance",
    "text": "5 Profit Performance\n\n5.1 Finance performance overview\nTo assess the financial performance across all ship types, a boxplot analysis was conducted, examining key metrics such as operational cost, revenue per trip, and profit (all in thousand dollars). This provides an overarching view of profitability and cost efficiency across voyages.\n\n\nShow the code\n#Plot operational cost distribution\np1 &lt;- ggplot(ship_filter,\n       aes(y = Operational_Cost_USD, x = \"All ship types\")) +\n  geom_violin(outlier.colour = \"purple\",\n              color = \"#A3B23B\",\n              fill = \"#F4F8D3\",\n              alpha = 0.4) + \n  geom_boxplot(width = .2,\n               color = \"grey60\") +\n  geom_point(position = \"jitter\",\n             size = 0.2,\n             color = \"#F4F8D3\",\n             alpha = 0.3) +\n  coord_cartesian(ylim = c(-500, 1000)) +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.border = element_blank())\n\n#Plot revenue distribution\np2&lt;- ggplot(ship_filter,\n       aes(y = Revenue_per_Voyage_USD, x = \"All ship types\")) +\n  geom_violin(outlier.colour = \"blue\",\n               color = \"#5FB0B0\",\n               fill = \"#73C7C7\",\n               alpha = 0.4) +\n  geom_boxplot(width = .2,\n               color = \"grey60\") +\n  geom_point(position = \"jitter\",\n             size = 0.2,\n             color = \"#73C7C7\",\n             alpha = 0.3) +\n  coord_cartesian(ylim = c(-500, 1000)) +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.border = element_blank())\n\n#Plot profit distribution\np3 &lt;- ggplot(ship_filter,\n       aes(y = Profit, x = \"All ship types\")) +\n  geom_violin(outlier.colour = \"green\",\n               color = \"#E6A5B1\",\n               fill = \"#F7CFD8\",\n               alpha = 0.4) +\n  geom_boxplot(width = .2,\n               color = \"grey60\") +\n  geom_point(position = \"jitter\",\n             size = 0.2,\n             color = \"#F7CFD8\",\n             alpha = 0.3) +\n  coord_cartesian(ylim = c(-500, 1000)) +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.border = element_blank())\n\npatchwork &lt;- p1 + p2 + p3\npatchwork + plot_annotation(\n  title = \"Finance Distribution Overview\") &\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA)\n)\n\n\n\n\n\n\n\n\n\nFor a deeper analysis of profit variations between ship types, a ggbetweenstats plot was employed. This visualisation not only compares profit distributions but also evaluates the statistical significance of differences, offering insights into which vessel types demonstrate superior financial performance.\n\n\nShow the code\n# Plot statboxplot by ship types\nggbetweenstats(\n  data = ship_filter,\n  x = Ship_Type,\n  y = Profit,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n) +\n  labs(title = \"Welch’s one-way ANOVA\") +\n  theme(panel.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        plot.title = element_text(size = 16, face = \"bold\") \n        )\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe distribution of operational costs and revenue appears relatively uniform, with operational costs ranging from $0 to $500K and revenue $0 to $1M. In addition, no significant outliers were detected, suggesting consistent financial performance.\nWith voyage counts closely clustered between 521 and 550 trips, profit exhibits a normal distribution, suggesting a balanced spread of earnings per trip.\nStatistical analysis using Welch’s one-way ANOVA produced a p-value of 0.84, far exceeding the 0.05 threshold. This indicates no statistically significant difference in profit performance across ship types. This suggested that factors other than vessel classification may be influencing profitability.\n\n\n\n\n\n5.2 Profit performance by ship, engine type in different aspects\nIn this section, we dive deeper into the performance of ships by examining categorical variables through density ridge plots. By analysing ship types and their respective engine types, we assess their performance across various factors such as routes, weather conditions, and maintenance status. Each row of the plot represents a different engine type, while the columns correspond to individual ship types, providing a comprehensive view of how these elements interact.\n\n5.2.1 Operational conditions\n\nRoute TypeWeather ConditionMaintenance status\n\n\n\n\nShow the code\n###------------1 Plot Bulk Carrier -----------###\n\n# Filter data for only \"Bulk Carrier\" ships\nbulkc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Bulk Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_bulkc &lt;- bulkc_data %&gt;%\n  group_by(Engine_Type, Route_Type) %&gt;%\n  summarise(mean_profit_bulkc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_bulkc\np_ridg_bulkc &lt;- ggplot(bulkc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Route_Type, \n                        color = Route_Type)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_bulkc, \n             aes(x = mean_profit_bulkc, y = Engine_Type, fill = Route_Type), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1) +\n  labs(x = \"Bulk Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\"),\n        plot.margin = margin(t = 10, r = 10, b = 30, l = 20)\n        ) \n\n\n###------------2 Plot Container Ship -----------###\n# Filter data for only \"Container Ship\" ships\ncship_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Container Ship\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_cship &lt;- cship_data %&gt;%\n  group_by(Engine_Type, Route_Type) %&gt;%\n  summarise(mean_profit_cship = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_cship\np_ridg_cship &lt;- ggplot(cship_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Route_Type, \n                        color = Route_Type)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_cship, \n             aes(x = mean_profit_cship, y = Engine_Type, fill = Route_Type), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") + \n  labs(x = \"Container Ship\", y = NULL) +  \n  scale_fill_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"top\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n\n###-----------3 Plot Fish Carrier -----------###\n# Filter data for only \"Fish Carrier\" ships\nfishc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Fish Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_fishc &lt;- fishc_data %&gt;%\n  group_by(Engine_Type, Route_Type) %&gt;%\n  summarise(mean_profit_fishc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_fishc\np_ridg_fishc &lt;- ggplot(fishc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Route_Type, \n                        color = Route_Type)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_fishc, \n             aes(x = mean_profit_fishc, y = Engine_Type, fill = Route_Type), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Fish Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n###-----------4 Plot Tanker-----------###\n# Filter data for only \"Tanker\" ships\ntanker_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Tanker\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_tanker &lt;- tanker_data %&gt;%\n  group_by(Engine_Type, Route_Type) %&gt;%\n  summarise(mean_profit_tanker = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_tanker\np_ridg_tanker &lt;- ggplot(tanker_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Route_Type, \n                        color = Route_Type)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_tanker, \n             aes(x = mean_profit_tanker, y = Engine_Type, fill = Route_Type), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Tanker\", y = NULL) +  \n  scale_fill_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Coastal\" = \"#FF9EAA\",\n                               \"Long-haul\" = \"#3AA6B9\",\n                               \"Short-haul\" = \"#e0c080\",\n                               \"Transoceanic\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120)\n        )\n\npatchwork &lt;- (p_ridg_bulkc | p_ridg_cship | p_ridg_fishc | p_ridg_tanker)\npatchwork \n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nWhen comparing route performance across ship types, the findings reveal some interesting trends. Bulk carriers, which are powered by diesel engines, maintain a consistent performance across various routes. However, other ship types show noticeable variations.\nAmong the different ship types, Container ships with HFO engines demonstrate a lower average profit on long-haul trips compared to coastal and transoceanic routes. In contrast, Tankers equipped with HFO engines exhibit a right-skewed profit distribution on coastal routes, leading to a lower average profit compared to other route types.\nFish carriers  Displays varied profit patterns, regardless of the engine type. When operating on HFO engines, Fish carriers tend to exhibit a left-skewed profit distribution on long-haul routes, indicating that profits are more concentrated at the higher end. While the average profit doesn’t show a clear advantage, this skew suggests that certain engine and route combinations could potentially enhance profitability for Fish carriers under specific conditions. In transoceanic routes, Fish carriers show similar concentrated density regardless of the engine types.\n\n\n\n\n\n\n\nShow the code\n###------------1 Plot Bulk Carrier -----------###\n\n# Filter data for only \"Bulk Carrier\" ships\nbulkc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Bulk Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_bulkc &lt;- bulkc_data %&gt;%\n  group_by(Engine_Type, Weather_Condition) %&gt;%\n  summarise(mean_profit_bulkc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_bulkc\np_ridg_bulkc_wc &lt;- ggplot(bulkc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Weather_Condition, \n                        color = Weather_Condition)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_bulkc, \n             aes(x = mean_profit_bulkc, y = Engine_Type, fill = Weather_Condition), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1) +\n  labs(x = \"Bulk Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\"),\n        plot.margin = margin(t = 10, r = 10, b = 30, l = 20)\n        ) \n\n\n###------------2 Plot Container Ship -----------###\n# Filter data for only \"Container Ship\" ships\ncship_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Container Ship\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_cship &lt;- cship_data %&gt;%\n  group_by(Engine_Type, Weather_Condition) %&gt;%\n  summarise(mean_profit_cship = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_cship\np_ridg_cship_wc &lt;- ggplot(cship_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Weather_Condition, \n                        color = Weather_Condition)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_cship, \n             aes(x = mean_profit_cship, y = Engine_Type, fill = Weather_Condition), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") + \n  labs(x = \"Container Ship\", y = NULL) +  \n  scale_fill_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"top\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n\n###-----------3 Plot Fish Carrier -----------###\n# Filter data for only \"Fish Carrier\" ships\nfishc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Fish Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_fishc &lt;- fishc_data %&gt;%\n  group_by(Engine_Type, Weather_Condition) %&gt;%\n  summarise(mean_profit_fishc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_fishc\np_ridg_fishc_wc &lt;- ggplot(fishc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Weather_Condition, \n                        color = Weather_Condition)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_fishc, \n             aes(x = mean_profit_fishc, y = Engine_Type, fill = Weather_Condition), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Fish Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n###-----------4 Plot Tanker-----------###\n# Filter data for only \"Tanker\" ships\ntanker_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Tanker\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_tanker &lt;- tanker_data %&gt;%\n  group_by(Engine_Type, Weather_Condition) %&gt;%\n  summarise(mean_profit_tanker = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_tanker\np_ridg_tanker_wc &lt;- ggplot(tanker_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Weather_Condition, \n                        color = Weather_Condition)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_tanker, \n             aes(x = mean_profit_tanker, y = Engine_Type, fill = Weather_Condition), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Tanker\", y = NULL) +  \n  scale_fill_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Rough\" = \"#FF9EAA\",\n                               \"Calm\" = \"#3AA6B9\",\n                               \"Moderate\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120)\n        )\n\npatchwork &lt;- (p_ridg_bulkc_wc | p_ridg_cship_wc | p_ridg_fishc_wc | p_ridg_tanker_wc)\npatchwork \n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nVoyages in rough weather often display skewed profit performance. Bulk carriers with diesel engines show opposite skewness between rough and moderate weather, a trend also observed in Tankers with steam turbine and HFO engines.\nEvery weather condition shows a few bimodal distribution for certain types of ship and engine combination. For example, Container ships running on HFO engine shows a bimodal distribution during rough weather, and so is Fish carrier with diesel & steam turbine engine during calm weather.\nCertain ship and engine combinations exhibit bimodal distributions under specific weather conditions: - Container ships with HFO engines show bimodal distribution in rough weather. - Fish carriers with diesel or steam turbine engines show bimodal distribution in calm weather.\n\n\n\n\n\n\n\nShow the code\n###------------1 Plot Bulk Carrier -----------###\n\n# Filter data for only \"Bulk Carrier\" ships\nbulkc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Bulk Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_bulkc &lt;- bulkc_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_bulkc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_bulkc\np_ridg_bulkc_ms &lt;- ggplot(bulkc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_bulkc, \n             aes(x = mean_profit_bulkc, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1) +\n  labs(x = \"Bulk Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\"),\n        plot.margin = margin(t = 10, r = 10, b = 30, l = 20)\n        ) \n\n\n###------------2 Plot Container Ship -----------###\n# Filter data for only \"Container Ship\" ships\ncship_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Container Ship\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_cship &lt;- cship_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_cship = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_cship\np_ridg_cship_ms &lt;- ggplot(cship_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_cship, \n             aes(x = mean_profit_cship, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") + \n  labs(x = \"Container Ship\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"top\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n\n###-----------3 Plot Fish Carrier -----------###\n# Filter data for only \"Fish Carrier\" ships\nfishc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Fish Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_fishc &lt;- fishc_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_fishc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_fishc\np_ridg_fishc_ms &lt;- ggplot(fishc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_fishc, \n             aes(x = mean_profit_fishc, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Fish Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n###-----------4 Plot Tanker-----------###\n# Filter data for only \"Tanker\" ships\ntanker_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Tanker\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_tanker &lt;- tanker_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_tanker = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_tanker\np_ridg_tanker_ms &lt;- ggplot(tanker_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_tanker, \n             aes(x = mean_profit_tanker, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Tanker\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120)\n        )\n\npatchwork &lt;- (p_ridg_bulkc_ms | p_ridg_cship_ms | p_ridg_fishc_ms | p_ridg_tanker_ms)\npatchwork \n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe density plots reveal varying profit patterns across different maintenance statuses, particularly for Fish carriers and Tankers, indicating that maintenance status may have a differentiated impact on profitability depending on the ship type.\nInterestingly, ships with diesel and steam turbine engines in a Critical maintenance state tend to show consistently higher average profit across various ship types. In contrast, ships using HFO engines lag behind in terms of profitability. This pattern warrants further investigation to determine whether ships in critical maintenance states experience frequent voyages that limit maintenance time, potentially affecting performance. Additional data could help assess the relationship between ship maintenance status and profitability, especially for vessels using HFO engines.\n\n\n\n\n\n\n\n\n5.2.2 Performance Metrics\nTo analyse the performance metrics of ship types, I created scatter plots using geom_point() and geom_smooth() to visualize the data points and trend lines. In the combined plot below, the left panel shows the overall trend line, with points representing individual ship types, each color-coded accordingly. Hovering over a point reveals a tooltip with detailed information about that specific data point. On the right panel, separate trend lines for each ship type are plotted to highlight the differences in performance across ship types.\n\nEnergy EfficiencyEngine PowerAverage loadTurnaround timeCargo Weight\n\n\n\n\nShow the code\nlibrary(plotly)\np_pt_ee &lt;- ggplot(data=ship_filter,\n             aes(x = Efficiency_nm_per_kWh,\n                 y = Profit)) +\n  geom_point(size = 0.4,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(.1,1.5),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Energy Efficiency with Overall Trend Line\",\n       x = \"Efficiency_nm_per_kWh\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA,),\n        axis.title.x = element_text(size = 12),\n        axis.title.y = element_text(size = 12))  +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_ee_st &lt;- ggplot(data=ship_filter,\n             aes(x = Efficiency_nm_per_kWh,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey80\",\n             size = 0.4) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(.1,1.5),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Energy Efficiency with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\np1_plotly &lt;- ggplotly(p_pt_ee)\np2_plotly &lt;- ggplotly(p_pt_ee_st)\n\ncombined_plot &lt;- subplot(p1_plotly,  p2_plotly, nrows = 1)\n\np_plotly_ee &lt;- combined_plot %&gt;%\n  layout(\n    title = \"Energy Efficiency with Overall Trend Line\",\n    xaxis = list(title = \"Efficiency_nm_per_kWh\",\n                 titlefont = list(size = 12), tickfont = list(size = 12)),\n    yaxis = list(title = \"Profit (1KUSD)\",\n                 titlefont = list(size = 12), tickfont = list(size = 12))\n  )\np_plotly_ee\n\n\n\n\n\n\n\n\n\n\nShow the code\np_pt_ep &lt;- ggplot(data=ship_filter,\n             aes(x = Engine_Power_kW,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(500,3000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Overall Trend Line\",\n       x = \"Engine_Power_kW\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_ep_st &lt;- ggplot(data=ship_filter,\n             aes(x = Engine_Power_kW,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(size = 0.6,\n             colour = \"grey80\") +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(500,3000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np3_plotly &lt;- ggplotly(p_pt_ep)\np4_plotly &lt;- ggplotly(p_pt_ep_st)\n\n\ncombined_plot &lt;- subplot(p3_plotly,  p4_plotly, nrows = 1)\n\np_plotly_ep &lt;- combined_plot %&gt;%\n  layout(\n    title = \"Engine Power with Overall Trend Line\",\n    xaxis = list(title = \"Engine_Power_kW\",\n                 titlefont = list(size = 12), tickfont = list(size = 12)),\n    yaxis = list(title = \"Profit (1KUSD)\",\n                 titlefont = list(size = 12), tickfont = list(size = 12))\n  )\np_plotly_ep\n\n\n\n\n\n\n\n\n\n\nShow the code\np_pt_al &lt;- ggplot(data=ship_filter,\n             aes(x = Average_Load_Percentage,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(40,100),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Average Load vs Profit\",\n       x = \"Average_Load_Percentage\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_al_st &lt;- ggplot(data=ship_filter,\n             aes(x = Average_Load_Percentage,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(40,100),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Average Load vs Profit by All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np5_plotly &lt;- ggplotly(p_pt_al)\np6_plotly &lt;- ggplotly(p_pt_al_st)\n\ncombined_plot &lt;- subplot(p5_plotly,  p6_plotly, nrows = 1)\n\np_plotly_al &lt;- combined_plot %&gt;%\n  layout(\n    title = \"Average Load with Overall Trend Line\",\n    xaxis = list(title = \"Average_Load_Percentage\",\n                 titlefont = list(size = 12), tickfont = list(size = 12)),\n    yaxis = list(title = \"Profit (1KUSD)\",\n                 titlefont = list(size = 12), tickfont = list(size = 12))\n  )\np_plotly_al\n\n\n\n\n\n\n\n\n\n\nShow the code\np_pt_turntime &lt;- ggplot(data=ship_filter,\n             aes(x = Turnaround_Time_hours,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,80),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Overall Trend Line\",\n       x = \"Turnaround_Time_hours\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_turntime_st &lt;- ggplot(data=ship_filter,\n             aes(x = Turnaround_Time_hours,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey80\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(0, 80),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\np7_plotly &lt;- ggplotly(p_pt_turntime)\np8_plotly &lt;- ggplotly(p_pt_turntime_st)\n\ncombined_plot &lt;- subplot(p7_plotly,  p8_plotly, nrows = 1)\n\np_plotly_tt &lt;- combined_plot %&gt;%\n  layout(\n    title = \"Turnaround Time with Overall Trend Line\",\n    xaxis = list(title = \"Turnaround_Time_hours\",\n                 titlefont = list(size = 12), tickfont = list(size = 12)),\n    yaxis = list(title = \"Profit (1KUSD)\",\n                 titlefont = list(size = 12), tickfont = list(size = 12))\n  )\np_plotly_tt\n\n\n\n\n\n\n\n\n\n\nShow the code\np_pt_cargowt &lt;- ggplot(data=ship_filter,\n             aes(x = Cargo_Weight_tons,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(50,2000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Cargo Weight with Overall Trend Line\",\n       x = \"Cargo_Weight_tons\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_cargowt_st &lt;- ggplot(data=ship_filter,\n             aes(x = Cargo_Weight_tons,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey80\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(50, 2000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np9_plotly &lt;- ggplotly(p_pt_cargowt)\np10_plotly &lt;- ggplotly(p_pt_cargowt_st)\n\ncombined_plot &lt;- subplot(p9_plotly,  p10_plotly, nrows = 1)\n\np_plotly_cw &lt;- combined_plot %&gt;%\n  layout(\n    title = \"Turnaround Time with Overall Trend Line\",\n    xaxis = list(title = \"Cargo_Weight_tons\",\n                 titlefont = list(size = 12), tickfont = list(size = 12)),\n    yaxis = list(title = \"Profit (1KUSD)\",\n                 titlefont = list(size = 12), tickfont = list(size = 12))\n  )\np_plotly_cw\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nOverall trends in performance metrics Across the various performance metrics, both Average Load Percentage and Cargo Weight exhibit a slight upward trend, suggesting that higher load and cargo may be linked to improved profit performance. In contrast, Turnaround Time shows a mild downward slope, indicating that quicker turnarounds could positively impact profitability, aligning with industry expectations.\nEnergy efficiency and profitability for Tanker For Tanker, there is a clear positive correlation between energy efficiency and profit, suggesting that better fuel or energy management directly contributes to enhanced financial performance.\nAverage load percentage trends across ship types All ship types exhibit an overall upward trend in Average Load Percentage, but Container Ships demonstrate the most pronounced increase. This suggests that maximising load capacity might be a key driver for profit improvement, particularly for container vessels.\nTurnaround time impact on profitability Container Ships and Tankers show the most noticeable negative correlation between Turnaround Time and Profit, implying that longer wait times between voyages detract from profitability. Reducing turnaround time for these ship types could lead to more efficient operations and better financial outcomes.\nCargo weight and profit correlation Across all ship types, there is a slight but consistent positive correlation between Cargo Weight and Profit. While the relationship isn’t as strong, it suggests that heavier loads generally contribute to higher profits, emphasising the importance of maximising cargo capacity.\n\n\n\n\n\n5.2.3 Comparing Profit and Voyage frequency by ship type\ntreemap() is used to visually compare multiple categorical and numerical aspects of voyage performance. In this plot, total profit is represented by colour intensity, while voyage frequency determines the size of each rectangle. Larger rectangles indicate a higher number of trips, while darker colours represent greater profitability. The hierarchical structure follows a descending order, first grouping by ship type, then engine type, and finally route type. This organisation allows for a layered comparison, making it easier to observe patterns and relationships across these categories.\n\n\nShow the code\nlibrary(dplyr)\nship_treemap &lt;- ship_filter %&gt;%\n  group_by(Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition, Route_Type) %&gt;%  \n  summarise(\n    Total_Profit = sum(Profit, na.rm = TRUE),  \n    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Total_Cargo = sum(Cargo_Weight_tons, na.rm = TRUE),\n    Voyage_Count = n()\n  ) %&gt;%\n  ungroup()  \n\ntreemap(ship_treemap,\n        index=c(\"Ship_Type\", \"Engine_Type\", \"Route_Type\"),\n        vSize=\"Voyage_Count\",\n        vColor=\"Total_Profit\",\n        type = \"value\",\n        palette=\"RdYlBu\",\n        algorithm = \"pivotSize\", \n        sortID = \"Total_Profit\",\n        title=\"Profit by Cargo Weight\",\n        title.legend = \"Profit ($1K USD)\",\n        border.col = c(\"black\", \"red\", \"white\"),\n        border.lwds = c(5, 2, 0.8)\n        )\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nContainer ships powered by steam turbine engines on long-haul routes lead the industry in profitability, outperforming all other combinations of ship type, engine type, and route. Following closely behind are bulk carriers with diesel engines, also operating on long-haul routes.\nIn general, coastal and short-haul routes yield lower profits across all ship types. However, there are two notable exceptions—tankers with steam turbine engines and container ships with diesel engines, both of which achieve relatively strong profitability on coastal routes.\nWhile not universal, a clear trend emerges: most short-haul routes tend to generate lower profits, reinforcing the idea that longer voyages often offer greater financial returns.\n\n\n\n\n\n\n5.3 Performance over time\n\n5.3.1 Financial performance overview\nTo provide an overview of financial performance over time, a line chart visualises the trends in profit, revenue, and cost. The top five months with the highest profit are highlighted with red points, along with their respective profit amounts.\n\n\nShow the code\n# Extract month and year from the Date\nship_filter_month &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by month and calculate total profit, cost, and revenue\nmonthly_totals &lt;- ship_filter_month %&gt;%\n  group_by(Month) %&gt;%\n  summarise(\n    Profit = sum(Profit, na.rm = TRUE),\n    Op_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE)\n  )\n\n# Sort the data by Total_Profit in descending order and select the top 5 months\ntop_5_months &lt;- monthly_totals %&gt;%\n  arrange(desc(Profit)) %&gt;%\n  slice_head(n = 5) %&gt;%\n  mutate(\n    #Month_label = format(Month, \"%m/%y\"),  # Format date as mm/yy\n         Profit_label = paste0(\"$\", round(Profit, 2)))  # Create the label\n\n# Reshape the data from wide to long format\nmonthly_long &lt;- monthly_totals %&gt;%\n  pivot_longer(cols = c(Profit, Op_Cost, Revenue),\n               names_to = \"Type\",\n               values_to = \"Value\")\n\n# Plot total profit, total cost, and total revenue over time\nggplot(monthly_long, aes(x = Month, y = Value, color = Type, group = Type)) +\n  \n  geom_line(size = 0.6) +  # Line plot for each variable\n  geom_point(data = top_5_months, \n             aes(x = Month, y = Profit), \n             color = \"red\", size = 3.5, shape = 21, fill = \"red\",\n             inherit.aes = FALSE) + # Prevent from inheriting \"Type\"\n  geom_text(data = top_5_months, \n            aes(x = Month, y = Profit, label = Profit_label),\n            color = \"black\", size = 3.5, vjust = -2, hjust = 0.5,\n            inherit.aes = FALSE) +\n  labs(title = \"Profit, Cost, and Revenue Over Time\",\n       x = \"Month\",\n       y = \"Amount (1K USD)\",\n       color = \"Type\") +\n    \n  theme_light() +\n  scale_color_manual(values = c(\"Profit\" = \"#f2cbd0\", \"Op_Cost\" = \"grey70\", \n                                \"Revenue\" = \"#86b3ba\"),\n                     guide = \"none\") +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  geomtextpath::geom_textline(\n    aes(label = Type),\n    linewidth = 1,\n    fontface = \"bold\",\n    size = 3,\n    vjust = -.4,\n    hjust = .5) \n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe top five months for profit are June, July, and October 2023, as well as March and June 2024.\nTotal profit fluctuates over time, but June 2024 outperformed June 2023 by 16.23%. This indicates an upward trend.\nProfit, revenue, and cost follow similar patterns, with profit and revenue showing the closest resemblance.\n\n\n\n\n\n5.3.2 Comparing Profit, Revenue, and Cost Across Ship Types\nTo compare financial performance across different ship types, I further break down the analysis by plotting profit, cost, and revenue trends for each ship type. This allows for a closer look at whether different ship types follow similar patterns over time. The top three highest amounts for each ship type are highlighted with circular points.\n\n\nShow the code\n###--------------- Plot profit\n# Aggregate total monthly profit for each ship type\nmonthly_profit &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%\n  group_by(Month, Ship_Type) %&gt;%\n  summarise(Total_profit = sum(Profit, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months &lt;- monthly_profit %&gt;%\n  group_by(Ship_Type) %&gt;%\n  slice_max(order_by = Total_profit, n = 3)\n\n# Define colors\nship_type_colors &lt;- c(\"#f2cbd0\", \"grey80\", \"grey40\", \"#9bc5cc\")\n\n# Plot profit over time for each ship type\np_line_pf &lt;- ggplot(monthly_profit, \n      aes(x = Month, \n          y = Total_profit, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8) + \n  geom_point(data = top_3_months, \n             aes(x = Month,\n                 y = Total_profit,\n                 inherit.aes = FALSE),\n             size = 3, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly Profit Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Profit (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        legend.title = element_blank(),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\")\n\n###--------------- Plot cost \n# Aggregate total monthly cost for each ship type\nmonthly_cost &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%\n  group_by(Month, Ship_Type) %&gt;%\n  summarise(Total_cost = sum(Operational_Cost_USD, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months_cost &lt;- monthly_cost %&gt;%\n  group_by(Ship_Type) %&gt;%\n  slice_max(order_by = Total_cost, n = 3)\n\n# Define colors\nship_type_colors &lt;- c(\"#f2cbd0\", \"grey80\", \"grey40\", \"#9bc5cc\")\n\n# Plot cost over time for each ship type\np_line_cost &lt;- ggplot(monthly_cost, \n      aes(x = Month, \n          y = Total_cost, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8, linetype = \"twodash\") + \n  geom_point(data = top_3_months_cost, \n             aes(x = Month,\n                 y = Total_cost,\n                 inherit.aes = FALSE),\n             size = 3, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months_cost$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly Cost Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Cost (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n#        legend.background = element_rect(fill = \"#fcf0cc\", color = \"#fcf0cc\"),\n        legend.title = element_blank(),\n#       plot.background = element_rect(fill = \"#fcf0cc\"),\n#        panel.background = element_rect(fill = \"#fcf0cc\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\")\n\n###--------------- Plot revenue \n# Aggregate total monthly revenue for each ship type\nmonthly_rvn &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%\n  group_by(Month, Ship_Type) %&gt;%\n  summarise(Total_rvn = sum(Revenue_per_Voyage_USD, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months_rvn &lt;- monthly_rvn %&gt;%\n  group_by(Ship_Type) %&gt;%\n  slice_max(order_by = Total_rvn, n = 3)\n\n# Define colors\nship_type_colors &lt;- c(\"#e0bcc0\", \"grey80\", \"grey40\", \"#86b3ba\")\n\n# Plot revenue over time for each ship type\np_line_rvn &lt;- ggplot(monthly_rvn, \n      aes(x = Month, \n          y = Total_rvn, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8, linetype = \"dotted\") + \n  geom_point(data = top_3_months_rvn, \n             aes(x = Month,\n                 y = Total_rvn,\n                 inherit.aes = FALSE),\n             size = 3, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months_rvn$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly Revenue Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Revenue (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        legend.title = element_blank(),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\") \n\np_line_pf / p_line_cost / p_line_rvn \n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe four ship types exhibit distinct profit patterns over time. Bulk Carriers, Container Ships, and Tankers all recorded their highest profit in March 2024, while Fish Carriers peaked in June 2024.\nBulk Carriers and Fish Carriers had contrasting profit trends in August 2023 and January 2024. Each ship type hit its lowest profit in one of these months, while the other achieved one of its highest profits.\nFish Carriers experienced the most volatile costs over time, which may be linked to voyage frequency, as referenced in section 4.4.2.\n\n\n\n\n\n5.3.3 Monthly Profit, Revenue, and Cost Trends by Ship Type\nThe top 5 total profit by ship types are highlighted\n\n\nShow the code\nlibrary(dplyr)\n# Extract month and year from the Date\nship_filter_month &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by month and calculate total profit, cost, and revenue\nmonthly_mean_wc &lt;- ship_filter_month %&gt;%\n  group_by(Month, Weather_Condition) %&gt;%\n  summarise(\n    Profit = mean(Profit, na.rm = TRUE),\n    Op_Cost = mean(Operational_Cost_USD, na.rm = TRUE),\n    Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),\n    .groups = \"drop\"\n  ) \n\n# Sort the data by Total_Profit in descending order and select the top 5 months\ntop_5_months_wc &lt;- monthly_mean_wc %&gt;%\n  arrange(desc(Profit)) %&gt;%\n  slice_head(n = 5) %&gt;%\n  mutate(\n    #Month_label = format(Month, \"%m/%y\"),  # Format date as mm/yy\n         Profit_label = paste0(\"$\", round(Profit, 2)))  # Create the label\n\n# Reshape the data from wide to long format\nmonthly_long_wc &lt;- monthly_mean_wc %&gt;%\n  pivot_longer(cols = c(Profit, Op_Cost, Revenue),\n               names_to = \"Type\",\n               values_to = \"Value\")\n\n# Plot total profit, total cost, and total revenue over time\nggplot(monthly_long_wc, aes(x = Month, y = Value, color = Type, group = interaction(Weather_Condition, Type))) +\n  geom_line(size = 0.3) +  # Line plot for each variable\n  geom_point(data = top_5_months_wc, \n             aes(x = Month, y = Profit), \n             color = \"purple\", size = 3, shape = 21, fill = \"purple\",\n             inherit.aes = FALSE) + # Prevent from inheriting \"Type\"\n  geom_text(data = top_5_months_wc, \n            aes(x = Month, y = Profit, label = Profit_label),\n            color = \"black\", size = 3.5, vjust = -2, hjust = 0.5,\n            inherit.aes = FALSE) +\n  labs(title = \"Profit, Cost, and Revenue Over Time by Weather\",\n       x = \"Month\",\n       y = \"Amount (1K USD)\",\n       color = \"Type\") +\n  coord_cartesian(ylim = c(100, 610)) +\n    \n  theme_light() +\n  scale_color_manual(values = c(\"Profit\" = \"#f2cbd0\", \"Op_Cost\" = \"grey70\", \n                                \"Revenue\" = \"#9bc5cc\"),\n                     guide = \"none\") +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\"\n        ) +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geomtextpath::geom_textline(\n    aes(label = Type),\n    linewidth = 1,\n    fontface = \"bold\",\n    size = 2,\n    vjust = -.4,\n    hjust = .5) +\n  facet_wrap(~ Weather_Condition, scales = \"free_y\") #facet by ship type\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe relationship between weather conditions and voyage profitability reveals intriguing patterns. In March 2024, voyages under calm weather saw a significant surge in profit, while moderate weather conditions in May also recorded strong performance. Interestingly, rough weather conditions experienced three distinct profit peaks throughout the year, suggesting that challenging conditions do not always equate to lower profitability.\nOn the cost side, monthly operational expenses remained relatively stable across all weather conditions. Notably, costs under moderate weather showed a gradual decline, possibly indicating improved efficiency or adjustments in operations.\nA strong correlation between revenue and profit is evident, with profit peaking at different times of the year regardless of weather conditions. However, one trend remains consistent—whenever revenue rises, profit follows suit, reinforcing the impact of demand and pricing on overall voyage performance.",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#multi-facets-comparison",
    "href": "Take-home_Ex/Take-home_Ex01.html#multi-facets-comparison",
    "title": "Take-home Exercise 1",
    "section": "6 Multi Facets Comparison",
    "text": "6 Multi Facets Comparison\nCompare profit using facets.\nUse facet for ship types vs weather for profit & efficiency, color in engine type.(see ggtheme)\n\n6.1 Comparing profit performance with ship conditions by ship type\n- engine type\n- maintenance\n\n\n6.2 Comparing profit performance with external factors by ship type\n- route type\n- weather\nhistogram",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex01.html#summary",
    "title": "Take-home Exercise 1",
    "section": "6 Summary",
    "text": "6 Summary\nThis study was conducted to understand the financial performance among different ship types using a collection of internal and external variables, as well as to undertand the profit and ship performance may be affected by other factors, such as weather conditions, energy efficiency, engine type, route type, cargo weight, etc. A variety of plots were used to explore the patterns and trends in a close look to the details to derive insights. The key findings are as follows:\n\nProfitability consistency across ship types\nStatistical analysis (Welch’s ANOVA, p-value = 0.84) indicates no significant difference in profit performance across ship types, suggesting that profitability is influenced by factors beyond vessel classification.\nEngine type and maintenance status affect profitability\nShips with diesel and steam turbine engines in a critical maintenance state tend to show higher average profits, while those using HFO engines lag behind. This suggests that frequent voyages with limited maintenance time may boost short-term profitability. Fish carriers and tankers also show varying profit patterns based on maintenance status, indicating a differentiated impact.\nWeather conditions and profitability patterns\nRough weather conditions do not always result in lower profitability. Certain ship and engine combinations show bimodal profit distributions under specific weather conditions. For example, container ships with HFO engines show a bimodal pattern in rough weather, while fish carriers with diesel or steam turbines exhibit a similar trend in calm weather.\nRoute type and profitability variation\nLong-haul routes typically yield higher profits than coastal and short-haul routes. However, tankers with steam turbine engines and container ships with diesel engines perform relatively well on coastal routes. Conversely, container ships with HFO engines show lower average profits on long-haul trips, while tankers with HFO engines exhibit a right-skewed profit distribution on coastal routes.\nOperational metrics influence financial performance\n\nLoad Capacity: Higher load percentages and cargo weights correlate with improved profits across ship types, with container ships showing the sharpest increase in load percentage over time. Turnaround Time: Longer turnaround times negatively impact profitability, particularly for container ships and tankers.\nEnergy Efficiency: Tankers show a positive correlation between energy efficiency and profitability, emphasizing the importance of fuel management.\n\nShip type-specific performance trends\n\nBulk Carriers: Exhibit longer turnaround times across all routes and lower cargo weight concentration on transoceanic trips.\nFish Carriers: Show volatile cost patterns, frequent bimodal distance distributions on long-haul routes, and longer turnaround times on short-haul voyages.\nContainer Ships: Demonstrate the highest energy efficiency in calm weather and the high average cargo weight on coastal and transoceanic routes.\nTankers: Maintain steadier voyage frequencies and show positive profitability correlations with energy efficiency.\n\nTime-based PProfit trends and market growth\nThe top five months for profit were June, July, and October 2023, as well as March and June 2024. Profit, revenue, and costs followed similar patterns, with June 2024 outperforming June 2023 by 16.23%, indicating an overall upward trend in profitability.\nweather and cost stability\nOperational costs remained stable across weather conditions, with moderate weather costs gradually declining. This reflected operational efficiency improvements. Despite slight fewer voyages in rough weather (~30% of total), profit peaks were observed in three distinct periods.\nMultimodal distributions in operational factors\nVarious performance metrics exhibit multimodal distributions rather than following a normal pattern, particularly in distance traveled on long-haul routes and engine power across ship types. These variations indicate that operational strategies differ significantly depending on ship type and route.\n\nFuture work & suggestions\n\nWork with data of longer duration: The dataset provided data for a year’s time frame, which may not be enough to conclude seasonal trends. More data with a longer time series will help navigate this.\nMore variables for exploration: Existing variables helped abstract some insights. More data and information needed to understand the trending behaviours, such as manufacture date, series number of ship, stops, restrictions of ship load, capacity, goods, size, logistics, pricing etc.\nPerform other analysis analysis: Using statistical analysis, geospatial analysis, exploratory, predictive modeling methods to perform analytics to derive more insights.",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#references",
    "href": "Take-home_Ex/Take-home_Ex01.html#references",
    "title": "Take-home Exercise 1",
    "section": "7 References",
    "text": "7 References\nKam, T. S. (2025). R for visual analytics. Retrieved from https://r4va.netlify.app/\nScherer, C. (2025). Exciting data visualizations with ggplot2 extensions. Retrieved from https://z3tt.github.io/exciting-extensions/slides.html#/course-materials",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#dashboard-2-sync-dashboards",
    "href": "In-class_Ex/In-class_Ex03.html#dashboard-2-sync-dashboards",
    "title": "In-class_Ex03",
    "section": "Dashboard 2: Sync dashboards",
    "text": "Dashboard 2: Sync dashboards\nClick on one state in the dotplot, the corresponding state Sales and Profit will be highlighted in the barcharts.",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex3"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#dashboard-3-interactive-visualisation-by-month-and-year",
    "href": "In-class_Ex/In-class_Ex03.html#dashboard-3-interactive-visualisation-by-month-and-year",
    "title": "In-class_Ex03",
    "section": "Dashboard 3: Interactive Visualisation by Month and Year",
    "text": "Dashboard 3: Interactive Visualisation by Month and Year\nLeverage the filters on the right to observe the history using animation. Click on one dot (state), and play the animation button on the right.",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex3"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html#dashboard-4-story",
    "href": "In-class_Ex/In-class_Ex03.html#dashboard-4-story",
    "title": "In-class_Ex03",
    "section": "Dashboard 4: Story",
    "text": "Dashboard 4: Story\nUse a Story board to compile a worksheet and/or a dashboard to observe a roadmap.",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex3"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01.html",
    "title": "In-class_Ex01",
    "section": "",
    "text": "View my Tableau profile",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#references",
    "title": "Hands-on_Ex05-4",
    "section": "",
    "text": "R for Visual Analytics\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-4"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "A Treemap displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. Using color schemes and or interactivity, it is possible to represent several dimensions: groups, subgroups etc.\nWe will learn using selected functions provided in dplyr package, how to plot static treemap by using treemap package and design interactive treemap by using d3treeR package.\n\n\n\nCheck if treemap and tidyverse pacakges have been installed in R.\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\n\n\nImport datasetData wrangling\n\n\nread_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format. The output tibble data.frame is called realis2018.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. We will do the following the prepare a data frame for treemap visualisation.\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\ngroup_by() and summarize() will be used to perform these steps.\nGrouped summaries without the Pipe\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\nAggregation functions such as sum() and median() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\nGrouped summaries with the pipe %&gt;%\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%.\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\nGrouping affects the verbs as follows\n\n\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nResource: - dplyr - Pipes %&gt;%\n\n\n\n\n\ntreemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n\ntreemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nUse three core arguments of treemap(), namely: index, vSize and vColor to design a basic treemap.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning\n\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\nThe column must not contain negative values, because its values will be used to map the sizes of the rectangles of the treemaps.\n\nWarning\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determine the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\n\n\nIn the code below, type argument is defined as “value”.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5,000, 5,000-10,000, etc. with an equal interval of 5,000.\n\n\n\n\n\n\nThere are two arguments that determine the mapping to color palettes: mapping and palette.\nThe only difference between “value” and “manual” is the default value for mapping.\nThe “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that: - 0 corresponds to the middle color (typically white or yellow) - -max(abs(values)) to the left-end color - max(abs(values)) to the right-end color.\nThe “manual” treemap simply maps - min(values) to the left-end color - max(values) to the right-end color - mean(range(values)) to the middle color.\n\n“value” type“manual” type\n\n\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nAlthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)).\nIt is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative ::: goals-container\nTo overcome this, a single color palette should be used, such as Blues.\n\n\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreemap() supports two popular treemap layouts, namely: squarified and pivotSize. The default is pivotSize.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\nalgorithm argumentsortID\n\n\nThe code below plots a squarified treemap by changing the algorithm argument.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntreemapify is a R package specially developed to draw treemaps in ggplot2. We will learn how to design treemps closely resembling treemaps from previous section by using treemapify.\nResources: - Introduction to “treemapify” - user guide.\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\") +\n  theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n      legend.background = element_rect(fill=\"#f1f4f5\"),\n      panel.background = element_rect(fill=\"#f1f4f5\"))   \n\n\n\n\n\n\n\n\n\n\n\n\n\nGrouped by Planning Region.Grouped by Planning AreaAdd boundary line\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap() +\n  theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n      legend.background = element_rect(fill=\"#f1f4f5\"),\n      panel.background = element_rect(fill=\"#f1f4f5\")) \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) +  #added as subgroup2\n  geom_treemap()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"pink\", #add lines\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"#BB993E\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 1. Install devtool package\ninstall.packages(\"devtools\")\nStep 2. Load devtool library and install the package found in GitHub.\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\nforce = TRUE\n\nStep 3. Launch d3treeR package\n\nlibrary(d3treeR)\n\n\n\n\n\n\nStep 1. treemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\nShow the code\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\nd3tree(tm,rootname = \"Singapore\")\n\n\n\n\n\n\n\n\n\n\n\nR for Visual Analytics",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#overview",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "A Treemap displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. Using color schemes and or interactivity, it is possible to represent several dimensions: groups, subgroups etc.\nWe will learn using selected functions provided in dplyr package, how to plot static treemap by using treemap package and design interactive treemap by using d3treeR package.",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "Check if treemap and tidyverse pacakges have been installed in R.\n\npacman::p_load(treemap, treemapify, tidyverse)",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#data-preparation",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "Import datasetData wrangling\n\n\nread_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format. The output tibble data.frame is called realis2018.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. We will do the following the prepare a data frame for treemap visualisation.\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\ngroup_by() and summarize() will be used to perform these steps.\nGrouped summaries without the Pipe\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\nAggregation functions such as sum() and median() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\nGrouped summaries with the pipe %&gt;%\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%.\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\nGrouping affects the verbs as follows\n\n\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nResource: - dplyr - Pipes %&gt;%",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#design-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#design-treemap-with-treemap-package",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n\ntreemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nUse three core arguments of treemap(), namely: index, vSize and vColor to design a basic treemap.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning\n\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\nThe column must not contain negative values, because its values will be used to map the sizes of the rectangles of the treemaps.\n\nWarning\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determine the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\n\n\nIn the code below, type argument is defined as “value”.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5,000, 5,000-10,000, etc. with an equal interval of 5,000.\n\n\n\n\n\n\nThere are two arguments that determine the mapping to color palettes: mapping and palette.\nThe only difference between “value” and “manual” is the default value for mapping.\nThe “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that: - 0 corresponds to the middle color (typically white or yellow) - -max(abs(values)) to the left-end color - max(abs(values)) to the right-end color.\nThe “manual” treemap simply maps - min(values) to the left-end color - max(values) to the right-end color - mean(range(values)) to the middle color.\n\n“value” type“manual” type\n\n\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\n\nAlthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nLearning from the code\n\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)).\nIt is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative ::: goals-container\nTo overcome this, a single color palette should be used, such as Blues.\n\n\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#treemap-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#treemap-layout",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "reemap() supports two popular treemap layouts, namely: squarified and pivotSize. The default is pivotSize.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\nalgorithm argumentsortID\n\n\nThe code below plots a squarified treemap by changing the algorithm argument.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\nShow the code\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#design-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#design-treemap-using-treemapify-package",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "treemapify is a R package specially developed to draw treemaps in ggplot2. We will learn how to design treemps closely resembling treemaps from previous section by using treemapify.\nResources: - Introduction to “treemapify” - user guide.\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\") +\n  theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n      legend.background = element_rect(fill=\"#f1f4f5\"),\n      panel.background = element_rect(fill=\"#f1f4f5\"))   \n\n\n\n\n\n\n\n\n\n\n\n\n\nGrouped by Planning Region.Grouped by Planning AreaAdd boundary line\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap() +\n  theme(\n      plot.title = element_text(hjust=0, family = \"Bold\"),\n      plot.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n      legend.background = element_rect(fill=\"#f1f4f5\"),\n      panel.background = element_rect(fill=\"#f1f4f5\")) \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) +  #added as subgroup2\n  geom_treemap()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"pink\", #add lines\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"#BB993E\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#design-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#design-interactive-treemap-using-d3treer",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "Step 1. Install devtool package\ninstall.packages(\"devtools\")\nStep 2. Load devtool library and install the package found in GitHub.\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\nforce = TRUE\n\nStep 3. Launch d3treeR package\n\nlibrary(d3treeR)\n\n\n\n\n\n\nStep 1. treemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\nShow the code\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\nd3tree(tm,rootname = \"Singapore\")",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#reference",
    "title": "Hands-on_Ex05-5",
    "section": "",
    "text": "R for Visual Analytics",
    "crumbs": [
      "![](/images/house.svg)",
      "Hands-on Exercise",
      "Hands-on Exercise 5-5"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01.html#data-preparation",
    "title": "Take-home Exercise 1",
    "section": "3 Data Preparation",
    "text": "3 Data Preparation\nThe dataset Ship Performance Clustering Dataset is downloaded from Kagglel.com. This file contains a detailed dataset focusing on the operational performance of various ship types across different routes. Each row represents the performance metrics and attributes for a specific voyage or ship over a given timeframe.\n\n3.1 Import file and check\nImport the csv file using read_csv().\n\ndata_ship &lt;- read_csv(\"data/Ship_Pfm_Dataset.csv\")\n\nNext I would like to observe the variables and their data type and understand the dataset.\nThe dataset consists of 18 columns and 2,736 rows (observations). Each observation contains an entry recording a voyage for which the ship’s profile and operational information. As the result of code shows, there are 5 categorical variables, 1 date variable and 12 numerical variables.\n\nglimpse(data_ship)\n\nRows: 2,736\nColumns: 18\n$ Date                    &lt;date&gt; 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               &lt;chr&gt; \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              &lt;chr&gt; \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             &lt;chr&gt; \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      &lt;chr&gt; \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         &lt;dbl&gt; 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            &lt;dbl&gt; 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       &lt;chr&gt; \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       &lt;dbl&gt; 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    &lt;dbl&gt; 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   &lt;dbl&gt; 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   &lt;dbl&gt; 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     &lt;dbl&gt; 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage &lt;dbl&gt; 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n\n\n\n\n3.2 Data Wrangling\nThe diagram below shows the variables selected for this study:\n\n\n\n\n\n\n3.2.1 Add a variable\nTo assess the ships’ finance performance, I will add a variable Profit, deriving from Revenue_per_Voyage_USD subtracting Operational_Cost_USD.\nProfit = (Revenue_per_Voyage_USD - Operational_Cost_USD)\n\nlibrary(dplyr)\ndata_ship &lt;- data_ship %&gt;%\n  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)\n\nNow, I will use str() to have a look and confirm Profit is added to the data frame and the data type is numeric.\n\nstr(data_ship)\n\ntibble [2,736 × 19] (S3: tbl_df/tbl/data.frame)\n $ Date                   : Date[1:2736], format: \"2023-06-04\" \"2023-06-11\" ...\n $ Ship_Type              : chr [1:2736] \"Container Ship\" \"Fish Carrier\" \"Container Ship\" \"Bulk Carrier\" ...\n $ Route_Type             : chr [1:2736] \"None\" \"Short-haul\" \"Long-haul\" \"Transoceanic\" ...\n $ Engine_Type            : chr [1:2736] \"Heavy Fuel Oil (HFO)\" \"Steam Turbine\" \"Diesel\" \"Steam Turbine\" ...\n $ Maintenance_Status     : chr [1:2736] \"Critical\" \"Good\" \"Fair\" \"Fair\" ...\n $ Speed_Over_Ground_knots: num [1:2736] 12.6 10.4 20.7 21.1 13.7 ...\n $ Engine_Power_kW        : num [1:2736] 2063 1796 1649 915 1090 ...\n $ Distance_Traveled_nm   : num [1:2736] 1031 1060 659 1127 1445 ...\n $ Draft_meters           : num [1:2736] 14.13 14.65 7.2 11.79 9.73 ...\n $ Weather_Condition      : chr [1:2736] \"Moderate\" \"Rough\" \"Moderate\" \"Moderate\" ...\n $ Cargo_Weight_tons      : num [1:2736] 1959 162 178 1737 261 ...\n $ Operational_Cost_USD   : num [1:2736] 483832 483388 448543 261350 287718 ...\n $ Revenue_per_Voyage_USD : num [1:2736] 292183 883766 394019 87551 676121 ...\n $ Turnaround_Time_hours  : num [1:2736] 25.9 63.2 49.4 22.4 64.2 ...\n $ Efficiency_nm_per_kWh  : num [1:2736] 1.455 0.29 0.5 0.703 1.331 ...\n $ Seasonal_Impact_Score  : num [1:2736] 1.416 0.886 1.406 1.371 0.583 ...\n $ Weekly_Voyage_Count    : num [1:2736] 1 6 9 1 8 7 3 6 8 2 ...\n $ Average_Load_Percentage: num [1:2736] 93.8 93.9 96.2 66.2 80 ...\n $ Profit                 : num [1:2736] -191649 400378 -54525 -173798 388403 ...\n\n\nNext, let’s use summary() to run a summary of the dataset to understand the overall statistics of the data.\n\nsummary(data_ship)\n\n      Date             Ship_Type          Route_Type        Engine_Type       \n Min.   :2023-06-04   Length:2736        Length:2736        Length:2736       \n 1st Qu.:2023-09-10   Class :character   Class :character   Class :character  \n Median :2023-12-17   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-12-17                                                           \n 3rd Qu.:2024-03-24                                                           \n Max.   :2024-06-30                                                           \n Maintenance_Status Speed_Over_Ground_knots Engine_Power_kW\n Length:2736        Min.   :10.01           Min.   : 501   \n Class :character   1st Qu.:13.93           1st Qu.:1148   \n Mode  :character   Median :17.71           Median :1757   \n                    Mean   :17.60           Mean   :1758   \n                    3rd Qu.:21.28           3rd Qu.:2383   \n                    Max.   :25.00           Max.   :2999   \n Distance_Traveled_nm  Draft_meters    Weather_Condition  Cargo_Weight_tons\n Min.   :  50.43      Min.   : 5.002   Length:2736        Min.   :  50.23  \n 1st Qu.: 548.51      1st Qu.: 7.437   Class :character   1st Qu.: 553.98  \n Median :1037.82      Median : 9.919   Mode  :character   Median :1043.21  \n Mean   :1036.41      Mean   : 9.929                      Mean   :1032.57  \n 3rd Qu.:1540.93      3rd Qu.:12.413                      3rd Qu.:1527.72  \n Max.   :1998.34      Max.   :14.993                      Max.   :1999.13  \n Operational_Cost_USD Revenue_per_Voyage_USD Turnaround_Time_hours\n Min.   : 10092       Min.   : 50352         Min.   :12.02        \n 1st Qu.:131293       1st Qu.:290346         1st Qu.:26.17        \n Median :257158       Median :520177         Median :41.59        \n Mean   :255143       Mean   :521362         Mean   :41.75        \n 3rd Qu.:381797       3rd Qu.:750073         3rd Qu.:57.36        \n Max.   :499735       Max.   :999917         Max.   :71.97        \n Efficiency_nm_per_kWh Seasonal_Impact_Score Weekly_Voyage_Count\n Min.   :0.1002        Min.   :0.500         Min.   :1.000      \n 1st Qu.:0.4636        1st Qu.:0.758         1st Qu.:3.000      \n Median :0.7899        Median :1.009         Median :5.000      \n Mean   :0.7987        Mean   :1.004         Mean   :4.915      \n 3rd Qu.:1.1474        3rd Qu.:1.253         3rd Qu.:7.000      \n Max.   :1.4993        Max.   :1.499         Max.   :9.000      \n Average_Load_Percentage     Profit       \n Min.   : 50.01          Min.   :-444584  \n 1st Qu.: 62.70          1st Qu.:  40885  \n Median : 75.50          Median : 262716  \n Mean   : 75.22          Mean   : 266219  \n 3rd Qu.: 87.72          3rd Qu.: 492216  \n Max.   :100.00          Max.   : 977168  \n\n\n\n\n3.2.2 Variable selection\nTo perform an analysis to achieve the objectives aforementioned, the following variables will be selected.\n\nVariable Selection\n:\n\n\n\n\n\n\n\n\n\nCategory\nVariable\nDescription\nType\nValue\n\n\n\n\nOperation\nDate\nDate\ndate\nYYYY-MM-DD\n\n\nShip\nShip_Type\nType of ship\nchar\nTanker, Container Ship, Fish Carrier, Bulk Carrier\n\n\nOperations\nRoute_Type\nShipping route type\nchar\nShort-haul, Long-haul, Transoceanic\n\n\nShip\nEngine_Type\nType of engine\nchar\nDiesel, Heavy Fuel Oil\n\n\nShip\nMaintenance_Status\nMaintenance condition of the ship\nchar\nFair, Critical, Good\n\n\nShip\nSpeed_Over_Ground_knots\nAverage speed of the ship over water (in knots).\nnum\n\n\n\nShip\nEngine_Power_kW\nEngine power output (in kilowatts).\nnum\n\n\n\nShip\nDistance_Traveled_nm\nTotal distance traveled by the ship (in nautical miles).\nnum\n\n\n\nOperations\nWeather_Condition\nPrevailing weather conditions during voyages\nchar\nCalm, Moderate, Rough\n\n\nOperations\nCargo_Weight_tons\nbbb\nnum\n\n\n\nBusiness\nOperational_Cost_USD\nTotal operational cost per voyage (in thousand USD).\nnum\n\n\n\nBusiness\nRevenue_per_Voyage_USD\nRevenue generated per voyage (in thousand USD).\nnum\n\n\n\nShip\nTurnaround_Time_hours\nTurnaround time of the voyage\nnum\n\n\n\nShip\nEfficiency_nm_per_kWh\nEnergy efficiency calculated in nautical miles per kilowatt-hour.\nnum\n\n\n\nOperations\nAverage_Load_Percentage\nAverage of the load capacity (%)\nnum\n\n\n\nBusiness\nProfit\nEarning from a voyage (in thousand USD)\nnum\n\n\n\n\nThe code below is used to select and reorder columns of wanted variables using select()\n\nship &lt;- data_ship %&gt;%\n  \n  select(Date, Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Speed_Over_Ground_knots,\n        Engine_Power_kW, Distance_Traveled_nm, Efficiency_nm_per_kWh,\n        Weather_Condition, Profit, Operational_Cost_USD, Revenue_per_Voyage_USD,  \n        Average_Load_Percentage, Cargo_Weight_tons, Turnaround_Time_hours) \n\nUse glimese() to check and confirm the new data frame ship is created, and now has 16 columns.\n\nglimpse(ship)\n\nRows: 2,736\nColumns: 16\n$ Date                    &lt;date&gt; 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               &lt;chr&gt; \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              &lt;chr&gt; \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             &lt;chr&gt; \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      &lt;chr&gt; \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         &lt;dbl&gt; 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Weather_Condition       &lt;chr&gt; \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Profit                  &lt;dbl&gt; -191649.081, 400377.787, -54524.657, -173798.2…\n$ Operational_Cost_USD    &lt;dbl&gt; 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Average_Load_Percentage &lt;dbl&gt; 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n$ Cargo_Weight_tons       &lt;dbl&gt; 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Turnaround_Time_hours   &lt;dbl&gt; 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n\n\n\n\n3.2.3 Missing values\nBefore I use the selected data to perform analysis, I want to check if there are missing values to remove. If an entry has a missing value, it may affect the analysis result.\nis.na() can be used to check this. Before I dive into each variable, I would like to have an overall check if there indeed are missing values. After this check, there is no missing value found.\n\nwhich(is.na(ship))\n\ninteger(0)\n\nsum(is.na(ship))\n\n[1] 0\n\n\nWe see no missing values in numeric data. However, we observed some “None” values in the character data types: Ship_Type, Route_Type, Engine_Type, and Weather_Condition. Therefore, I will remove entries containing “None” using the code below. As a result, a tibble frame of 2,127 entries is derived.\n\nlibrary(dplyr)\n\n#check row numbers before filter\nnrow(ship)\n\n[1] 2736\n\nship_filter &lt;- ship %&gt;%\n  filter(!if_any(c(Ship_Type, Route_Type, Engine_Type, Weather_Condition, Maintenance_Status), ~ .x == \"None\"))\n\n#check row numbers after filter\nnrow(ship_filter) \n\n[1] 2127\n\n\n\n\n3.2.4 Convert data type\nFrom 3.2.2, I observed that Maintenance_Status, Weather_Condition, Ship_Type, Route_Type, Engine_Type are all character data type. In fact, Maintenance_Status, Weather_Condition can be converted to ordinal data type, and Ship_Type, Route_Type, Engine_Type to factor data type to derive better result.\nUse the code below to perform data type conversion:\n\ncol_f &lt;- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\", \"Weather_Condition\")\n#Column names should be in quotation marks (\" \")\n\nship_filter &lt;- ship_filter %&gt;%\n  mutate(across(col_f, as.factor)) %&gt;%\n  mutate(Maintenance_Status = factor(Maintenance_Status,\n                                     levels = c(\"Good\", \"Fair\", \"Critical\"),\n                                     ordered = TRUE)) \n\nI also want to convert the unit for the monetary values into thousand dollars as the unit for Operational_Cost_USD, Revenue_per_Voyage_USD and Profit.\n\nship_filter &lt;- ship_filter %&gt;%\n  mutate(Operational_Cost_USD = round(Operational_Cost_USD / 1000, 0), #convert to thousand dollars, leaving on decimal places.\n         Revenue_per_Voyage_USD = round(Revenue_per_Voyage_USD / 1000, 0),\n         Profit = round(Profit / 1000, 0))\n\nI use kable() to check the conversion result, and confirm the desired variables have been converted accordingly.\n\nkable(head(ship_filter, n=3), caption = \"Ship Performance Dataset\")\n\n\nShip Performance Dataset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\nShip_Type\nRoute_Type\nEngine_Type\nMaintenance_Status\nSpeed_Over_Ground_knots\nEngine_Power_kW\nDistance_Traveled_nm\nEfficiency_nm_per_kWh\nWeather_Condition\nProfit\nOperational_Cost_USD\nRevenue_per_Voyage_USD\nAverage_Load_Percentage\nCargo_Weight_tons\nTurnaround_Time_hours\n\n\n\n\n2023-06-11\nFish Carrier\nShort-haul\nSteam Turbine\nGood\n10.38758\n1796.0574\n1060.4864\n0.2903614\nRough\n400\n483\n884\n93.89537\n162.3947\n63.24820\n\n\n2023-06-18\nContainer Ship\nLong-haul\nDiesel\nFair\n20.74975\n1648.5567\n658.8741\n0.4995945\nModerate\n-55\n449\n394\n96.21824\n178.0409\n49.41815\n\n\n2023-06-25\nBulk Carrier\nTransoceanic\nSteam Turbine\nFair\n21.05510\n915.2618\n1126.8225\n0.7029057\nModerate\n-174\n261\n88\n66.19370\n1737.3853\n22.40911",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#multi-facets-comparison-by-ship-type",
    "href": "Take-home_Ex/Take-home_Ex01.html#multi-facets-comparison-by-ship-type",
    "title": "Take-home Exercise 1",
    "section": "6 Multi-Facets Comparison by Ship Type",
    "text": "6 Multi-Facets Comparison by Ship Type\n\nggplot(data=ship_filter,\n       aes(x = Operational_Cost_USD , y = Cargo_Weight_tons)) +\n  geom_point(size=0.8, colour=\"skyblue\") +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  facet_wrap(~ Ship_Type)\n\n\n\n\n\n\n\n\n\n6.3 Comparing profit with external factors\n\nweather\n\n\nroute type\n\n\nShow the code\nggplot(ship_filter, \n       aes(y = Profit, \n           x = Ship_Type,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width = c(0, 1), adjust = .5, slab_alpha = .5, \n                       shape = 21, point_size = 2) +\n  scale_fill_manual(values = c(\"#EFAC00\", \"#5FB0B0\", \"#E6A5B1\", \"grey\"), name = NULL) +\n  labs(title = \"Comparing Profit Performance Against Route Type\")\n\n\n\n\n\n\n\n\n\n\n\naverage load\nCompare profit using facets.\nUse facet for ship types vs weather for profit & efficiency, color in engine type.(see ggtheme)\nhistogram",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#voyage-pprofile",
    "href": "Take-home_Ex/Take-home_Ex01.html#voyage-pprofile",
    "title": "Take-home Exercise 1",
    "section": "4 Voyage Pprofile",
    "text": "4 Voyage Pprofile\n\n4.1 Ship conditions & routes\n\n\nShow the code\n# Code bar chart for Ship type\n\np_st &lt;- ggplot(data = ship_filter,\n               aes(x = Ship_Type)) +\n  geom_bar(fill = \"grey\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Ship types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n# Code bar chart for Engine type\n\np_et &lt;- ggplot(data = ship_filter,\n               aes(x = Engine_Type)) +\n  geom_bar(fill = \"grey\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Engine types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n\n# Code bar chart for Route type\n\np_rt &lt;- ggplot(data = ship_filter,\n               aes(x = Route_Type)) +\n  geom_bar(fill = \"grey\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Route types\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n#Code bar chart for Maintenance status\n\np_ms &lt;- ggplot(data = ship_filter,\n               aes(x = Maintenance_Status)) +\n  geom_bar(fill = \"grey80\") +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 6) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Maintenance status\") +\n  theme_classic() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 20, face = \"bold\"),\n        text = element_text(size = 20))\n\n#Combine all charts\n\npatchwork &lt;- (p_st | p_et) / (p_rt | p_ms)\npatchwork\n\n\n\n\n\n\n\n\n\n\n\n4.2 Weather conditions\n\n\nShow the code\n#Plot1\np_wthr_1 &lt;- ggplot(data = ship_filter,\n               aes(x = Weather_Condition, fill = Weather_Condition)) +\n  geom_bar() +\n  ylim(0, 1000) +\n  geom_text(stat=\"count\",\n            aes(label = paste0(after_stat(count),\", \",\n                               round(after_stat(count)/sum(after_stat(count))*100, 0), \"%\")),\n            vjust = -0.5,\n            size = 2) +\n  scale_fill_manual(values = c(\"Calm\" = \"#86A788\",\n                               \"Moderate\" = \"#FFFDEC\",\n                               \"Rough\" = \"#FFE2E2\")) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Weather Condition \\n Overview\") +\n  theme_light() +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        plot.title = element_text(size = 10, face = \"bold\"),\n        text = element_text(size = 8),\n#        legend.text = element_text(size = 6),  # Change legend text size\n#        legend.title = element_text(size = 6, face = \"bold\"),  # Change legend title size\n#        legend.key.size = unit(0.5, \"cm\"),  # Adjust legend key size (box size)\n#        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"none\")  # Adjust vertical spacing between legend items))\n\n# Plot2\n# Extract month and year from the Date\nship_filter_month &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by Month and Weather type, then count occurrences\nweather_by_month_bar &lt;- ship_filter_month %&gt;%\n  group_by(Month, Weather_Condition) %&gt;%\n  summarise(Count = n(), .groups = \"drop\")\n\n# Calculate total occurrences per month\ntotal_per_month_bar &lt;- weather_by_month_bar %&gt;%\n  group_by(Month) %&gt;%\n  summarise(Total = sum(Count))\n\n# Join total occurrences per month and compute percentage\nweather_percentage_bar &lt;- weather_by_month_bar %&gt;%\n  left_join(total_per_month_bar, by = \"Month\") %&gt;%\n  mutate(Percentage = (Count / Total) * 100)  # Convert to percentage\n\n# Plot stacked bar chart with percentage\np_wthr_2 &lt;- ggplot(weather_percentage_bar, \n       aes(x = Month, y = Percentage, fill = factor(Weather_Condition, levels = c(\"Calm\", \"Moderate\", \"Rough\")))) +\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Use identity because we computed percentages\n  geom_text(aes(label = paste0(round(Percentage, 0), \"%\")), \n            position = position_stack(vjust = 0.5),  # Center the text in each segment\n            size = 2.5, color = \"black\") +  # Adjust text size and color\n  scale_fill_manual(values = c(\"Calm\" = \"#86A788\",\n                               \"Moderate\" = \"#FFFDEC\",\n                               \"Rough\" = \"#FFE2E2\")) +  # Choose a colour palette\n  labs(title = \"Weather Distribution by Month (%)\",\n       x = \"Month\",\n       y = \"Percentage (%)\",\n       fill = \"Weather\") +\n  theme_light() +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") + \n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        text = element_text(size = 8),\n        legend.text = element_text(size = 6),  # Change legend text size\n        legend.title = element_text(size = 6, face = \"bold\"),  # Change legend title size\n        legend.key.size = unit(0.5, \"cm\"),  # Adjust legend key size (box size)\n        legend.spacing.y = unit(0.3, \"cm\"),\n        legend.position = \"top\")  # Adjust vertical spacing between legend items)))  #hide legend\n\n#Combine plots\np_wthr_2 + p_wthr_1 + plot_layout(widths = c(2.5,1))\n\n\n\n\n\n\n\n\n\n\n\n4.3 Operational effects\n\nAverage loadEngine powerCargo weightTurnaround timeDistance travelledEnergy efficiency\n\n\n\n\nShow the code\n#Plot1\np_heye_al &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Average_Load_Percentage,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6), \n                               name = NULL)) +\n  labs(title = \"Halfeye Plots by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Average_Load_Percentage)\n\np_heye_al_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Average_Load_Percentage)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"mako\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"purple\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"purple\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots with Median Line\")\n\n#Combine plots\np_heye_al_st / p_heye_al + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_ep &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Engine_Power_kW,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Engine Power by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Engine_Power_kW)\n\np_heye_ep_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Engine_Power_kW)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"cividis\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"blue\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"blue\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Engine Power with Median Line\")\n\n#Combine plots\np_heye_ep_st / p_heye_ep + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_cw &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Cargo_Weight_tons,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Cargo Weight by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Cargo_Weight_tons)\n\np_heye_cw_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Cargo_Weight_tons)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"plasma\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"red\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"red\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Cargo Weight with Median Line\")\n\n#Combine plots\np_heye_cw_st / p_heye_cw + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_tt &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Turnaround_Time_hours,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Turnaround Time by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Turnaround_Time_hours)\n\np_heye_tt_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Turnaround_Time_hours)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"rocket\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"green\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"green\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Turnaround Time with Median Line\")\n\n#Combine plots\np_heye_tt_st / p_heye_tt + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n#Plot1\np_heye_dt &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Distance_Traveled_nm,\n           fill = Route_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Coastal\" = adjustcolor(\"#A1E3F9\", alpha.f = 0.6),\n                               \"Long-haul\" = adjustcolor(\"#EFAC00\", alpha.f = 0.6), \n                               \"Short-haul\" = adjustcolor(\"#9C55E3\", alpha.f = 0.6),\n                               \"Transoceanic\" = adjustcolor(\"#FFA09B\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Distance by Route Type\")\n\n\n#Plot2\n\nmedian_load = median(ship_filter$Distance_Traveled_nm)\n\np_heye_dt_st &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Distance_Traveled_nm)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"inferno\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"grey20\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"grey20\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Distance with Median Line\")\n\n#Combine plots\np_heye_dt_st / p_heye_dt + plot_layout(height = c(1, 1.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Plot1\np_heye_ee_et &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Engine_Type)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Heavy Fuel Oil (HFO)\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.8),\n                               \"Steam Turbine\" = adjustcolor(\"#DA498D\", alpha.f = 0.6), \n                               \"Diesel\" = adjustcolor(\"#96CEB4\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Engine Type\")\n\n\n# Plot2\n\nmedian_load = median(ship_filter$Efficiency_nm_per_kWh)\n\np_heye_ee &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh)) +\n  ggdist::stat_interval(.width = 1:4*.25) +\n  ggdist::stat_halfeye(.width = 0, fill = \"grey80\", color = \"white\", position = position_nudge(x = .024)) +\n  scale_color_viridis_d(option = \"magma\", direction = -1, end = .9) +\n  geom_hline(yintercept = median_load, linetype = \"dashed\", color = \"brown\") +  # Add median line\n  annotate(\"text\", x = 1.2, y = median_load, label = paste(\"Median:\", round(median_load, 2)),\n            color = \"brown\", vjust = -1, hjust = 0, size = 3) +  # Add text label\n  labs(title = \"Halfeye Plots of Energy Efficiency with Median Line\")\n\n# Plot3\np_heye_ee_wc &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Weather_Condition)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 3) +\n  scale_fill_manual(values = c(\"Moderate\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.8),\n                               \"Rough\" = adjustcolor(\"#DA498D\", alpha.f = 0.6), \n                               \"Calm\" = adjustcolor(\"#5B99C2\", alpha.f = 0.8),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Weather\")\n\n# Plot4\np_heye_ee_ms &lt;- ggplot(ship_filter,\n       aes(x = Ship_Type,\n           y = Efficiency_nm_per_kWh,\n           fill = Maintenance_Status)) +\n  ggdist::stat_halfeye(.width=c(0,1), adjust = .5,\n                       shape = 21,\n                       point_size = 2) +\n  scale_fill_manual(values = c(\"Fair\" = adjustcolor(\"#F9DBBA\", alpha.f = 0.8),\n                               \"Critical\" = adjustcolor(\"#8B5DFF\", alpha.f = 0.6), \n                               \"Good\" = adjustcolor(\"#41B3A2\", alpha.f = 0.6),\n                               name = NULL)) +\n  labs(title = \"Halfeye Plots of Energy Efficiency by Maintenance\")\n\n\n# Combine plots\n(p_heye_ee | p_heye_ee_et) / (p_heye_ee_wc | p_heye_ee_ms)",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#vis-mod",
    "href": "Take-home_Ex/Take-home_Ex01.html#vis-mod",
    "title": "Take-home Exercise 1",
    "section": "9 Vis Mod",
    "text": "9 Vis Mod",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#energy-efficiency-1",
    "href": "Take-home_Ex/Take-home_Ex01.html#energy-efficiency-1",
    "title": "Take-home Exercise 1",
    "section": "Energy Efficiency",
    "text": "Energy Efficiency\n\n\nShow the code\np_pt_ee &lt;- ggplot(data=ship_filter,\n             aes(x = Efficiency_nm_per_kWh,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,1.5),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Overall Trend Line\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\")) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_ee_st &lt;- ggplot(data=ship_filter,\n             aes(x = Efficiency_nm_per_kWh,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey80\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(0, 1.5),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n          legend.text = element_text(size=10),\n          legend.position = \"right\") +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\np_pt_ee | p_pt_ee_st",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#engine-power-1",
    "href": "Take-home_Ex/Take-home_Ex01.html#engine-power-1",
    "title": "Take-home Exercise 1",
    "section": "Engine Power",
    "text": "Engine Power\n\n\nShow the code\np_pt_ep &lt;- ggplot(data=ship_filter,\n             aes(x = Engine_Power_kW,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(500,3000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Overall Trend Line\",\n       x = \"Engine_Power_kW\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_ep_st &lt;- ggplot(data=ship_filter,\n             aes(x = Engine_Power_kW,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(size = 0.6,\n             colour = \"grey80\") +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(500,3000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np3_plotly &lt;- ggplotly(p_pt_ep)\np4_plotly &lt;- ggplotly(p_pt_ep_st)\n\n\ncombined_plot &lt;- subplot(p3_plotly,  p4_plotly, nrows = 1)\ncombined_plot",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#maintenance-status-1",
    "href": "Take-home_Ex/Take-home_Ex01.html#maintenance-status-1",
    "title": "Take-home Exercise 1",
    "section": "Maintenance status",
    "text": "Maintenance status\n\n\nShow the code\n###------------1 Plot Bulk Carrier -----------###\n\n# Filter data for only \"Bulk Carrier\" ships\nbulkc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Bulk Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_bulkc &lt;- bulkc_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_bulkc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_bulkc\np_ridg_bulkc_ms &lt;- ggplot(bulkc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_bulkc, \n             aes(x = mean_profit_bulkc, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1) +\n  labs(x = \"Bulk Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\"),\n        plot.margin = margin(t = 10, r = 10, b = 30, l = 20)\n        ) \n\n\n###------------2 Plot Container Ship -----------###\n# Filter data for only \"Container Ship\" ships\ncship_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Container Ship\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_cship &lt;- cship_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_cship = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_cship\np_ridg_cship_ms &lt;- ggplot(cship_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_cship, \n             aes(x = mean_profit_cship, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") + \n  labs(x = \"Container Ship\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"top\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n\n###-----------3 Plot Fish Carrier -----------###\n# Filter data for only \"Fish Carrier\" ships\nfishc_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Fish Carrier\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_fishc &lt;- fishc_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_fishc = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_fishc\np_ridg_fishc_ms &lt;- ggplot(fishc_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_fishc, \n             aes(x = mean_profit_fishc, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Fish Carrier\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120),\n        panel.spacing = unit(1, \"lines\")\n        )\n\n###-----------4 Plot Tanker-----------###\n# Filter data for only \"Tanker\" ships\ntanker_data &lt;- ship_filter %&gt;%\n  filter(Ship_Type == \"Tanker\")\n\n# Calculate mean profit for each Engine Type and Route Type\nmean_profit_tanker &lt;- tanker_data %&gt;%\n  group_by(Engine_Type, Maintenance_Status) %&gt;%\n  summarise(mean_profit_tanker = mean(Profit, na.rm = TRUE), .groups = \"drop\")\n\n# Create Plot_tanker\np_ridg_tanker_ms &lt;- ggplot(tanker_data, aes(x = Profit, \n                        y = Engine_Type, \n                        fill = Maintenance_Status, \n                        color = Maintenance_Status)) +\n  geom_density_ridges(\n    alpha = 0.2,           \n    scale = 6,            \n    rel_min_height = 0.01,\n    position = \"identity\"   # Ensures full overlap\n  ) +\n  geom_point(data = mean_profit_tanker, \n             aes(x = mean_profit_tanker, y = Engine_Type, fill = Maintenance_Status), \n             shape = 23, size = 3, stroke = 0.5, color = \"grey90\") +\n  facet_wrap(~ Engine_Type, ncol = 1, strip.position = \"left\") +  # Separate plots for each Route_Type\n  labs(x = \"Tanker\", y = NULL) +  \n  scale_fill_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) +  \n  scale_color_manual(values = c(\"Critical\" = \"#FF9EAA\",\n                               \"Good\" = \"#3AA6B9\",\n                               \"Fair\" = \"grey70\")) + \n  theme_classic() +\n  theme(axis.text.y = element_blank(),  \n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        panel.grid.major = element_blank(),  \n        panel.grid.minor = element_blank(),\n        strip.text.y = element_blank(),\n        strip.background = element_blank(), \n        legend.position = \"none\",\n        plot.title = element_text(size = 12, face = \"bold\",\n                                  hjust = 0.5, vjust = -120)\n        )\n\npatchwork &lt;- (p_ridg_bulkc_ms | p_ridg_cship_ms | p_ridg_fishc_ms | p_ridg_tanker_ms)\npatchwork",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "pacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)\n\ngtsummary: meant to summarise modeling results. allows to create elegant tables for reporting results.\nIf the package is not in CRAN yet, install devtools as well in Tools first.",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex5"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html#getting-started",
    "href": "In-class_Ex/In-class_Ex05.html#getting-started",
    "title": "In-class_Ex04",
    "section": "",
    "text": "pacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)\n\ngtsummary: meant to summarise modeling results. allows to create elegant tables for reporting results.\nIf the package is not in CRAN yet, install devtools as well in Tools first.",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex5"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html#importing-data",
    "href": "In-class_Ex/In-class_Ex05.html#importing-data",
    "title": "In-class_Ex04",
    "section": "Importing data",
    "text": "Importing data\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \"data\"\n)\n# In the file, there is another tab called \"metadata\", so \"data\" tab is specified in the code above.\n\n\nsummary(car_resale)\n\n       Id            Model               Price         Age_08_04    \n Min.   :   1.0   Length:1436        Min.   : 4350   Min.   : 1.00  \n 1st Qu.: 361.8   Class :character   1st Qu.: 8450   1st Qu.:44.00  \n Median : 721.5   Mode  :character   Median : 9900   Median :61.00  \n Mean   : 721.6                      Mean   :10731   Mean   :55.95  \n 3rd Qu.:1081.2                      3rd Qu.:11950   3rd Qu.:70.00  \n Max.   :1442.0                      Max.   :32500   Max.   :80.00  \n   Mfg_Month         Mfg_Year          KM         Quarterly_Tax   \n Min.   : 1.000   Min.   :1998   Min.   :     1   Min.   : 19.00  \n 1st Qu.: 3.000   1st Qu.:1998   1st Qu.: 43000   1st Qu.: 69.00  \n Median : 5.000   Median :1999   Median : 63390   Median : 85.00  \n Mean   : 5.549   Mean   :2000   Mean   : 68533   Mean   : 87.12  \n 3rd Qu.: 8.000   3rd Qu.:2001   3rd Qu.: 87021   3rd Qu.: 85.00  \n Max.   :12.000   Max.   :2004   Max.   :243000   Max.   :283.00  \n     Weight     Guarantee_Period    HP_Bin             CC_bin         \n Min.   :1000   Min.   : 3.000   Length:1436        Length:1436       \n 1st Qu.:1040   1st Qu.: 3.000   Class :character   Class :character  \n Median :1070   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :1072   Mean   : 3.815                                        \n 3rd Qu.:1085   3rd Qu.: 3.000                                        \n Max.   :1615   Max.   :36.000                                        \n     Doors           Gears         Cylinders  Fuel_Type        \n Min.   :2.000   Min.   :3.000   Min.   :4   Length:1436       \n 1st Qu.:3.000   1st Qu.:5.000   1st Qu.:4   Class :character  \n Median :4.000   Median :5.000   Median :4   Mode  :character  \n Mean   :4.033   Mean   :5.026   Mean   :4                     \n 3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:4                     \n Max.   :5.000   Max.   :6.000   Max.   :4                     \n    Color             Met_Color        Automatic       Mfr_Guarantee   \n Length:1436        Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n Class :character   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Mode  :character   Median :1.0000   Median :0.00000   Median :0.0000  \n                    Mean   :0.6748   Mean   :0.05571   Mean   :0.4095  \n                    3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000  \n                    Max.   :1.0000   Max.   :1.00000   Max.   :1.0000  \n BOVAG_Guarantee       ABS            Airbag_1         Airbag_2     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.0000   Median :1.0000   Median :1.0000  \n Mean   :0.8955   Mean   :0.8134   Mean   :0.9708   Mean   :0.7228  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n     Airco        Automatic_airco   Boardcomputer      CD_Player     \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :1.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.5084   Mean   :0.05641   Mean   :0.2946   Mean   :0.2187  \n 3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n  Central_Lock    Powered_Windows Power_Steering       Radio       \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.000   Median :1.0000   Median :0.0000  \n Mean   :0.5801   Mean   :0.562   Mean   :0.9777   Mean   :0.1462  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n   Mistlamps      Sport_Model     Backseat_Divider  Metallic_Rim   \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  \n Mean   :0.257   Mean   :0.3001   Mean   :0.7702   Mean   :0.2047  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n Radio_cassette      Tow_Bar      \n Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000  \n Mean   :0.1455   Mean   :0.2779  \n 3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex5"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html#data-overview",
    "href": "In-class_Ex/In-class_Ex05.html#data-overview",
    "title": "In-class_Ex04",
    "section": "Data overview",
    "text": "Data overview\n\nlist(car_resale)\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex5"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html#explanatory-model",
    "href": "In-class_Ex/In-class_Ex05.html#explanatory-model",
    "title": "In-class_Ex04",
    "section": "Explanatory Model",
    "text": "Explanatory Model\n\nAvoid Multi-collinearity\nMethod_1. Correlation analysis: correlation matrix.\nMethod_2. Easystats\n&lt;Model&gt;\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n&lt;Model 1&gt;\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\ncheck_normality(model1) #diagnostic check / normality assumption test\n\nWarning: Non-normality of residuals detected (p &lt; .001).\n\n\n\ncheck_heteroscedasticity(model1)\n\nWarning: Heteroscedasticity (non-constant error variance) detected (p &lt; .001).\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\nLinearity - should be a horizontal line. If not, can be affected by the outliers.\nHeteroscedasticity - good to build two models based on the observations.",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex5"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html#smarteda",
    "href": "In-class_Ex/In-class_Ex05.html#smarteda",
    "title": "In-class_Ex04",
    "section": "SmartEDA",
    "text": "SmartEDA\nHelp organise data to do EDA &gt; review summary statistics.\n\ntype = 1type = 2\n\n\n\nsummary_1 &lt;- car_resale %&gt;%\n  ExpData(type = 1) #store the result into a data table.\nsummary_1\n\n                                          Descriptions     Value\n1                                   Sample size (nrow)      1436\n2                              No. of variables (ncol)        38\n3                    No. of numeric/interger variables        33\n4                              No. of factor variables         0\n5                                No. of text variables         5\n6                             No. of logical variables         0\n7                          No. of identifier variables         1\n8                                No. of date variables         0\n9             No. of zero variance variables (uniform)         1\n10               %. of variables having complete cases 100% (38)\n11   %. of variables having &gt;0% and &lt;50% missing cases    0% (0)\n12 %. of variables having &gt;=50% and &lt;90% missing cases    0% (0)\n13          %. of variables having &gt;=90% missing cases    0% (0)\n\n\nCan print out summary_1 for report.\n\n\n\nsummary_2 &lt;- car_resale %&gt;%\n  ExpData(type = 2) #store the result into a data table.\nsummary_2\n\n   Index    Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1               Id       numeric     1436             0              0\n2      2            Model     character     1436             0              0\n3      3            Price       numeric     1436             0              0\n4      4        Age_08_04       numeric     1436             0              0\n5      5        Mfg_Month       numeric     1436             0              0\n6      6         Mfg_Year       numeric     1436             0              0\n7      7               KM       numeric     1436             0              0\n8      8    Quarterly_Tax       numeric     1436             0              0\n9      9           Weight       numeric     1436             0              0\n10    10 Guarantee_Period       numeric     1436             0              0\n11    11           HP_Bin     character     1436             0              0\n12    12           CC_bin     character     1436             0              0\n13    13            Doors       numeric     1436             0              0\n14    14            Gears       numeric     1436             0              0\n15    15        Cylinders       numeric     1436             0              0\n16    16        Fuel_Type     character     1436             0              0\n17    17            Color     character     1436             0              0\n18    18        Met_Color       numeric     1436             0              0\n19    19        Automatic       numeric     1436             0              0\n20    20    Mfr_Guarantee       numeric     1436             0              0\n21    21  BOVAG_Guarantee       numeric     1436             0              0\n22    22              ABS       numeric     1436             0              0\n23    23         Airbag_1       numeric     1436             0              0\n24    24         Airbag_2       numeric     1436             0              0\n25    25            Airco       numeric     1436             0              0\n26    26  Automatic_airco       numeric     1436             0              0\n27    27    Boardcomputer       numeric     1436             0              0\n28    28        CD_Player       numeric     1436             0              0\n29    29     Central_Lock       numeric     1436             0              0\n30    30  Powered_Windows       numeric     1436             0              0\n31    31   Power_Steering       numeric     1436             0              0\n32    32            Radio       numeric     1436             0              0\n33    33        Mistlamps       numeric     1436             0              0\n34    34      Sport_Model       numeric     1436             0              0\n35    35 Backseat_Divider       numeric     1436             0              0\n36    36     Metallic_Rim       numeric     1436             0              0\n37    37   Radio_cassette       numeric     1436             0              0\n38    38          Tow_Bar       numeric     1436             0              0\n   No_of_distinct_values\n1                   1436\n2                    372\n3                    236\n4                     77\n5                     12\n6                      7\n7                   1263\n8                     13\n9                     59\n10                     9\n11                     3\n12                     3\n13                     4\n14                     4\n15                     1\n16                     3\n17                    10\n18                     2\n19                     2\n20                     2\n21                     2\n22                     2\n23                     2\n24                     2\n25                     2\n26                     2\n27                     2\n28                     2\n29                     2\n30                     2\n31                     2\n32                     2\n33                     2\n34                     2\n35                     2\n36                     2\n37                     2\n38                     2\n\n\n\n\n\n\nlist(car_resale)\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\ncol &lt;- c(\"Mfg_Month\", \"HP_Bin\", \"CC_bin\", \"Doors\", \"Gears\",\n         \"Cylinders\", \"Fuel_Type\", \"Color\", \"Met_Color\", \"Automatic\",\n         \"Mfr_Guarantee\", \"BOVAG_Guarantee\", \"ABS\", \"Airbag_1\",\n         \"Airbag_2\", \"Airco\", \"Automatic_airco\", \"Automatic_airco\", \n         \"Boardcomputer\", \"CD_Player\", \"Central_Lock\", \"Powered_Windows\",\n         \"Power_Steering\", \"Radio\",\"Mistlamps\", \"Sport_Model\", \"Backseat_Divider\",\n         \"Metallic_Rim\", \"Radio_cassette\", \"Tow_Bar\")\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \"data\") %&gt;%\n  mutate(Id = as.character(Id)) %&gt;%\n  mutate(across(all_of(col), as.factor))\n\n\ncar_resale %&gt;%\n  ExpNumViz(target=NULL,\n            nlim=10,\n            Page=c(2,3))\n\n$`0`\n\n\n\n\n\n\n\n\n\n\ncar_resale %&gt;%\n  ExpNumViz(target=\"Price\",\n            nlim=10,\n            Page=c(2,2))\n\n$`0`\n\n\n\n\n\n\n\n\n\nBar plots for all categorical vars.\n\ncar_resale%&gt;%\n  ExpCatViz(target=NULL,\n            col = \"#e0bcc0\",\n            clim = 10,\n            margin = 2,\n            Page = c(4,4),\n            sample = 16)\n\n$`0`",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex5"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html#gtsummary",
    "href": "In-class_Ex/In-class_Ex05.html#gtsummary",
    "title": "In-class_Ex04",
    "section": "gtsummary",
    "text": "gtsummary\n\nsummary(model1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10249.4   -768.6    -15.4    738.5   6356.5 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -2.186e+03  9.722e+02  -2.248   0.0247 *  \nAge_08_04        -1.195e+02  2.760e+00 -43.292   &lt;2e-16 ***\nKM               -2.406e-02  1.201e-03 -20.042   &lt;2e-16 ***\nWeight            1.972e+01  8.379e-01  23.533   &lt;2e-16 ***\nGuarantee_Period  2.682e+01  1.261e+01   2.126   0.0336 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1413 on 1431 degrees of freedom\nMultiple R-squared:  0.8486,    Adjusted R-squared:  0.8482 \nF-statistic:  2005 on 4 and 1431 DF,  p-value: &lt; 2.2e-16\n\n\nInstead of using summary(), we can use tbl_regression(). It’s designed for regression modeling. This makes the table output professional looking.\n\nlibrary(gt)\ntbl_regression(model1,\n               intercept = TRUE) %&gt;%\n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"), #  \"\\U03C3\" to extract sigma value\n    include = c(r.squared, adj.r.squared,\n                AIC, statistic, p.value, sigma)\n  ) %&gt;%\n  as_gt() %&gt;%\n  tab_options(\n    table.background.color = \"#f1f4f5\") \n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n&lt;0.001\n    KM\n-0.02\n-0.03, -0.02\n&lt;0.001\n    Weight\n20\n18, 21\n&lt;0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n    \n      R² = 0.849; Adjusted R² = 0.848; AIC = 24,915; Statistic = 2,005; p-value = &lt;0.001; σ = 1,413\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\np_model1 &lt;- parameters(model1) #save the result into p_model1; later can plot it.\n\nWe can also visualise them as a plot, instead of table form above.\n\nplot(parameters(model1)) #created by See.\n\n\n\n\n\n\n\n\nBelow gives more stats details, an improved version.\n\nggcoefstats(model1,\n            output = \"plot\"\n            ) \n\n\n\n\n\n\n\n\nTeemap requires at least: 2 categorical (hierarchy) + 2 numerical data\nSee In-class_Ex05 for Tableau visualisation.",
    "crumbs": [
      "![](/images/house.svg)",
      "In-class Exercise",
      "In-class_Ex5"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#average-load-1",
    "href": "Take-home_Ex/Take-home_Ex01.html#average-load-1",
    "title": "Take-home Exercise 1",
    "section": "Average load",
    "text": "Average load\n\n\nShow the code\np_pt_al &lt;- ggplot(data=ship_filter,\n             aes(x = Average_Load_Percentage,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(40,100),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Average Load vs Profit\",\n       x = \"Average_Load_Percentage\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_al_st &lt;- ggplot(data=ship_filter,\n             aes(x = Average_Load_Percentage,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(40,100),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Average Load vs Profit by All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np5_plotly &lt;- ggplotly(p_pt_al)\np6_plotly &lt;- ggplotly(p_pt_al_st)\n\ncombined_plot &lt;- subplot(p5_plotly,  p6_plotly, nrows = 1)\ncombined_plot",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#turnaround-time-1",
    "href": "Take-home_Ex/Take-home_Ex01.html#turnaround-time-1",
    "title": "Take-home Exercise 1",
    "section": "Turnaround time",
    "text": "Turnaround time\n\n\nShow the code\np_pt_turntime &lt;- ggplot(data=ship_filter,\n             aes(x = Turnaround_Time_hours,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(0,80),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Overall Trend Line\",\n       x = \"Turnaround_Time_hours\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_turntime_st &lt;- ggplot(data=ship_filter,\n             aes(x = Turnaround_Time_hours,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey80\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(0, 80),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\np7_plotly &lt;- ggplotly(p_pt_turntime)\np8_plotly &lt;- ggplotly(p_pt_turntime_st)\n\ncombined_plot &lt;- subplot(p7_plotly,  p8_plotly, nrows = 1)\ncombined_plot",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#cargo-weight-1",
    "href": "Take-home_Ex/Take-home_Ex01.html#cargo-weight-1",
    "title": "Take-home Exercise 1",
    "section": "Cargo Weight",
    "text": "Cargo Weight\n\n\nShow the code\np_pt_cargowt &lt;- ggplot(data=ship_filter,\n             aes(x = Cargo_Weight_tons,\n                 y = Profit)) +\n  geom_point(size = 0.6,\n             aes(color = Ship_Type),\n             show.legend = FALSE) +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim=c(50,2000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Cargo Weight with Overall Trend Line\",\n       x = \"Cargo_Weight_tons\",\n       y = \"Profit (1KUSD)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np_pt_cargowt_st &lt;- ggplot(data=ship_filter,\n             aes(x = Cargo_Weight_tons,\n                 y = Profit,\n                 color = Ship_Type)) +\n  geom_point(colour = \"grey80\",\n             size = 0.6) +\n  geom_smooth(method = lm,\n              size = 0.5,\n              se = FALSE,\n              aes(color = Ship_Type)) +\n  scale_color_brewer(palette = \"Set2\") +\n  coord_cartesian(xlim=c(50, 2000),\n                 ylim=c(-500,1000)) +\n  labs(title = \"Turnaround Time with Trend Lines for All Ship Types\",\n       color = \"Ship Type\") +\n  theme_classic() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size=10),\n        legend.position = \"right\",\n        plot.background = element_rect(fill = \"#f1f4f5\", color = NA),\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\", color = NA)\n        ) +\n  scale_color_manual(values = c(\"Bulk Carrier\" = \"#FF9EAA\", \n                                \"Container Ship\" = \"#3AA6B9\",\n                                \"Fish Carrier\" = \"#e0c080\",\n                                \"Tanker\" = \"#a5c7a7\")) \n\n\np9_plotly &lt;- ggplotly(p_pt_cargowt)\np10_plotly &lt;- ggplotly(p_pt_cargowt_st)\n\ncombined_plot &lt;- subplot(p9_plotly,  p10_plotly, nrows = 1)\ncombined_plot\n\n\n\n\n\n\n:::\n\n\nInsights\n\n\n\nOverall Trends in Performance Metrics Across the various performance metrics, both Average Load Percentage and Cargo Weight exhibit a slight upward trend, suggesting that higher load and cargo may be linked to improved profit performance. In contrast, Turnaround Time shows a mild downward slope, indicating that quicker turnarounds could positively impact profitability, aligning with industry expectations.\nEnergy Efficiency and Profitability for Container Ships For Container Ships, there is a clear positive correlation between energy efficiency and profit, suggesting that better fuel or energy management directly contributes to enhanced financial performance.\nAverage Load Percentage Trends Across Ship Types All ship types exhibit an overall upward trend in Average Load Percentage, but Container Ships demonstrate the most pronounced increase. This suggests that maximising load capacity might be a key driver for profit improvement, particularly for container vessels.\nTurnaround Time Impact on Profitability Container Ships and Tankers show the most noticeable negative correlation between Turnaround Time and Profit, implying that longer wait times between voyages detract from profitability. Reducing turnaround time for these ship types could lead to more efficient operations and better financial outcomes.\nCargo Weight and Profit Correlation Across all ship types, there is a slight but consistent positive correlation between Cargo Weight and Profit. While the relationship isn’t as strong, it suggests that heavier loads generally contribute to higher profits, emphasising the importance of maximising cargo capacity.\n\n\n\n\n5.2.3 Comparing Profit and Cargo Weight by ship\ntreemap() is used to visually compare multiple categorical and numerical aspects of voyage performance. In this plot, total profit is represented by colour intensity, while voyage frequency determines the size of each rectangle. Larger rectangles indicate a higher number of trips, while darker colours represent greater profitability. The hierarchical structure follows a descending order, first grouping by ship type, then engine type, and finally route type. This organisation allows for a layered comparison, making it easier to observe patterns and relationships across these categories.\n\n\nShow the code\nlibrary(dplyr)\nship_treemap &lt;- ship_filter %&gt;%\n  group_by(Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition, Route_Type) %&gt;%  \n  summarise(\n    Total_Profit = sum(Profit, na.rm = TRUE),  \n    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Total_Cargo = sum(Cargo_Weight_tons, na.rm = TRUE),\n    Voyage_Count = n()\n  ) %&gt;%\n  ungroup()  \n\ntreemap(ship_treemap,\n        index=c(\"Ship_Type\", \"Engine_Type\", \"Route_Type\"),\n        vSize=\"Voyage_Count\",\n        vColor=\"Total_Profit\",\n        type = \"value\",\n        palette=\"RdYlBu\",\n        algorithm = \"pivotSize\", \n        sortID = \"Total_Profit\",\n        title=\"Profit by Cargo Weight\",\n        title.legend = \"Profit ($1K USD)\",\n        border.col = c(\"black\", \"red\", \"white\"),\n        border.lwds = c(5, 2, 0.8)\n        )\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nContainer ships powered by steam turbine engines on long-haul routes lead the industry in profitability, outperforming all other combinations of ship type, engine type, and route. Following closely behind are bulk carriers with diesel engines, also operating on long-haul routes.\nIn general, coastal and short-haul routes yield lower profits across all ship types. However, there are two notable exceptions—tankers with steam turbine engines and container ships with diesel engines, both of which achieve relatively strong profitability on coastal routes.\nWhile not universal, a clear trend emerges: most short-haul routes tend to generate lower profits, reinforcing the idea that longer voyages often offer greater financial returns.\n\n\n\n\n\n5.3 Performance over time\n\n5.3.1 Financial performance overview\nTo provide an overview of financial performance over time, a line chart visualises the trends in profit, revenue, and cost. The top five months with the highest profit are highlighted with red points, along with their respective profit amounts.\n\n\nShow the code\n# Extract month and year from the Date\nship_filter_month &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by month and calculate total profit, cost, and revenue\nmonthly_totals &lt;- ship_filter_month %&gt;%\n  group_by(Month) %&gt;%\n  summarise(\n    Profit = sum(Profit, na.rm = TRUE),\n    Op_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE)\n  )\n\n# Sort the data by Total_Profit in descending order and select the top 5 months\ntop_5_months &lt;- monthly_totals %&gt;%\n  arrange(desc(Profit)) %&gt;%\n  slice_head(n = 5) %&gt;%\n  mutate(\n    #Month_label = format(Month, \"%m/%y\"),  # Format date as mm/yy\n         Profit_label = paste0(\"$\", round(Profit, 2)))  # Create the label\n\n# Reshape the data from wide to long format\nmonthly_long &lt;- monthly_totals %&gt;%\n  pivot_longer(cols = c(Profit, Op_Cost, Revenue),\n               names_to = \"Type\",\n               values_to = \"Value\")\n\n# Plot total profit, total cost, and total revenue over time\nggplot(monthly_long, aes(x = Month, y = Value, color = Type, group = Type)) +\n  \n  geom_line(size = 0.6) +  # Line plot for each variable\n  geom_point(data = top_5_months, \n             aes(x = Month, y = Profit), \n             color = \"red\", size = 3.5, shape = 21, fill = \"red\",\n             inherit.aes = FALSE) + # Prevent from inheriting \"Type\"\n  geom_text(data = top_5_months, \n            aes(x = Month, y = Profit, label = Profit_label),\n            color = \"black\", size = 3.5, vjust = -2, hjust = 0.5,\n            inherit.aes = FALSE) +\n  labs(title = \"Profit, Cost, and Revenue Over Time\",\n       x = \"Month\",\n       y = \"Amount (1K USD)\",\n       color = \"Type\") +\n    \n  theme_light() +\n  scale_color_manual(values = c(\"Profit\" = \"#f2cbd0\", \"Op_Cost\" = \"grey70\", \n                                \"Revenue\" = \"#86b3ba\"),\n                     guide = \"none\") +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  geomtextpath::geom_textline(\n    aes(label = Type),\n    linewidth = 1,\n    fontface = \"bold\",\n    size = 3,\n    vjust = -.4,\n    hjust = .5) \n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe top five months for profit are June, July, and October 2023, as well as March and June 2024.\nTotal profit fluctuates over time, but June 2024 outperformed June 2023 by 16.23%. This indicates an upward trend.\nProfit, revenue, and cost follow similar patterns, with profit and revenue showing the closest resemblance.\n\n\n\n\n\n5.3.2 Comparing Profit, Revenue, and Cost Across Ship Types\nTo compare financial performance across different ship types, I further break down the analysis by plotting profit, cost, and revenue trends for each ship type. This allows for a closer look at whether different ship types follow similar patterns over time. The top three highest amounts for each ship type are highlighted with circular points.\n\n\nShow the code\n###--------------- Plot profit\n# Aggregate total monthly profit for each ship type\nmonthly_profit &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%\n  group_by(Month, Ship_Type) %&gt;%\n  summarise(Total_profit = sum(Profit, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months &lt;- monthly_profit %&gt;%\n  group_by(Ship_Type) %&gt;%\n  slice_max(order_by = Total_profit, n = 3)\n\n# Define colors\nship_type_colors &lt;- c(\"#f2cbd0\", \"grey80\", \"grey40\", \"#9bc5cc\")\n\n# Plot profit over time for each ship type\np_line_pf &lt;- ggplot(monthly_profit, \n      aes(x = Month, \n          y = Total_profit, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8) + \n  geom_point(data = top_3_months, \n             aes(x = Month,\n                 y = Total_profit,\n                 inherit.aes = FALSE),\n             size = 3, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly *Profit* Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Profit (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        legend.title = element_blank(),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\")\n\n###--------------- Plot cost \n# Aggregate total monthly cost for each ship type\nmonthly_cost &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%\n  group_by(Month, Ship_Type) %&gt;%\n  summarise(Total_cost = sum(Operational_Cost_USD, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months_cost &lt;- monthly_cost %&gt;%\n  group_by(Ship_Type) %&gt;%\n  slice_max(order_by = Total_cost, n = 3)\n\n# Define colors\nship_type_colors &lt;- c(\"#f2cbd0\", \"grey80\", \"grey40\", \"#9bc5cc\")\n\n# Plot cost over time for each ship type\np_line_cost &lt;- ggplot(monthly_cost, \n      aes(x = Month, \n          y = Total_cost, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8, linetype = \"twodash\") + \n  geom_point(data = top_3_months_cost, \n             aes(x = Month,\n                 y = Total_cost,\n                 inherit.aes = FALSE),\n             size = 3, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months_cost$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly *Cost* Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Cost (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n#        legend.background = element_rect(fill = \"#fcf0cc\", color = \"#fcf0cc\"),\n        legend.title = element_blank(),\n#       plot.background = element_rect(fill = \"#fcf0cc\"),\n#        panel.background = element_rect(fill = \"#fcf0cc\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\")\n\n###--------------- Plot revenue \n# Aggregate total monthly revenue for each ship type\nmonthly_rvn &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%\n  group_by(Month, Ship_Type) %&gt;%\n  summarise(Total_rvn = sum(Revenue_per_Voyage_USD, na.rm = TRUE), \n            .groups = \"drop\")\n\n# Identify top 3 months for each type\ntop_3_months_rvn &lt;- monthly_rvn %&gt;%\n  group_by(Ship_Type) %&gt;%\n  slice_max(order_by = Total_rvn, n = 3)\n\n# Define colors\nship_type_colors &lt;- c(\"#e0bcc0\", \"grey80\", \"grey40\", \"#86b3ba\")\n\n# Plot revenue over time for each ship type\np_line_rvn &lt;- ggplot(monthly_rvn, \n      aes(x = Month, \n          y = Total_rvn, \n          color = Ship_Type, \n          group = Ship_Type)) +\n  geom_line(size = .8, linetype = \"dotted\") + \n  geom_point(data = top_3_months_rvn, \n             aes(x = Month,\n                 y = Total_rvn,\n                 inherit.aes = FALSE),\n             size = 3, shape = 21,\n             color = ship_type_colors[as.factor(top_3_months_rvn$Ship_Type)], \n             stroke = 1.5) +\n  labs(title = \"Monthly *Revenue* Trends by Ship Type\",\n       x = \"Month\",\n       y = \"Total Revenue (1KUSD)\",\n       color = \"Ship Type\") +\n  scale_color_manual(values = ship_type_colors) +  \n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\",\n        legend.background = element_rect(fill = \"#f1f4f5\", color = \"#f1f4f5\"),\n        legend.title = element_blank(),\n        plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank()) +\n  guides(fill = \"none\") \n\np_line_pf / p_line_cost / p_line_rvn \n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe four ship types exhibit distinct profit patterns over time. Bulk Carriers, Container Ships, and Tankers all recorded their highest profit in March 2024, while Fish Carriers peaked in June 2024.\nBulk Carriers and Fish Carriers had contrasting profit trends in August 2023 and January 2024. Each ship type hit its lowest profit in one of these months, while the other achieved one of its highest profits.\nFish Carriers experienced the most volatile costs over time, which may be linked to voyage frequency, as referenced in section 4.4.2.\n\n\n\n\n\n5.3.3 Monthly Profit, Revenue, and Cost Trends by Ship Type\nThe top 5 total profit by ship types are highlighted\n\n\nShow the code\nlibrary(dplyr)\n# Extract month and year from the Date\nship_filter_month &lt;- ship_filter %&gt;%\n  mutate(Month = floor_date(Date, \"month\"))\n\n# Group by month and calculate total profit, cost, and revenue\nmonthly_mean_wc &lt;- ship_filter_month %&gt;%\n  group_by(Month, Weather_Condition) %&gt;%\n  summarise(\n    Profit = mean(Profit, na.rm = TRUE),\n    Op_Cost = mean(Operational_Cost_USD, na.rm = TRUE),\n    Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),\n    .groups = \"drop\"\n  ) \n\n# Sort the data by Total_Profit in descending order and select the top 5 months\ntop_5_months_wc &lt;- monthly_mean_wc %&gt;%\n  arrange(desc(Profit)) %&gt;%\n  slice_head(n = 5) %&gt;%\n  mutate(\n    #Month_label = format(Month, \"%m/%y\"),  # Format date as mm/yy\n         Profit_label = paste0(\"$\", round(Profit, 2)))  # Create the label\n\n# Reshape the data from wide to long format\nmonthly_long_wc &lt;- monthly_mean_wc %&gt;%\n  pivot_longer(cols = c(Profit, Op_Cost, Revenue),\n               names_to = \"Type\",\n               values_to = \"Value\")\n\n# Plot total profit, total cost, and total revenue over time\nggplot(monthly_long_wc, aes(x = Month, y = Value, color = Type, group = interaction(Weather_Condition, Type))) +\n  geom_line(size = 0.3) +  # Line plot for each variable\n  geom_point(data = top_5_months_wc, \n             aes(x = Month, y = Profit), \n             color = \"purple\", size = 3, shape = 21, fill = \"purple\",\n             inherit.aes = FALSE) + # Prevent from inheriting \"Type\"\n  geom_text(data = top_5_months_wc, \n            aes(x = Month, y = Profit, label = Profit_label),\n            color = \"black\", size = 3.5, vjust = -2, hjust = 0.5,\n            inherit.aes = FALSE) +\n  labs(title = \"Profit, Cost, and Revenue Over Time by Weather\",\n       x = \"Month\",\n       y = \"Amount (1K USD)\",\n       color = \"Type\") +\n  coord_cartesian(ylim = c(100, 610)) +\n    \n  theme_light() +\n  scale_color_manual(values = c(\"Profit\" = \"#f2cbd0\", \"Op_Cost\" = \"grey70\", \n                                \"Revenue\" = \"#9bc5cc\"),\n                     guide = \"none\") +\n  scale_x_date(labels = scales::date_format(\"%m/%y\"), breaks = \"1 month\") +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"top\"\n        ) +\n  theme(plot.background = element_rect(fill = \"#f1f4f5\"),\n        panel.background = element_rect(fill = \"#f1f4f5\"),\n        panel.border = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geomtextpath::geom_textline(\n    aes(label = Type),\n    linewidth = 1,\n    fontface = \"bold\",\n    size = 2,\n    vjust = -.4,\n    hjust = .5) +\n  facet_wrap(~ Weather_Condition, scales = \"free_y\") #facet by ship type\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nThe relationship between weather conditions and voyage profitability reveals intriguing patterns. In March 2024, voyages under calm weather saw a significant surge in profit, while moderate weather conditions in May also recorded strong performance. Interestingly, rough weather conditions experienced three distinct profit peaks throughout the year, suggesting that challenging conditions do not always equate to lower profitability.\nOn the cost side, monthly operational expenses remained relatively stable across all weather conditions. Notably, costs under moderate weather showed a gradual decline, possibly indicating improved efficiency or adjustments in operations.\nA strong correlation between revenue and profit is evident, with profit peaking at different times of the year regardless of weather conditions. However, one trend remains consistent—whenever revenue rises, profit follows suit, reinforcing the impact of demand and pricing on overall voyage performance.",
    "crumbs": [
      "![](/images/house.svg)",
      "Take-home Exercise",
      "Take-home_Ex01"
    ]
  }
]